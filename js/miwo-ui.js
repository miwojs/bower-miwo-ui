(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var BehaviorManager, CheckSelector, DefaultRenderer, DialogFactory, DropdownManager, FormRendererFactory, InlineRenderer, LoadingMask, LoadingMaskFactory, MiwoUiExtension, Notificator, PickerManager, PopoverBehavior, PopoverManager, RowSelector, SelectorFactory, TabsBehavior, TooltipBehavior, TooltipManager, WindowManager,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

DialogFactory = require('./window/DialogFactory');

WindowManager = require('./window/WindowManager');

FormRendererFactory = require('./form/render/FormRendererFactory');

DefaultRenderer = require('./form/render/DefaultRenderer');

InlineRenderer = require('./form/render/InlineRenderer');

TooltipManager = require('./tip/TooltipManager');

PopoverManager = require('./tip/PopoverManager');

BehaviorManager = require('./behaviors/BehaviorManager');

TooltipBehavior = require('./behaviors/Tooltip');

PopoverBehavior = require('./behaviors/Popover');

TabsBehavior = require('./behaviors/Tabs');

SelectorFactory = require('./selection/SelectorFactory');

CheckSelector = require('./selection/CheckSelector');

RowSelector = require('./selection/RowSelector');

Notificator = require('./notify/Notificator');

LoadingMaskFactory = require('./mask/LoadingMaskFactory');

LoadingMask = require('./mask/LoadingMask');

PickerManager = require('./picker/PickerManager');

DropdownManager = require('./dropdown/DropdownManager');

MiwoUiExtension = (function(_super) {
  __extends(MiwoUiExtension, _super);

  function MiwoUiExtension() {
    return MiwoUiExtension.__super__.constructor.apply(this, arguments);
  }

  MiwoUiExtension.prototype.init = function() {
    this.setConfig({
      behaviors: {
        tooltip: TooltipBehavior,
        popover: PopoverBehavior,
        tabs: TabsBehavior
      },
      selectors: {
        row: RowSelector,
        check: CheckSelector
      },
      mask: {
        instanceCls: LoadingMask
      }
    });
  };

  MiwoUiExtension.prototype.build = function(injector) {
    injector.define('dialogFactory', DialogFactory).setGlobal('dialog');
    injector.define('windowMgr', WindowManager).setGlobal();
    injector.define('formRendererFactory', FormRendererFactory, (function(_this) {
      return function(service) {
        service.register('default', DefaultRenderer);
        service.register('inline', InlineRenderer);
      };
    })(this));
    injector.define('dropdownMgr', DropdownManager).setGlobal();
    injector.define('tooltip', TooltipManager).setGlobal();
    injector.define('popover', PopoverManager).setGlobal();
    injector.define('behavior', BehaviorManager).setGlobal().setup((function(_this) {
      return function(service) {
        var name, value, _ref;
        _ref = _this.config.behaviors;
        for (name in _ref) {
          value = _ref[name];
          if (Type.isFunction(value)) {
            service.install(name, injector.createInstance(value));
          } else {
            throw new Error("Behavior must be function (constructor).");
          }
        }
      };
    })(this));
    injector.define('selectorFactory', SelectorFactory, (function(_this) {
      return function(service) {
        var klass, name, _ref;
        _ref = _this.config.selectors;
        for (name in _ref) {
          klass = _ref[name];
          service.register(name, klass);
        }
      };
    })(this));
    injector.define('notificator', Notificator).setGlobal();
    injector.define('mask', LoadingMaskFactory).setGlobal().setup((function(_this) {
      return function(service) {
        service.instanceCls = _this.config.mask.instanceCls;
      };
    })(this));
    injector.define('pickers', PickerManager).setGlobal();
  };

  MiwoUiExtension.prototype.update = function(injector) {
    injector.update('componentMgr').setup((function(_this) {
      return function(service) {
        var behavior;
        behavior = injector.get('behavior');
        service.on('afterrender', function(component) {
          behavior.apply(component.el);
        });
      };
    })(this));
  };

  return MiwoUiExtension;

})(Miwo.di.InjectorExtension);

module.exports = MiwoUiExtension;


},{"./behaviors/BehaviorManager":2,"./behaviors/Popover":3,"./behaviors/Tabs":4,"./behaviors/Tooltip":5,"./dropdown/DropdownManager":16,"./form/render/DefaultRenderer":47,"./form/render/FormRendererFactory":48,"./form/render/InlineRenderer":49,"./mask/LoadingMask":84,"./mask/LoadingMaskFactory":85,"./notify/Notificator":90,"./picker/PickerManager":104,"./selection/CheckSelector":113,"./selection/RowSelector":114,"./selection/SelectorFactory":116,"./tip/PopoverManager":124,"./tip/TooltipManager":126,"./window/DialogFactory":134,"./window/WindowManager":137}],2:[function(require,module,exports){
var BehaviorManager;

BehaviorManager = (function() {
  BehaviorManager.prototype.behaviors = null;

  function BehaviorManager() {
    this.behaviors = {};
  }

  BehaviorManager.prototype.install = function(name, plugin) {
    this.behaviors[name] = plugin;
    this[name] = plugin;
    miwo.ready((function(_this) {
      return function() {
        if (plugin.init) {
          plugin.init(miwo.body);
        }
      };
    })(this));
  };

  BehaviorManager.prototype.get = function(name) {
    return this.behaviors[name];
  };

  BehaviorManager.prototype.apply = function(element) {
    var behavior, name, _ref;
    _ref = this.behaviors;
    for (name in _ref) {
      behavior = _ref[name];
      if (behavior.apply) {
        behavior.apply(element);
      }
    }
  };

  return BehaviorManager;

})();

module.exports = BehaviorManager;


},{}],3:[function(require,module,exports){
var Popover,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Popover = (function(_super) {
  __extends(Popover, _super);

  function Popover() {
    return Popover.__super__.constructor.apply(this, arguments);
  }

  Popover.prototype.selector = '[data-toggle="popover"]';

  Popover.prototype.popover = Popover.inject('popover');

  Popover.prototype.init = function(body) {
    body.on("mouseenter:relay(" + this.selector + ")", (function(_this) {
      return function(e, target) {
        _this.popover.show(target);
      };
    })(this));
  };

  return Popover;

})(Miwo.Object);

module.exports = Popover;


},{}],4:[function(require,module,exports){
var Tabs,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Tabs = (function(_super) {
  __extends(Tabs, _super);

  function Tabs() {
    return Tabs.__super__.constructor.apply(this, arguments);
  }

  Tabs.prototype.selector = '[data-toggle="tab"]';

  Tabs.prototype.init = function(body) {};

  return Tabs;

})(Miwo.Object);

module.exports = Tabs;


},{}],5:[function(require,module,exports){
var Tooltip,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Tooltip = (function(_super) {
  __extends(Tooltip, _super);

  function Tooltip() {
    return Tooltip.__super__.constructor.apply(this, arguments);
  }

  Tooltip.prototype.selector = '[data-toggle="tooltip"]';

  Tooltip.prototype.tooltip = Tooltip.inject('tooltip');

  Tooltip.prototype.init = function(body) {
    body.on("mouseenter:relay(" + this.selector + ")", (function(_this) {
      return function(e, target) {
        _this.tooltip.show(target);
      };
    })(this));
  };

  return Tooltip;

})(Miwo.Object);

module.exports = Tooltip;


},{}],6:[function(require,module,exports){
var Button,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Button = (function(_super) {
  __extends(Button, _super);

  function Button() {
    return Button.__super__.constructor.apply(this, arguments);
  }

  Button.defaultIconClsPrefix = 'glyphicon-';

  Button.defaultIconClsBase = 'glyphicon';

  Button.prototype.isButton = true;

  Button.prototype.xtype = "button";

  Button.prototype.el = 'button';

  Button.prototype.baseCls = 'btn';

  Button.prototype.handler = null;

  Button.prototype.text = '';

  Button.prototype.size = '';

  Button.prototype.type = 'default';

  Button.prototype.disabled = false;

  Button.prototype.active = false;

  Button.prototype.toggled = false;

  Button.prototype.toggleHandler = null;

  Button.prototype.tooltip = null;

  Button.prototype.title = null;

  Button.prototype.icon = null;

  Button.prototype.textEl = null;

  Button.prototype.iconEl = null;

  Button.prototype.setDisabled = function(disabled, silent) {
    this.el.toggleClass('disabled', disabled);
    this.el.set('tabindex', -disabled);
    this.disabled = disabled;
    if (!silent) {
      if (disabled) {
        this.emit('disabled', this);
      } else {
        this.emit('enabled', this);
      }
    }
  };

  Button.prototype.setText = function(text) {
    this.text = text;
    if (this.textEl) {
      this.textEl.set("html", (this.icon ? ' ' + this.text : this.text));
    }
  };

  Button.prototype.setIcon = function(cls, silent) {
    if (this.iconEl && this.icon) {
      this.iconEl.removeClass(Button.defaultIconClsPrefix + this.icon);
    }
    this.icon = cls;
    if (this.iconEl) {
      if (cls) {
        this.iconEl.addClass(Button.defaultIconClsPrefix + cls);
        this.iconEl.show("inline-block");
      } else {
        this.iconEl.hide();
      }
    }
  };

  Button.prototype.setSize = function(size) {
    if (this.size) {
      this.el.removeClass(this.getBaseCls(this.size));
    }
    if (size) {
      this.el.addClass(this.getBaseCls(size));
    }
    this.size = size;
  };

  Button.prototype.setType = function(type) {
    if (this.type) {
      this.el.removeClass(this.getBaseCls(this.type));
    }
    if (type) {
      this.el.addClass(this.getBaseCls(type));
    }
    this.type = type;
  };

  Button.prototype.setActive = function(active, silent) {
    this.el.toggleClass('active', active);
    this.active = active;
    if (!silent && active) {
      this.emit('active', this, active);
    }
  };

  Button.prototype.isActive = function() {
    return this.active && !this.disabled;
  };

  Button.prototype.setToggled = function(toggled) {
    this.toggled = toggled;
  };

  Button.prototype.toggle = function(silent) {
    this.setActive(!this.active);
    if (!silent) {
      this.emit('toggle', this, this.active);
      if (this.toggleHandler) {
        this.toggleHandler(this, this.active);
      }
    }
  };

  Button.prototype.click = function(e) {
    if (Type.isFunction(this.handler)) {
      this.handler(this, e);
    } else if (Type.isString(this.handler)) {
      if (this.handler.indexOf('#') === 0) {
        miwo.redirect(this.handler);
      } else {
        document.location = this.handler;
      }
    }
  };

  Button.prototype.doRender = function() {
    if (this.type) {
      this.el.addClass(this.getBaseCls(this.type));
    }
    if (this.size) {
      this.el.addClass(this.getBaseCls(this.size));
    }
    if (this.active) {
      this.el.addClass('active');
    }
    if (this.disabled) {
      this.el.addClass('disabled');
    }
    if (this.disabled) {
      this.el.set('tabindex', -1);
    }
    if (this.tooltip || this.title) {
      this.el.set("title", this.tooltip || this.title);
    }
    this.el.on("click", this.bound("onClick"));
    this.el.on("keyup", this.bound("onKeyup"));
    this.iconEl = new Element("i", {
      parent: this.el,
      cls: Button.defaultIconClsBase
    });
    this.textEl = new Element("span", {
      parent: this.el,
      html: (this.icon ? ' ' + this.text : this.text)
    });
    this.iconEl.addClass(Button.defaultIconClsPrefix + this.icon);
    if (!this.icon) {
      this.iconEl.hide();
    }
  };

  Button.prototype.onClick = function(e) {
    e.stop();
    if (this.disabled) {
      return;
    }
    this.preventClick = false;
    this.emit('beforeclick', this, e);
    if (this.preventClick) {
      return;
    }
    if (this.toggled) {
      this.toggle();
    }
    this.emit('click', this, e);
    this.click(e);
  };

  Button.prototype.onKeyup = function(e) {
    if (e.key === 'enter') {
      this.onClick(e);
    }
  };

  return Button;

})(Miwo.Component);

module.exports = Button;


},{}],7:[function(require,module,exports){
var Button, ButtonGroup, DropdownButton,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Button = require('./Button');

DropdownButton = require('./DropdownButton');

ButtonGroup = (function(_super) {
  __extends(ButtonGroup, _super);

  function ButtonGroup() {
    return ButtonGroup.__super__.constructor.apply(this, arguments);
  }

  ButtonGroup.prototype.xtype = "buttongroup";

  ButtonGroup.prototype.toggle = null;

  ButtonGroup.prototype.size = null;

  ButtonGroup.prototype.label = null;

  ButtonGroup.prototype.role = 'group';

  ButtonGroup.prototype.layout = 'auto';

  ButtonGroup.prototype.baseCls = 'btn-group';

  ButtonGroup.prototype.validateChildComponent = function(component) {
    if (!component.isButton) {
      throw new Error("Child component must by instance of Miwo.button.Button");
    }
  };

  ButtonGroup.prototype.addedComponent = function(component) {
    component.setToggled(!!this.toggle);
    this.mon(component, "active", "onButtonActive");
  };

  ButtonGroup.prototype.removedComponent = function(component) {
    this.mun(component);
  };

  ButtonGroup.prototype.onButtonActive = function(btn) {
    if (this.toggle === "radio") {
      this.getActiveButtons().each(function(pbtn) {
        if (pbtn !== btn) {
          pbtn.setActive(false, true);
        }
      });
    }
    this.emit('active', this, btn);
  };

  ButtonGroup.prototype.setDisabled = function(disabled, silent) {
    this.getComponents().each(function(component) {
      component.setDisabled(disabled, silent);
    });
  };

  ButtonGroup.prototype.setActive = function(name, active, silent) {
    this.get(name).setActive(active, silent);
  };

  ButtonGroup.prototype.setActiveAll = function(active) {
    this.getComponents().each(function(component) {
      component.setActive(active, true);
    });
  };

  ButtonGroup.prototype.getActiveButtons = function() {
    var active;
    active = [];
    this.getComponents().each(function(component) {
      if (component.isActive()) {
        active.push(component);
      }
    });
    return active;
  };

  ButtonGroup.prototype.getActiveButton = function() {
    var active;
    active = null;
    this.getComponents().each(function(component) {
      if (component.isActive()) {
        active = component;
        return false;
      }
    });
    return active;
  };

  ButtonGroup.prototype.addButton = function(name, config) {
    return this.add(name, new Button(config));
  };

  ButtonGroup.prototype.addDropdownButton = function(name, config) {
    return this.add(name, new DropdownButton(config));
  };

  ButtonGroup.prototype.afterRender = function() {
    ButtonGroup.__super__.afterRender.apply(this, arguments);
    if (this.label) {
      this.el.set('aria-label', this.label);
    }
    if (this.size) {
      this.el.addClass('btn-group-' + this.size);
    }
  };

  return ButtonGroup;

})(Miwo.Container);

module.exports = ButtonGroup;


},{"./Button":6,"./DropdownButton":9}],8:[function(require,module,exports){
var Button, CloseButton,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Button = require('./Button');

CloseButton = (function(_super) {
  __extends(CloseButton, _super);

  function CloseButton() {
    return CloseButton.__super__.constructor.apply(this, arguments);
  }

  CloseButton.prototype.baseCls = 'close';

  CloseButton.prototype.text = '<span aria-hidden="true">×</span>';

  return CloseButton;

})(Button);

module.exports = CloseButton;


},{"./Button":6}],9:[function(require,module,exports){
var Button, DropdownButton, DropdownList,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Button = require('./Button');

DropdownList = require('../dropdown/List');

DropdownButton = (function(_super) {
  __extends(DropdownButton, _super);

  function DropdownButton() {
    return DropdownButton.__super__.constructor.apply(this, arguments);
  }

  DropdownButton.prototype.dropdown = null;

  DropdownButton.prototype.afterRender = function() {
    DropdownButton.__super__.afterRender.apply(this, arguments);
    this.el.set('aria-haspopup', true);
    this.el.set('aria-expanded', false);
  };

  DropdownButton.prototype.getDropdown = function() {
    if (!this.dropdown) {
      this.dropdown = new DropdownList({
        target: this.el
      });
      this.dropdown.el.set('aria-labelledby', this.id);
    }
    return this.dropdown;
  };

  DropdownButton.prototype.doRender = function() {
    var caret;
    DropdownButton.__super__.doRender.apply(this, arguments);
    caret = new Element('span', {
      cls: 'caret'
    });
    caret.inject(this.getContentEl());
  };

  DropdownButton.prototype.click = function() {
    this.getDropdown().toggle();
  };

  DropdownButton.prototype.doDestroy = function() {
    if (this.dropdown) {
      this.dropdown.destroy();
    }
    return DropdownButton.__super__.doDestroy.apply(this, arguments);
  };

  return DropdownButton;

})(Button);

module.exports = DropdownButton;


},{"../dropdown/List":18,"./Button":6}],10:[function(require,module,exports){
var Button, ToolButton,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Button = require('./Button');

ToolButton = (function(_super) {
  __extends(ToolButton, _super);

  function ToolButton() {
    return ToolButton.__super__.constructor.apply(this, arguments);
  }

  ToolButton.prototype.isTool = true;

  ToolButton.prototype.xtype = "toolbutton";

  ToolButton.prototype.handler = null;

  ToolButton.prototype.icon = null;

  ToolButton.prototype.text = "";

  ToolButton.prototype.tooltip = null;

  ToolButton.prototype.el = 'button';

  ToolButton.prototype.textEl = null;

  ToolButton.prototype.iconEl = null;

  ToolButton.prototype.setDisabled = function(disabled, silent) {
    this.el.toggleClass('disabled', disabled);
    this.disabled = disabled;
    if (!silent) {
      if (disabled) {
        this.emit('disabled', this);
      } else {
        this.emit('enabled', this);
      }
    }
  };

  ToolButton.prototype.setText = function(text) {
    this.text = text;
    if (this.textEl) {
      this.textEl.set("html", text);
    }
  };

  ToolButton.prototype.setIcon = function(cls, silent) {
    if (this.iconEl) {
      if (this.icon) {
        this.iconEl.removeClass(Button.defaultIconClsPrefix + this.icon);
      }
    }
    this.icon = cls;
    if (this.iconEl) {
      if (cls) {
        this.iconEl.addClass(Button.defaultIconClsPrefix + cls);
        this.iconEl.show("inline-block");
      } else {
        this.iconEl.hide();
      }
    }
  };

  ToolButton.prototype.click = function(e) {
    if (this.handler) {
      this.handler(this, e);
    }
  };

  ToolButton.prototype.doRender = function() {
    this.el.addClass('btn-tool');
    if (this.disabled) {
      this.el.addClass('disabled');
    }
    if (this.tooltip) {
      this.el.set("title", this.tooltip);
    }
    this.el.on("click", this.bound("onClick"));
    this.iconEl = new Element("i", {
      parent: this.el,
      cls: Button.defaultIconClsBase + ' ' + Button.defaultIconClsPrefix + this.icon
    });
    this.textEl = new Element("span", {
      parent: this.el,
      cls: 'sr-only',
      html: this.text
    });
  };

  ToolButton.prototype.onClick = function(e) {
    e.stop();
    if (this.disabled) {
      return;
    }
    this.preventClick = false;
    this.emit('beforeclick', this, e);
    if (this.preventClick) {
      return;
    }
    this.emit('click', this, e);
    this.click(e);
  };

  return ToolButton;

})(Miwo.Component);

module.exports = ToolButton;


},{"./Button":6}],11:[function(require,module,exports){
module.exports = {
  ButtonGroup: require('./ButtonGroup'),
  Button: require('./Button'),
  ToolButton: require('./ToolButton'),
  DropdownButton: require('./DropdownButton'),
  CloseButton: require('./CloseButton')
};


},{"./Button":6,"./ButtonGroup":7,"./CloseButton":8,"./DropdownButton":9,"./ToolButton":10}],12:[function(require,module,exports){
var Drag,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Drag = (function(_super) {
  __extends(Drag, _super);

  Drag.prototype.snap = 6;

  Drag.prototype.unit = 'px';

  Drag.prototype.grid = null;

  Drag.prototype.style = true;

  Drag.prototype.limits = null;

  Drag.prototype.handle = false;

  Drag.prototype.invert = false;

  Drag.prototype.preventDefault = false;

  Drag.prototype.stopPropagation = false;

  Drag.prototype.modifiers = null;

  Drag.prototype.mouse = null;

  Drag.prototype.value = null;

  Drag.prototype.handles = null;

  Drag.prototype.document = null;

  Drag.prototype.element = null;

  function Drag(element, config) {
    var type;
    this.element = element;
    Drag.__super__.constructor.call(this, config);
    this.element = document.id(this.element);
    this.document = this.element.getDocument();
    if (!this.modifiers) {
      this.modifiers = {
        x: 'left',
        y: 'top'
      };
    }
    type = typeOf(this.handle);
    this.handles = (type === 'array' || type === 'collection' ? $$(this.handle) : document.id(this.handle)) || this.element;
    if (!this.limits) {
      this.limits = {
        x: [],
        y: []
      };
    }
    this.mouse = {
      'now': {},
      'pos': {}
    };
    this.value = {
      'start': {},
      'now': {}
    };
    if (__indexOf.call(document, 'ondragstart') >= 0 && !(__indexOf.call(window, 'FileReader') >= 0) && !Drag.ondragstartFixed) {
      document.ondragstart = Function.from(false);
      Drag.ondragstartFixed = true;
    }
    if (this.grid === null || typeOf(this.grid) === 'number') {
      this.grid = {
        x: this.grid,
        y: this.grid
      };
    }
    this.attach();
    return;
  }

  Drag.prototype.attach = function() {
    this.handles.on('mousedown', this.bound('start'));
    return this;
  };

  Drag.prototype.detach = function() {
    this.handles.un('mousedown', this.bound('start'));
    return this;
  };

  Drag.prototype.start = function(event) {
    var coordinates, name, property, style, _ref;
    if (event.rightClick) {
      return;
    }
    if (this.preventDefault) {
      event.preventDefault();
    }
    if (this.stopPropagation) {
      event.stopPropagation();
    }
    this.mouse.start = event.page;
    this.emit('beforestart', this.element);
    _ref = this.modifiers;
    for (name in _ref) {
      property = _ref[name];
      if (!property) {
        continue;
      }
      style = this.element.getStyle(property);
      if (style && !style.match(/px$/)) {
        if (!coordinates) {
          coordinates = this.element.getCoordinates(this.element.getOffsetParent());
        }
        style = coordinates[property];
      }
      if (this.style) {
        this.value.now[name] = (style || 0).toInt();
      } else {
        this.value.now[name] = this.element[property];
      }
      if (this.invert) {
        this.value.now[name] *= -1;
      }
      this.mouse.pos[name] = event.page[name] - this.value.now[name];
    }
    this.document.on('mousemove', this.bound('check'));
    this.document.on('mouseup', this.bound('cancel'));
  };

  Drag.prototype.check = function(event) {
    var distance;
    if (this.preventDefault) {
      event.preventDefault();
    }
    distance = Math.round(Math.sqrt(Math.pow(event.page.x - this.mouse.start.x, 2) + Math.pow(event.page.y - this.mouse.start.y, 2)));
    if (distance > this.snap) {
      this.cancel();
      this.document.on('mousemove', this.bound('drag'));
      this.document.on('mouseup', this.bound('stop'));
      this.emit('start', this.element, event);
      this.emit('snap', this.element);
    }
  };

  Drag.prototype.drag = function(event) {
    var name, property, _ref;
    if (this.preventDefault) {
      event.preventDefault();
    }
    this.mouse.now = event.page;
    _ref = this.modifiers;
    for (name in _ref) {
      property = _ref[name];
      if (!property) {
        continue;
      }
      this.value.now[name] = this.mouse.now[name] - this.mouse.pos[name];
      if (this.invert) {
        this.value.now[name] *= -1;
      }
      if (this.limits[name]) {
        if ((this.limits[name][1] || this.limits[name][1] === 0) && this.value.now[name] > this.limits[name][1]) {
          this.value.now[name] = this.limits[name][1];
        } else if ((this.limits[name][0] || this.limits[name][0] === 0) && this.value.now[name] < this.limits[name][0]) {
          this.value.now[name] = this.limits[name][0];
        }
      }
      if (this.grid && this.grid[name]) {
        this.value.now[name] -= (this.value.now[name] - (this.limits[name][0] || 0)) % this.grid[name];
      }
      if (this.style) {
        this.element.setStyle(property, this.value.now[name] + this.unit);
      } else {
        this.element[property] = this.value.now[name];
      }
    }
    this.emit('drag', this.element, event);
  };

  Drag.prototype.cancel = function(event) {
    this.document.un('mousemove', this.bound('check'));
    this.document.un('mouseup', this.bound('cancel'));
    if (event) {
      this.emit('cancel', this.element);
    }
  };

  Drag.prototype.stop = function(event) {
    this.document.un('mousemove', this.bound('drag'));
    this.document.un('mouseup', this.bound('stop'));
    if (event) {
      this.emit('complete', this.element, event);
    }
  };

  return Drag;

})(Miwo.Object);

module.exports = Drag;


},{}],13:[function(require,module,exports){
var Drag, Slider,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Drag = require('./Drag');

Slider = (function(_super) {
  __extends(Slider, _super);

  Slider.prototype.initialStep = 0;

  Slider.prototype.snap = false;

  Slider.prototype.offset = 0;

  Slider.prototype.range = false;

  Slider.prototype.wheel = false;

  Slider.prototype.steps = 100;

  Slider.prototype.mode = 'horizontal';

  Slider.prototype.axis = null;

  Slider.prototype.property = null;

  Slider.prototype.offsetProperty = null;

  Slider.prototype.full = 0;

  function Slider(element, knob, config) {
    var limits, modifiers;
    Slider.__super__.constructor.call(this, config);
    this.element = document.id(element);
    this.knob = document.id(knob);
    this.step = this.initialStep ? this.initialStep : (this.range ? this.range[0] : 0);
    this.previousChange = this.previousEnd = this.step;
    switch (this.mode) {
      case 'vertical':
        this.axis = 'y';
        this.property = 'top';
        this.offsetProperty = 'offsetHeight';
        limits = {
          x: [0, 0],
          y: []
        };
        modifiers = {
          x: false,
          y: 'top'
        };
        break;
      case 'horizontal':
        this.axis = 'x';
        this.property = 'left';
        this.offsetProperty = 'offsetWidth';
        limits = {
          x: [],
          y: [0, 0]
        };
        modifiers = {
          x: 'left',
          y: false
        };
    }
    this.drag = new Drag(this.knob, {
      snap: 0,
      limits: limits,
      modifiers: modifiers
    });
    this.drag.on('drag', (function(_this) {
      return function() {
        _this.draggedKnob();
      };
    })(this));
    this.drag.on('start', (function(_this) {
      return function() {
        _this.draggedKnob();
      };
    })(this));
    this.drag.on('beforestart', (function(_this) {
      return function() {
        _this.isDragging = true;
      };
    })(this));
    this.drag.on('cancel', (function(_this) {
      return function() {
        _this.isDragging = false;
      };
    })(this));
    this.drag.on('complete', (function(_this) {
      return function() {
        _this.isDragging = false;
        _this.draggedKnob();
        _this.end();
      };
    })(this));
    this.knob.setStyle(this.property, -this.offset);
    this.setSliderDimensions();
    this.setRange(this.range, null, true);
    if (this.snap) {
      this.setSnap();
    }
    if (this.initialStep !== null) {
      this.setStep(this.initialStep, true);
    }
    this.attach();
    return;
  }

  Slider.prototype.onTick = function(position) {
    this.setKnobPosition(position);
  };

  Slider.prototype.attach = function() {
    this.element.on('mousedown', this.bound('clickedElement'));
    if (this.wheel) {
      this.element.on('mousewheel', this.bound('scrolledElement'));
    }
    this.drag.attach();
    return this;
  };

  Slider.prototype.detach = function() {
    this.element.un('mousedown', this.bound('clickedElement'));
    this.element.un('mousewheel', this.bound('scrolledElement'));
    this.drag.detach();
    return this;
  };

  Slider.prototype.updateSize = function() {
    this.setSliderDimensions();
    this.setKnobPosition(this.toPosition(this.step));
    this.drag.limits[this.axis] = [-this.offset, this.full - this.offset];
    if (this.snap) {
      this.setSnap();
    }
    return this;
  };

  Slider.prototype.setSnap = function() {
    this.drag.grid[this.axis] = Math.ceil(this.stepWidth);
    this.drag.limits[this.axis][1] = this.element[this.offsetProperty];
    return this;
  };

  Slider.prototype.setKnobPosition = function(position) {
    if (this.snap) {
      position = this.toPosition(this.step);
    }
    this.knob.setStyle(this.property, position);
    return this;
  };

  Slider.prototype.setSliderDimensions = function() {
    this.full = this.element[this.offsetProperty] - this.knob[this.offsetProperty] + this.offset * 2;
    this.half = this.knob[this.offsetProperty] / 2;
    return this;
  };

  Slider.prototype.setStep = function(step, silently) {
    if (!(this.range > 0 ^ step < this.min)) {
      step = this.min;
    }
    if (!(this.range > 0 ^ step > this.max)) {
      step = this.max;
    }
    this.step = step.round(this.modulus.decimalLength);
    if (silently) {
      this.checkStep();
      this.setKnobPosition(this.toPosition(this.step));
    } else {
      this.checkStep();
      this.emit('tick', this.toPosition(this.step));
      this.emit('move');
      this.end();
    }
    return this;
  };

  Slider.prototype.setRange = function(range, pos, silently) {
    this.min = range ? range[0] : 0;
    this.max = range ? range[1] : this.steps;
    this.range = this.max - this.min;
    this.steps = this.steps || this.full;
    this.stepSize = Math.abs(this.range) / this.steps;
    this.stepWidth = this.stepSize * this.full / Math.abs(this.range);
    this.setModulus();
    if (range) {
      this.setStep(Array.pick([pos, this.step]).limit(this.min, this.max), silently);
    }
    return this;
  };

  Slider.prototype.setModulus = function() {
    var decimals, modulus;
    decimals = ((this.stepSize + '').split('.')[1] || []).length;
    modulus = 1 + '';
    while (decimals--) {
      modulus += '0';
    }
    this.modulus = {
      multiplier: modulus.toInt(10),
      decimalLength: modulus.length - 1
    };
  };

  Slider.prototype.clickedElement = function(event) {
    var dir, position;
    if (this.isDragging || event.target === this.knob) {
      return;
    }
    dir = this.range < 0 ? -1 : 1;
    position = event.page[this.axis] - this.element.getPosition()[this.axis] - this.half;
    position = position.limit(-this.offset, this.full - this.offset);
    this.step = (this.min + dir * this.toStep(position)).round(this.modulus.decimalLength);
    this.setKnobPosition(this.toPosition(this.step));
    this.checkStep();
    this.emit('tick', position);
    this.emit('move');
    this.end();
  };

  Slider.prototype.scrolledElement = function(event) {
    var mode;
    mode = this.mode === 'horizontal' ? event.wheel < 0 : event.wheel > 0;
    this.setStep(this.step + (mode ? -1 : 1) * this.stepSize);
    event.stop();
  };

  Slider.prototype.draggedKnob = function() {
    var dir, position;
    dir = this.range < 0 ? -1 : 1;
    position = this.drag.value.now[this.axis];
    position = position.limit(-this.offset, this.full - this.offset);
    this.step = (this.min + dir * this.toStep(position)).round(this.modulus.decimalLength);
    this.checkStep();
    this.emit('move');
  };

  Slider.prototype.checkStep = function() {
    var step;
    step = this.step;
    if (this.previousChange !== step) {
      this.previousChange = step;
      this.emit('change', step);
    }
    return this;
  };

  Slider.prototype.end = function() {
    var step;
    step = this.step;
    if (this.previousEnd !== step) {
      this.previousEnd = step;
      this.emit('complete', step + '');
    }
    return this;
  };

  Slider.prototype.toStep = function(position) {
    var step;
    step = (position + this.offset) * this.stepSize / this.full * this.steps;
    if (this.steps) {
      return (step - (step * this.modulus.multiplier % this.stepSize * this.modulus.multiplier / this.modulus.multiplier)).round(this.modulus.decimalLength);
    } else {
      return step;
    }
  };

  Slider.prototype.toPosition = function(step) {
    return this.full * Math.abs(this.min - step) / this.steps * this.stepSize - this.offset || 0;
  };

  return Slider;

})(Miwo.Object);

module.exports = Slider;


},{"./Drag":12}],14:[function(require,module,exports){
module.exports = {
  Drag: require('./Drag'),
  Slider: require('./Slider')
};


},{"./Drag":12,"./Slider":13}],15:[function(require,module,exports){
var DropdownDivider,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

DropdownDivider = (function(_super) {
  __extends(DropdownDivider, _super);

  function DropdownDivider() {
    return DropdownDivider.__super__.constructor.apply(this, arguments);
  }

  DropdownDivider.prototype.xtype = "dropdowndivider";

  DropdownDivider.prototype.el = 'li';

  DropdownDivider.prototype.baseCls = 'dropdown-divider';

  DropdownDivider.prototype.componentCls = 'divider';

  return DropdownDivider;

})(Miwo.Component);

module.exports = DropdownDivider;


},{}],16:[function(require,module,exports){
var DropdownManager,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

DropdownManager = (function(_super) {
  __extends(DropdownManager, _super);

  DropdownManager.prototype.active = null;

  function DropdownManager() {
    DropdownManager.__super__.constructor.apply(this, arguments);
    document.on('mousedown', this.bound('onBodyClick'));
    document.on('keyup', this.bound('onBodyKeyup'));
    return;
  }

  DropdownManager.prototype.register = function(component) {
    this.mon(component, 'show', 'onShow');
    this.mon(component, 'hide', 'onHide');
  };

  DropdownManager.prototype.unregister = function(component) {
    this.mun(component, 'show', 'onShow');
    this.mun(component, 'hide', 'onHide');
  };

  DropdownManager.prototype.onShow = function(component) {
    if (this.active) {
      this.active.hide();
    }
    this.active = component;
  };

  DropdownManager.prototype.onHide = function(component) {
    this.active = null;
  };

  DropdownManager.prototype.onBodyClick = function(e) {
    if (this.active && this.isOutClick(e.target, this.active)) {
      this.active.hide();
    }
  };

  DropdownManager.prototype.onBodyKeyup = function(e) {
    if (this.active && e.key === 'esc') {
      e.stop();
      this.active.hide();
    }
  };

  DropdownManager.prototype.isOutClick = function(target, active) {
    var parent;
    parent = target;
    while (parent = parent.getParent()) {
      if (parent === active.el || parent === active.target) {
        return false;
      }
    }
    return true;
  };

  return DropdownManager;

})(Miwo.Object);

module.exports = DropdownManager;


},{}],17:[function(require,module,exports){
var DropdownItem,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

DropdownItem = (function(_super) {
  __extends(DropdownItem, _super);

  function DropdownItem() {
    return DropdownItem.__super__.constructor.apply(this, arguments);
  }

  DropdownItem.prototype.xtype = "dropdownitem";

  DropdownItem.prototype.el = 'li';

  DropdownItem.prototype.baseCls = 'dropdown-menuitem';

  DropdownItem.prototype.text = "";

  DropdownItem.prototype.disabled = false;

  DropdownItem.prototype.handler = null;

  DropdownItem.prototype.linkEl = null;

  DropdownItem.prototype.role = 'presentation';

  DropdownItem.prototype.setText = function(text) {
    this.text = text;
    if (this.linkEl) {
      this.linkEl.set("html", text);
    }
  };

  DropdownItem.prototype.setHandler = function(handler) {
    this.handler = handler;
  };

  DropdownItem.prototype.doRender = function() {
    this.linkEl = new Element("a", {
      href: '#click',
      role: 'menuitem',
      html: this.text,
      parent: this.el
    });
    this.mon(this.linkEl, 'click', 'onClick');
  };

  DropdownItem.prototype.onClick = function(e) {
    e.stop();
    if (this.disabled) {
      return;
    }
    this.container.hide();
    this.emit('click', this, e);
    this.click(e);
  };

  DropdownItem.prototype.click = function(e) {
    if (Type.isFunction(this.handler)) {
      this.handler(this, e);
    } else if (Type.isString(this.handler)) {
      if (this.handler.indexOf('#') === 0) {
        document.location.hash = this.handler;
      } else {
        document.location = this.handler;
      }
    }
  };

  return DropdownItem;

})(Miwo.Component);

module.exports = DropdownItem;


},{}],18:[function(require,module,exports){
var Divider, DropdownList, Item,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Item = require('./Item');

Divider = require('./Divider');

DropdownList = (function(_super) {
  __extends(DropdownList, _super);

  function DropdownList() {
    return DropdownList.__super__.constructor.apply(this, arguments);
  }

  DropdownList.prototype.xtype = "dropdownlist";

  DropdownList.prototype.el = "ul";

  DropdownList.prototype.baseCls = "dropdown-menu";

  DropdownList.prototype.target = null;

  DropdownList.prototype.visible = false;

  DropdownList.prototype.role = 'menu';

  DropdownList.prototype.zIndexManage = true;

  DropdownList.prototype.afterInit = function() {
    DropdownList.__super__.afterInit.apply(this, arguments);
    miwo.dropdownMgr.register(this);
    this.renderTo = miwo.body;
  };

  DropdownList.prototype.addItem = function(name, config) {
    return this.add(name, new Item(config));
  };

  DropdownList.prototype.addDivider = function() {
    return this.add(new Divider());
  };

  DropdownList.prototype.doShow = function() {
    var pos;
    DropdownList.__super__.doShow.apply(this, arguments);
    pos = this.target.getPosition();
    pos.y += this.target.getSize().y - 3;
    this.setPosition(pos);
    this.toFront();
  };

  DropdownList.prototype.toggle = function() {
    if (this.visible) {
      this.hide();
    } else {
      this.show();
    }
  };

  DropdownList.prototype.doHide = function() {
    DropdownList.__super__.doHide.apply(this, arguments);
    this.resetRendered(true);
    this.toBack();
  };

  DropdownList.prototype.doDestroy = function() {
    miwo.dropdownMgr.unregister(this);
    return DropdownList.__super__.doDestroy.apply(this, arguments);
  };

  return DropdownList;

})(Miwo.Container);

module.exports = DropdownList;


},{"./Divider":15,"./Item":17}],19:[function(require,module,exports){
module.exports = {
  Divider: require('./Divider'),
  Item: require('./Item'),
  List: require('./List')
};


},{"./Divider":15,"./Item":17,"./List":18}],20:[function(require,module,exports){
var Condition, Rule, Rules, Validators,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Validators = require('./Validators');

Rule = (function() {
  Rule.prototype.isRule = true;

  Rule.prototype.rules = null;

  Rule.prototype.control = null;

  Rule.prototype.name = null;

  Rule.prototype.operation = null;

  Rule.prototype.isNegative = false;

  Rule.prototype.param = null;

  Rule.prototype.message = null;

  function Rule(rules, config) {
    var n, v;
    this.rules = rules;
    if (config == null) {
      config = {};
    }
    this.control = this.rules.control;
    for (n in config) {
      v = config[n];
      this[n] = v;
    }
    if (!this.message) {
      if (Type.isString(this.operation)) {
        this.message = miwo.tr("miwo.rules." + this.operation) || "Error";
      } else {
        this.message = "";
      }
    }
    if (Type.isString(this.operation)) {
      if (this.operation[0] === "!") {
        this.isNegative = true;
        this.operation = this.operation.replace("!", "");
      }
      this.name = this.operation;
      if (!Validators[this.operation]) {
        throw new Error("Undefined validator '" + this.operation + "' for control '" + this.control.name + "'");
      }
      this.operation = (function(_this) {
        return function(control, param) {
          return Validators[_this.name](control, param);
        };
      })(this);
    } else {
      this.name = "callback";
    }
    if (!Type.isFucntion(this.operation)) {
      throw new Error("Unknown operation '" + this.operation + "' for control '" + this.control.name + "'");
    }
    return;
  }

  Rule.prototype.validate = function() {
    var result;
    if (!this.control.required && !this.control.isFilled()) {
      return true;
    }
    result = this.operation(this.control, this.param);
    return (this.isNegative ? !result : result);
  };

  Rule.prototype.getControl = function() {
    return this.control;
  };

  return Rule;

})();

Condition = (function(_super) {
  __extends(Condition, _super);

  Condition.prototype.isCondition = true;

  Condition.prototype.subRules = null;

  function Condition(rules, config) {
    Condition.__super__.constructor.call(this, rules, config);
    this.subRules = new Rules(this.control, rules);
    return;
  }

  return Condition;

})(Rule);

Rules = (function() {
  Rules.formatMessage = function(rule) {
    var i, message, params, value, _i, _len, _ref;
    message = rule.message;
    message = message.replace("%name", rule.control.getName());
    message = message.replace("%label", rule.control.label);
    message = message.replace("%value", rule.control.getValue());
    params = {
      param: rule.param
    };
    if (Type.isArray(rule.param)) {
      _ref = rule.param;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        value = _ref[i];
        params['param' + i] = value;
      }
    }
    message = message.substitute(params);
    return message;
  };

  Rules.prototype.parent = null;

  Rules.prototype.control = null;

  Rules.prototype.rules = null;

  Rules.prototype.condition = null;

  function Rules(control, parent) {
    this.parent = parent;
    this.control = control;
    this.rules = [];
  }

  Rules.prototype.setRules = function(rules) {
    this.rules = [];
    this.addRules(rules);
  };

  Rules.prototype.addRules = function(rules) {
    var elseRules, rule, subRules, _i, _len;
    for (_i = 0, _len = rules.length; _i < _len; _i++) {
      rule = rules[_i];
      if (rule.type === "condition") {
        subRules = this.addConditionOn(rule.conditionOn || this, rule.operation, rule.param);
        if (rule.rules) {
          subRules.setRules(rule.rules);
        }
        if (rule.elseRules) {
          elseRules = this.elseCondition();
          elseRules.setRules(rule.elseRules);
        }
      } else {
        this.addRule(rule.operation, rule.message, rule.param);
      }
    }
  };

  Rules.prototype.addRule = function(operation, message, param) {
    var rule;
    rule = new Rule(this, {
      operation: operation,
      message: message,
      param: param
    });
    this.rules.push(rule);
    return this;
  };

  Rules.prototype.hasRule = function(name) {
    return !!this.rules.some(function(rule) {
      return rule.name === name;
    });
  };

  Rules.prototype.addCondition = function(operation, param) {
    return this.addConditionOn(this.control, operation, param);
  };

  Rules.prototype.addConditionOn = function(control, operation, param) {
    var rule;
    rule = new Condition(this, {
      operation: operation,
      param: param
    });
    this.condition = rule;
    this.rules.push(rule);
    return rule.subRules;
  };

  Rules.prototype.elseCondition = function() {
    var rule;
    rule = new Condition(this, {
      operation: this.condition.operation,
      isNegative: !this.condition.isNegative,
      param: this.condition.param
    });
    this.rules.push(rule);
    return rule.subRules;
  };

  Rules.prototype.endCondition = function() {
    return this.parent;
  };

  Rules.prototype.validate = function() {
    var errors, rule, success, _i, _len, _ref;
    errors = [];
    _ref = this.rules;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      rule = _ref[_i];
      if (rule.getControl().isDisabled()) {
        continue;
      }
      success = rule.validate();
      if (rule.isCondition && success) {
        errors.append(rule.subRules.validate());
      } else if (rule.isRule && !success) {
        errors.push(Rules.formatMessage(rule));
      }
    }
    return errors;
  };

  return Rules;

})();

module.exports = Rules;


},{"./Validators":21}],21:[function(require,module,exports){
var Validators;

Validators = {
  emailRe: /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
  urlRe: /^(ftp|http|https)?:\/\/[A-Za-z0-9\.-]{1,}\.[A-Za-z]{2}/,
  intRe: /^\d+$/,
  colorRe: /^\#[a-z0-9A-Z]{6}/,
  dateRe: /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/,
  numberRe: /^-{0,1}\d*\.{0,1}\d+$/,
  registerValidator: function(name, validator) {
    this[name] = validator;
  },
  equal: function(control, arg) {
    if (Type.isString(arg)) {
      arg = control.getForm().getField(arg);
    }
    return control.getStringValue() === arg.getStringValue();
  },
  filled: function(control) {
    return control.isFilled();
  },
  valid: function(control) {
    return control.rules.validate(true);
  },
  minLength: function(control, length) {
    return control.getStringValue().length >= length;
  },
  maxLength: function(control, length) {
    return control.getStringValue().length <= length;
  },
  length: function(control, range) {
    var len;
    if (!Type.isArray(range)) {
      range = [range, range];
    }
    len = control.getStringValue().length;
    return len >= range[0] && len <= range[1];
  },
  date: function(control) {
    return this.dateRe.test(control.getStringValue());
  },
  email: function(control) {
    return this.emailRe.test(control.getStringValue());
  },
  url: function(control) {
    return this.urlRe.test(control.getStringValue());
  },
  pattern: function(control, pattern) {
    return pattern.test(control.getStringValue());
  },
  number: function(control) {
    return this.numberRe.test(control.getStringValue());
  },
  integer: function(control) {
    return this.intRe.test(control.getStringValue());
  },
  float: function(control) {
    return this.numberRe.test(control.getStringValue());
  },
  range: function(control, range) {
    if (!Type.isArray(range)) {
      range = [range, range];
    }
    return control.getValue() >= range[0] && control.getValue() <= range[1];
  },
  min: function(control, length) {
    return control.getValue() >= length;
  },
  max: function(control, length) {
    return control.getValue() <= length;
  },
  color: function(control) {
    return this.colorRe.test(control.getStringValue());
  }
};

module.exports = Validators;


},{}],22:[function(require,module,exports){
var BaseContainer,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseContainer = (function(_super) {
  __extends(BaseContainer, _super);

  function BaseContainer() {
    return BaseContainer.__super__.constructor.apply(this, arguments);
  }

  BaseContainer.prototype.form = null;

  BaseContainer.prototype.notifyErrors = true;

  BaseContainer.prototype.isFormContainer = true;

  BaseContainer.prototype.disabled = false;

  BaseContainer.prototype.readonly = false;

  BaseContainer.prototype.wasDirty = false;

  BaseContainer.prototype.wasValid = true;

  BaseContainer.prototype.controls = null;

  BaseContainer.prototype.layout = 'form';

  BaseContainer.registerControl = function(controlName, fn) {
    var addMethod;
    if (!fn) {
      throw new Error("Error in registry control " + controlName + ", constructor is undefined");
    }
    addMethod = 'add' + controlName.capitalize();
    this.prototype[addMethod] = function(name, config) {
      if (config == null) {
        config = {};
      }
      return this.add(name, new fn(config));
    };
  };

  BaseContainer.prototype.beforeInit = function() {
    BaseContainer.__super__.beforeInit.call(this);
    this.controls = [];
  };

  BaseContainer.prototype.addedComponent = function(component) {
    BaseContainer.__super__.addedComponent.call(this, component);
    if (component.isFormControl) {
      component.form = this.form;
      this.controls.push(component);
      this.mon(component, 'validitychange', 'checkValidity');
      this.mon(component, 'dirtychange', 'checkDirty');
      this.mon(component, 'focus', 'onInputFieldFocus');
    } else if (component.isFormContainer) {
      component.form = this.form;
      this.mon(component, 'inputfocus', 'onInputFieldFocus');
    }
    if (this.disabled) {
      component.setDisabled(this.disabled);
    }
    if (this.readonly) {
      component.setReadonly(this.readonly);
    }
  };

  BaseContainer.prototype.removedComponent = function(component) {
    BaseContainer.__super__.removedComponent.call(this, component);
    if (component.isFormControl) {
      component.form = null;
      this.controls.erase(component);
      this.mun(component);
    } else if (component.isFormContainer) {
      component.form = null;
      this.mun(component);
    }
  };

  BaseContainer.prototype.setDisabled = function(disabled) {
    this.disabled = disabled;
    this.getComponents().each(function(component) {
      if (component.setDisabled) {
        component.setDisabled(disabled);
      }
    });
  };

  BaseContainer.prototype.setReadonly = function(readonly) {
    this.readonly = readonly;
    this.getComponents().each(function(component) {
      if (component.setReadonly) {
        component.setReadonly(readonly);
      }
    });
  };

  BaseContainer.prototype.getControls = function() {
    return this.controls;
  };

  BaseContainer.prototype.getControl = function(name) {
    var control, _i, _len, _ref;
    _ref = this.controls;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      control = _ref[_i];
      if (control.name === name) {
        return control;
      }
    }
    throw new Error("Control " + name + " not found");
  };

  BaseContainer.prototype.getFocusControl = function() {
    var control, _i, _len, _ref;
    _ref = this.controls;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      control = _ref[_i];
      if (!control.disabled) {
        return control;
      }
    }
    return null;
  };

  BaseContainer.prototype.onInputFieldFocus = function(form, input) {
    this.emit("inputfocus", this, input || form);
  };

  BaseContainer.prototype.getValues = function(dirtyOnly, submittable) {
    var control, values, _i, _len, _ref;
    values = {};
    _ref = this.controls;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      control = _ref[_i];
      if ((!submittable || control.submitValue) && !control.disabled) {
        if (!dirtyOnly || control.isDirty()) {
          values[control.getName()] = control.getValue();
        }
      }
    }
    return values;
  };

  BaseContainer.prototype.getRawValues = function(dirtyOnly, submittable) {
    var control, values, _i, _len, _ref;
    values = {};
    _ref = this.controls;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      control = _ref[_i];
      if ((!submittable || control.submitValue) && !control.disabled) {
        if (!dirtyOnly || control.isDirty()) {
          values[control.getName()] = control.getRawValue();
        }
      }
    }
    return values;
  };

  BaseContainer.prototype.getOriginalValues = function() {
    var control, values, _i, _len, _ref;
    values = {};
    _ref = this.controls;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      control = _ref[_i];
      values[control.getName()] = control.getRawValue();
    }
    return values;
  };

  BaseContainer.prototype.getErrors = function() {
    var control, errors, _i, _len, _ref;
    errors = [];
    _ref = this.controls;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      control = _ref[_i];
      errors.append(control.getErrors());
    }
    return errors;
  };

  BaseContainer.prototype.setValues = function(values, erase, setOriginals) {
    var control, name, _i, _len, _ref;
    _ref = this.controls;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      control = _ref[_i];
      name = control.getName();
      if (values.hasOwnProperty(name)) {
        control.setValue(values[name]);
        if (setOriginals) {
          control.setOriginalValue(values[name]);
        }
      } else if (erase) {
        control.setValue(null);
        if (setOriginals) {
          control.setOriginalValue(null);
        }
      }
    }
  };

  BaseContainer.prototype.setOriginals = function(values, erase) {
    var control, name, _i, _len, _ref;
    if (!values) {
      values = this.getValues();
    }
    _ref = this.controls;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      control = _ref[_i];
      name = control.getName();
      if (values.hasOwnProperty(name)) {
        control.setOriginalValue(values[name]);
      } else if (erase) {
        control.setOriginalValue(null);
      }
    }
  };

  BaseContainer.prototype.resetOriginals = function() {
    var control, _i, _len, _ref;
    _ref = this.controls;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      control = _ref[_i];
      control.resetOriginalValue();
    }
  };

  BaseContainer.prototype.setDefaults = function(values, onlySet) {
    var control, name, _i, _len, _ref;
    _ref = this.controls;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      control = _ref[_i];
      name = control.getName();
      if (values) {
        if (values.hasOwnProperty(name)) {
          control.setDefaultValue(values[name]);
        } else if (!onlySet) {
          control.setDefaultValue();
        }
      } else {
        control.setDefaultValue();
      }
    }
  };

  BaseContainer.prototype.reset = function(resetOriginalValues) {
    var control, _i, _len, _ref;
    if (resetOriginalValues) {
      this.setOriginals({}, true);
    }
    _ref = this.controls;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      control = _ref[_i];
      control.reset();
    }
  };


  /*
     	Returns true if client-side validation on the form is successful. Any invalid controls will be
  		marked as invalid. If you only want to determine overall form validity without marking anything,
  		set param onlyCheck to True
  		@param {Boolean} [onlyCheck] True to ignore validation, only test validity state
  		@return {Boolean}
   */

  BaseContainer.prototype.isValid = function(onlyCheck) {
    var control, valid, _i, _len, _ref;
    valid = true;
    _ref = this.controls;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      control = _ref[_i];
      if (!control.validate(onlyCheck, !(this.notifyErrors && valid))) {
        valid = false;
        if (onlyCheck) {
          break;
        }
      }
    }
    return valid;
  };


  /*
     	Returns true if client-side validation on the form is successful. Any invalid controls will be
  		marked as invalid.
     	@return {Boolean}
   */

  BaseContainer.prototype.validate = function() {
    return this.isValid();
  };


  /*
     	Check whether the validity of the entire form has changed since it was last checked, and
  		if so fire the {@link #validitychange validitychange} event. This is automatically invoked
  		when an individual control's validity changes.
   */

  BaseContainer.prototype.checkValidity = function() {
    var valid;
    valid = this.isValid(true);
    if (valid !== this.wasValid) {
      this.emit("validitychange", this, valid);
      this.wasValid = valid;
    }
  };


  /*
     	Check whether the dirty state of the entire form has changed since it was last checked, and
  		if so fire the {@link #dirtychange dirtychange} event. This is automatically invoked
  		when an individual control's `dirty` state changes.
   */

  BaseContainer.prototype.checkDirty = function() {
    var dirty;
    dirty = this.isDirty();
    if (dirty !== this.wasDirty) {
      this.emit("dirtychange", this, dirty);
      this.wasDirty = dirty;
    }
  };


  /*
  		Returns `true` if any controls in this form have changed from their original values.
  		@return {Boolean}
   */

  BaseContainer.prototype.isDirty = function() {
    var control, _i, _len, _ref;
    _ref = this.controls;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      control = _ref[_i];
      if (control.isDirty()) {
        return true;
      }
    }
    return false;
  };

  return BaseContainer;

})(Miwo.Container);

module.exports = BaseContainer;


},{}],23:[function(require,module,exports){
var BaseContainer, Fieldset,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseContainer = require('./BaseContainer');

Fieldset = (function(_super) {
  __extends(Fieldset, _super);

  function Fieldset() {
    return Fieldset.__super__.constructor.apply(this, arguments);
  }

  Fieldset.prototype.legend = '';

  Fieldset.prototype.beforeInit = function() {
    Fieldset.__super__.beforeInit.apply(this, arguments);
    this.xtype = 'fieldset';
    this.element = 'fieldset';
  };

  Fieldset.prototype.beforeRender = function() {
    Fieldset.__super__.beforeRender.apply(this, arguments);
    this.legendEl = new Element('legend', {
      parent: this.el,
      html: this.legend
    });
    this.contentEl = new Element('div', {
      parent: this.el,
      cls: 'fieldset-content'
    });
  };

  return Fieldset;

})(BaseContainer);

BaseContainer.registerControl('fieldset', Fieldset);

module.exports = Fieldset;


},{"./BaseContainer":22}],24:[function(require,module,exports){
var BaseContainer, Form,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseContainer = require('./BaseContainer');

Form = (function(_super) {
  __extends(Form, _super);

  function Form() {
    return Form.__super__.constructor.apply(this, arguments);
  }

  Form.prototype.xtype = 'form';

  Form.prototype.el = 'form';

  Form.prototype.buttonsEl = null;

  Form.prototype.record = null;

  Form.prototype.submitBtn = null;

  Form.prototype.renderer = null;

  Form.prototype.rendererType = 'default';

  Form.prototype.rendererOptions = null;

  Form.prototype.preventAutoLogin = false;

  Form.prototype.beforeInit = function() {
    Form.__super__.beforeInit.call(this);
    this.form = this;
  };

  Form.prototype.afterInit = function() {
    Form.__super__.afterInit.call(this);
    this.keyListener = new Miwo.utils.KeyListener(this.el, 'keydown');
    this.keyListener.on('enter', (function(_this) {
      return function(e) {
        if (e.target.tagName !== 'TEXTAREA') {
          _this.submit();
          return true;
        }
        return false;
      };
    })(this));
  };

  Form.prototype.reset = function(btn, silent) {
    Form.__super__.reset.call(this);
    if (!silent) {
      this.emit('reset', this, btn);
    }
  };

  Form.prototype.addedComponentDeep = function(component) {
    Form.__super__.addedComponentDeep.call(this, component);
    if (component.isFormControl || component.isFormContainer) {
      component.form = this.form;
    }
    if (component.isSubmitButton) {
      this.mon(component, 'click', 'onSubmitButtonClick');
    } else if (component.isResetButton) {
      this.mon(component, 'click', 'onResetButtonClick');
    }
  };

  Form.prototype.removedComponentDeep = function(component) {
    Form.__super__.removedComponentDeep.call(this, component);
    if (component.isFormControl || component.isFormContainer) {
      component.form = null;
    }
    if (component.isSubmitButton) {
      this.mun(component);
    } else if (component.isResetButton) {
      this.mun(component);
    }
  };

  Form.prototype.onSubmitButtonClick = function(btn) {
    this.submit(btn);
  };

  Form.prototype.onResetButtonClick = function(btn) {
    this.reset(btn);
  };

  Form.prototype.loadRecord = function(record) {
    var values;
    if (!record) {
      throw new Error("Undefined record");
    }
    this.record = record;
    values = record.getValues();
    this.setOriginals(values);
    this.setValues(values);
    this.reset(null, true);
  };

  Form.prototype.unloadRecord = function() {
    this.record = null;
    this.setOriginals({}, true);
    this.setValues({});
    this.reset(null, true);
  };

  Form.prototype.updateRecord = function(record) {
    var name, values;
    record = record || this.record;
    if (!record) {
      throw new Error("Undefined record. First you must call 'loadRecord' or pass record in this method");
    }
    values = this.getValues(true, true);
    for (name in record.fields) {
      if (values.hasOwnProperty(name)) {
        record.set(name, values[name]);
      }
    }
    return record;
  };

  Form.prototype.editRecord = function(record) {
    record = record || this.record;
    if (!record) {
      throw new Error("Undefined record. First you must call 'loadRecord' or pass record in this method");
    }
    record.beginEdit();
    this.updateRecord(record);
    record.endEdit();
    return record;
  };

  Form.prototype.submit = function(btn) {
    var isValid;
    this.submitBtn = btn;
    isValid = this.validate();
    this.onSubmit();
    this.emit('submit', this, isValid);
    if (isValid) {
      this.onSuccess();
      this.emit('success', this);
    } else {
      this.onFailure();
      this.emit('failure', this);
    }
  };

  Form.prototype.onSuccess = function() {};

  Form.prototype.onFailure = function() {};

  Form.prototype.onSubmit = function() {};

  Form.prototype.renderContainer = function() {
    var buttons, contentEl, control, controls, el, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4;
    Form.__super__.renderContainer.call(this);
    contentEl = this.getContentEl();
    this.getRenderer().renderForm(this);
    _ref = this.getElements("[miwo-label]");
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      el = _ref[_i];
      control = this.get(el.getAttribute("miwo-label"), true);
      control.labelEl = el;
      control.labelRendered = true;
    }
    _ref1 = this.getElements("[miwo-group]");
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      el = _ref1[_j];
      control = this.get(el.getAttribute("miwo-group"), true);
      control.groupEl = el;
      control.el = el;
      control.parentEl = contentEl;
    }
    _ref2 = this.getElements("[miwo-controls]");
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      el = _ref2[_k];
      control = this.get(el.getAttribute("miwo-controls"), true);
      control.controlsEl = el;
      control.labelRendered = true;
      this.detectControlGroupEl(control, el, contentEl);
    }
    _ref3 = this.getElements("[miwo-control]");
    for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
      el = _ref3[_l];
      control = this.get(el.getAttribute("miwo-control"), true);
      control.controlEl = el;
      control.controlsRendered = true;
      this.detectControlGroupEl(control, el, contentEl);
    }
    _ref4 = this.getElements("[miwo-input]");
    for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
      el = _ref4[_m];
      control = this.get(el.getAttribute("miwo-input"), true);
      control.inputEl = el;
      control.controlsRendered = true;
      control.controlRendered = true;
      this.detectControlGroupEl(control, el, contentEl);
    }
    controls = this.findComponents(false, {
      isFormControl: true,
      isFormContainer: true
    });
    for (_n = 0, _len5 = controls.length; _n < _len5; _n++) {
      control = controls[_n];
      if (control.isFormControl) {
        this.getRenderer().renderGroup(control, contentEl);
        control.groupEl.set('miwo-name', control.name);
        control.afterRender();
        control.rendered = true;
      } else {
        control.render(contentEl);
      }
    }
    buttons = this.findComponents(false, {
      isButton: true
    });
    if (buttons.length > 0) {
      this.getRenderer().renderButtons(buttons, this.getButtonsEl());
    }
  };

  Form.prototype.detectControlGroupEl = function(control, el, contentEl) {
    var controlEl;
    if ((controlEl = el.getParent('.form-group'))) {
      control.el = controlEl;
      control.parentEl = contentEl;
      if (!control.groupEl) {
        control.groupEl = controlEl;
      }
    }
  };

  Form.prototype.getButtonsEl = function() {
    var ct;
    if (!this.buttonsEl) {
      ct = new Element('div', {
        parent: this.getContentEl(),
        cls: 'form-group'
      });
      this.buttonsEl = new Element('div', {
        parent: ct
      });
      this.buttonsEl.generated = true;
    }
    return this.buttonsEl;
  };

  Form.prototype.getRenderer = function() {
    if (!this.renderer) {
      this.renderer = miwo.service('formRendererFactory').create(this.rendererType, this.rendererOptions);
    }
    return this.renderer;
  };

  Form.prototype.doDestroy = function() {
    this.keyListener.destroy();
    return Form.__super__.doDestroy.call(this);
  };

  return Form;

})(BaseContainer);

module.exports = Form;


},{"./BaseContainer":22}],25:[function(require,module,exports){
var BaseControl, Button, Rules,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Button = require('../../buttons/Button');

Rules = require('../Rules');

BaseControl = (function(_super) {
  __extends(BaseControl, _super);

  function BaseControl() {
    return BaseControl.__super__.constructor.apply(this, arguments);
  }

  BaseControl.prototype.xtype = 'control';

  BaseControl.prototype.isFormControl = true;

  BaseControl.prototype.label = null;

  BaseControl.prototype.value = null;

  BaseControl.prototype.defaultValue = void 0;

  BaseControl.prototype.required = false;

  BaseControl.prototype.prepend = null;

  BaseControl.prototype.append = null;

  BaseControl.prototype.tip = null;

  BaseControl.prototype.help = null;

  BaseControl.prototype.desc = null;

  BaseControl.prototype.controlCls = null;

  BaseControl.prototype.inputTag = "input";

  BaseControl.prototype.inputName = null;

  BaseControl.prototype.inputCls = null;

  BaseControl.prototype.inputWidth = null;

  BaseControl.prototype.attributes = null;

  BaseControl.prototype.disabled = false;

  BaseControl.prototype.omitted = false;

  BaseControl.prototype.validateOnChange = true;

  BaseControl.prototype.buttons = null;

  BaseControl.prototype.rules = null;

  BaseControl.prototype.form = null;

  BaseControl.prototype.labelEl = null;

  BaseControl.prototype.labelTextEl = null;

  BaseControl.prototype.input = null;

  BaseControl.prototype.controlsEl = null;

  BaseControl.prototype.descEl = null;

  BaseControl.prototype.tipEl = null;

  BaseControl.prototype.helpEl = null;

  BaseControl.prototype.preventRenderControl = false;

  BaseControl.prototype.suspendCheckChange = true;

  BaseControl.prototype.originalValue = void 0;

  BaseControl.prototype.lastValue = void 0;

  BaseControl.prototype.wasDirty = false;

  BaseControl.prototype.wasValid = true;

  BaseControl.prototype.submitValue = true;

  BaseControl.prototype.afterInit = function() {
    var button, items, rules, _i, _len;
    BaseControl.__super__.afterInit.call(this);
    this.errors = [];
    this.defaultValue = this.originalValue = this.lastValue = this.value;
    if (!Type.isInstance(this.rules)) {
      rules = Array.from(this.rules);
      this.rules = new Rules(this);
      this.initRules();
      this.rules.addRules(rules);
    }
    if (this.width) {
      this.inputWidth = this.width;
      this.width = null;
    }
    items = this.buttons;
    this.buttons = new Miwo.utils.Collection();
    if (items) {
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        button = items[_i];
        this.addButton(button.name, button);
      }
    }
  };

  BaseControl.prototype.initRules = function() {
    if (this.required) {
      this.rules.addRule("filled");
    }
  };


  /*
  		Returns the current data value of the field. The type of value returned
  		is particular to the type of the particular field
  		@return {Object} value The field value
   */

  BaseControl.prototype.getValue = function() {
    return this.value;
  };


  /*
  		Returns the current data value of the fields input.
  		@return {Object} The fields input value
   */

  BaseControl.prototype.getRawValue = function() {
    return (this.input ? this.input.getValue() : void 0);
  };

  BaseControl.prototype.getStringValue = function() {
    var val;
    val = this.getValue();
    return (val !== null && val !== undefined ? val.toString() : "");
  };


  /*
  		Sets a data value into the field and runs the change detection and validation.
  		@param {Object} value The value to set
   */

  BaseControl.prototype.setValue = function(value) {
    this.value = value;
    this.checkChange();
    return this;
  };

  BaseControl.prototype.setOriginalValue = function(value) {
    this.originalValue = value;
    this.checkDirty();
    return this;
  };

  BaseControl.prototype.setDefaultValue = function(value) {
    if (value) {
      this.defaultValue = value;
    }
    this.setValue(this.defaultValue);
    return this;
  };

  BaseControl.prototype.setFocus = function() {
    BaseControl.__super__.setFocus.call(this);
    this.emit("focus", this);
    return this;
  };

  BaseControl.prototype.isDisabled = function() {
    return this.disabled;
  };

  BaseControl.prototype.setDisabled = function(disabled) {
    this.disabled = disabled;
    this.input.setDisabled(this.disabled);
    return this;
  };

  BaseControl.prototype.isFilled = function() {
    return this.getStringValue() !== "";
  };


  /*
  		Returns whether two field {@link #getValue values} are logically equal. Field implementations may override this
  		to provide custom comparison logic appropriate for the particular field's data type.
  		@param {Object} value1 The first value to compare
  		@param {Object} value2 The second value to compare
  		@return {Boolean} True if the values are equal, false if not equal.
   */

  BaseControl.prototype.isEqual = function(value1, value2) {
    return value1 === value2;
  };


  /*
  		Returns the parameter(s) that would be included in a standard form submit for this field. Typically this will be
  		an object with a single name-value pair, the name being this field's {@link #getName name} and the value being
  		its current stringified value. More advanced field implementations may return more than one name-value pair.
  
  		Note that the values returned from this method are not guaranteed to have been successfully {@link #validate
  		validated}.
  
  		@param {Boolean} submittable Only submittable values
  		@return {Object} A mapping of submit parameter names to values; each value should be a string, or an array of
  		strings if that particular name has multiple values. It can also return null if there are no parameters to be
  		submitted.
   */

  BaseControl.prototype.getData = function(submittable) {
    var data;
    data = null;
    if (!this.disabled && (!submittable || !this.omitted) && !this.isFileUpload) {
      data = {};
      data[this.getName()] = "" + this.getValue();
    }
    return data;
  };


  /*
  		Resets the current field value to the originally loaded value and clears any validation messages.
   */

  BaseControl.prototype.reset = function() {
    this.beforeReset();
    this.setValue(this.originalValue);
    this.clearInvalid();
  };

  BaseControl.prototype.beforeReset = function() {};

  BaseControl.prototype.clearInvalid = function() {
    delete this.wasValid;
    this.notifyErrors = false;
    this.wasInputFocused = false;
    this.clearErrors();
    return this;
  };


  /*
  		Resets the field's {@link #originalValue} property so it matches the current {@link #getValue value}.
   */

  BaseControl.prototype.resetOriginalValue = function() {
    this.originalValue = this.getValue();
    this.checkDirty();
    return this;
  };


  /*
  		Checks whether the value of the field has changed since the last time it was checked.
  		If the value has changed, it:
  		1. Fires the {@link #change change event},
  		2. Performs validation if the {@link #validateOnChange} config is enabled, firing the validitychange event if the validity has changed, and
  		3. Checks the {@link #isDirty dirty state} of the field and fires the dirtychange event if it has changed.
   */

  BaseControl.prototype.checkChange = function() {
    var newVal, oldVal;
    if (this.suspendCheckChange) {
      return;
    }
    newVal = this.getValue();
    oldVal = this.lastValue;
    if (!this.isEqual(newVal, oldVal) && !this.isDestroyed) {
      this.lastValue = newVal;
      this.emit("change", this, newVal, oldVal);
      this.onChange(newVal, oldVal);
    }
  };


  /*
  		@private
  		Called when the field's value changes. Performs validation if the {@link #validateOnChange}
  		config is enabled, and invokes the dirty check.
   */

  BaseControl.prototype.onChange = function(newVal, oldVal) {
    if (this.validateOnChange) {
      this.validate();
    }
    this.checkDirty();
  };


  /*
  		Returns true if the value of this Field has been changed from its {@link #originalValue}.
  		Will always return false if the field is disabled.
   */

  BaseControl.prototype.isDirty = function() {
    return !this.disabled && !this.isEqual(this.getValue(), this.originalValue);
  };


  /*
  		Checks the isDirty state of the field and if it has changed since the last time it was checked,
  		fires the dirtychange event.
   */

  BaseControl.prototype.checkDirty = function() {
    var isDirty;
    isDirty = this.isDirty();
    if (isDirty !== this.wasDirty) {
      this.emit("dirtychange", this, isDirty);
      this.onDirtyChange(isDirty);
      this.wasDirty = isDirty;
    }
  };


  /*
  		@private
  		Called when the field's dirty state changes.
  		@param {Boolean} isDirty
   */

  BaseControl.prototype.onDirtyChange = function(isDirty) {};

  BaseControl.prototype.getRules = function() {
    return this.rules;
  };


  /*
  		Returns first error
   */

  BaseControl.prototype.getError = function() {
    return this.errors[0];
  };

  BaseControl.prototype.getErrors = function() {
    return this.errors;
  };

  BaseControl.prototype.hasErrors = function() {
    return this.errors.length > 0;
  };

  BaseControl.prototype.addErrors = function(errors) {
    this.errors.append(errors);
  };

  BaseControl.prototype.setErrors = function(errors) {
    this.clearErrors();
    this.addErrors(errors);
  };

  BaseControl.prototype.clearErrors = function() {
    this.errors.empty();
  };

  BaseControl.prototype.updateErrors = function(silentErrors) {
    if (this.input) {
      this.input.el.removeClass('has-error');
      if (this.hasErrors()) {
        this.input.el.addClass('has-error');
      }
    }
    if (this.el.hasClass('form-group')) {
      this.el.removeClass('has-error');
      if (this.hasErrors()) {
        this.el.addClass('has-error');
      }
    }
    if (this.hasErrors() && !silentErrors) {
      if (!this.errorTip) {
        this.errorTip = miwo.tooltip.create(this.errorTargetEl || this.input.el, {
          type: 'danger',
          delay: 0,
          renderTo: this.el
        });
      }
      this.errorTip.setText(this.getError());
      this.errorTip.show();
    } else if (this.errorTip) {
      this.errorTip.hide();
    }
    this.emit("errors:update", this);
  };

  BaseControl.prototype.isValid = function(onlyCheck) {
    if (this.disabled) {
      return true;
    }
    if (this.wasValid === null || !onlyCheck) {
      this.setErrors(this.getRules().validate());
    }
    return !this.hasErrors();
  };


  /*
  		Returns whether or not the field value is currently valid by {@link #getErrors validating} the field's current
  		value, and fires the {@link #validitychange} event if the field's validity has changed since the last validation.
  		Note**: {@link #disabled} fields are always treated as valid.
  
  		Custom implementations of this method are allowed to have side-effects such as triggering error message display.
  		To validate without side-effects, use {@link #isValid}.
  
  		@param {Boolean} [onlyCheck] Only check valid state, don't validate control
  		@param {Boolean} [silentErrors] True if you don't want show error tip
  		@return {Boolean} True if the value is valid, else false
   */

  BaseControl.prototype.validate = function(onlyCheck, silentErrors) {
    var isValid;
    isValid = this.isValid(onlyCheck);
    this.updateErrors(silentErrors);
    if (isValid !== this.wasValid) {
      this.wasValid = isValid;
      this.emit("validitychange", this, isValid);
    }
    return isValid;
  };

  BaseControl.prototype.isRequired = function() {
    return this.rules.hasRule("filled");
  };

  BaseControl.prototype.initializeControl = function() {
    if (this.value !== null) {
      this.setValue(this.value);
    }
    this.suspendCheckChange = false;
  };

  BaseControl.prototype.getForm = function() {
    if (!this.form) {
      throw new Error("Component is not attached to Form");
    }
    return this.form;
  };

  BaseControl.prototype.setLabel = function(label) {
    this.label = label;
    if (this.labelTextEl) {
      this.labelTextEl.set('text', this.label);
    }
    return this;
  };

  BaseControl.prototype.getLabel = function() {
    return this.label;
  };

  BaseControl.prototype.getLabelEl = function() {
    if (!this.labelEl) {
      this.labelEl = new Element('label');
    }
    return this.labelEl;
  };

  BaseControl.prototype.getInput = function() {
    if (!this.input) {
      this.input = this.createInput();
      if (!this.input) {
        throw new Error("Input was not created in createInput() in class " + this);
      }
    }
    return this.input;
  };

  BaseControl.prototype.addButton = function(name, config) {
    var button;
    button = new Button(config);
    button.getControl = (function(_this) {
      return function() {
        return _this;
      };
    })(this);
    if (this.buttonsCt) {
      button.render(this.buttonsCt);
    }
    button.on('click', (function(_this) {
      return function(btn, event) {
        _this.emit('buttonclick', _this, btn, event);
      };
    })(this));
    this.buttons.set(name, button);
    return button;
  };

  BaseControl.prototype.addResetButton = function() {
    var button;
    button = this.addButton('reset', {
      disabled: true,
      icon: 'remove',
      handler: (function(_this) {
        return function() {
          return _this.reset();
        };
      })(this)
    });
    return button;
  };

  BaseControl.prototype.getButton = function(name) {
    return this.buttons.get(name);
  };

  BaseControl.prototype.createInput = function() {};

  BaseControl.prototype.doRender = function() {
    this.renderControl(this.el);
  };

  BaseControl.prototype.renderLabel = function(ct) {
    var labelEl, requiredEl;
    labelEl = this.getLabelEl();
    labelEl.inject(ct);
    this.labelTextEl = new Element('span', {
      cls: 'control-label-text',
      html: this.getLabel()
    });
    this.labelTextEl.inject(labelEl);
    if (this.isRequired()) {
      requiredEl = new Element('span', {
        cls: 'control-label-required',
        html: '*',
        'data-toggle': 'tooltip',
        'data-title': 'Required field'
      });
      requiredEl.inject(labelEl);
    }
    return labelEl;
  };

  BaseControl.prototype.renderControl = function(ct) {
    var input, span;
    input = this.getInput();
    if (input.rendered) {
      return input;
    }
    if (this.inputWidth) {
      this.el.addClass('input-fill');
      ct.setStyle('width', this.inputWidth);
    }
    if (this.controlCls) {
      ct.addClass(this.controlCls);
    }
    if (this.prepend || this.append || this.buttons.length > 0 || this.tip) {
      ct.addClass('input-group');
    } else {
      ct.addClass('input-control');
    }
    if (this.prepend) {
      span = new Element('span', {
        cls: 'input-group-addon',
        html: this.prepend
      });
      span.inject(ct);
      span.on('click', (function(_this) {
        return function(e) {
          return _this.emit('prependclick', _this, e);
        };
      })(this));
    }
    input.render(ct);
    input.setDisabled(this.disabled);
    if (this.append) {
      span = new Element('span', {
        cls: 'input-group-addon',
        html: this.append
      });
      span.inject(ct);
      span.on('click', (function(_this) {
        return function(e) {
          return _this.emit('appendclick', _this, e);
        };
      })(this));
    }
    if (this.buttons.length !== 0) {
      this.buttonsCt = new Element('div', {
        cls: 'input-group-btn'
      });
      this.buttonsCt.inject(ct);
      this.buttons.each((function(_this) {
        return function(button) {
          return button.render(_this.buttonsCt);
        };
      })(this));
    }
    if (this.tip) {
      span = new Element('span', {
        cls: 'input-group-addon input-group-addon-tooltip',
        html: '<span class="glyphicon glyphicon-question-sign" data-title="' + this.tip + '" data-toggle="tooltip"></span>'
      });
      span.inject(ct);
      ct.addClass('input-tooltip');
    }
    return input;
  };

  BaseControl.prototype.afterRender = function() {
    BaseControl.__super__.afterRender.call(this);
    this.afterRenderLabel();
    this.afterRenderControl();
    this.initializeControl();
  };

  BaseControl.prototype.afterRenderLabel = function() {
    if (this.labelEl && this.input.getInputId) {
      this.labelEl.set('for', this.input.getInputId());
    }
  };

  BaseControl.prototype.afterRenderControl = function() {};

  BaseControl.prototype.parentShown = function(parent) {
    BaseControl.__super__.parentShown.call(this, parent);
    this.getInput().parentShown(parent);
  };

  BaseControl.prototype.doDestroy = function() {
    if (this.input) {
      this.input.destroy();
    }
    BaseControl.__super__.doDestroy.call(this);
  };

  return BaseControl;

})(Miwo.Component);

module.exports = BaseControl;


},{"../../buttons/Button":6,"../Rules":20}],26:[function(require,module,exports){
var BaseControl, BaseInputControl,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseControl = require('./BaseControl');

BaseInputControl = (function(_super) {
  __extends(BaseInputControl, _super);

  function BaseInputControl() {
    return BaseInputControl.__super__.constructor.apply(this, arguments);
  }

  BaseInputControl.prototype.setValue = function(value, onlyControl) {
    BaseInputControl.__super__.setValue.call(this, value);
    if (this.input && !onlyControl) {
      this.input.setValue(value);
    }
    return this;
  };

  BaseInputControl.prototype.setDisabled = function(disabled) {
    BaseInputControl.__super__.setDisabled.call(this, disabled);
    if (this.input) {
      this.input.setDisabled(disabled);
    }
    return this;
  };

  BaseInputControl.prototype.setReadonly = function(readonly) {
    this.readonly = readonly;
    if (this.input && this.input.setReadonly) {
      this.input.setReadonly(this.readonly);
    }
    return this;
  };

  BaseInputControl.prototype.afterRenderControl = function() {
    var input;
    input = this.getInput();
    input.on('focus', this.bound('onInputFocus'));
    input.on('blur', this.bound('onInputBlur'));
  };

  BaseInputControl.prototype.onInputFocus = function() {
    this.setFocus();
  };

  BaseInputControl.prototype.onInputBlur = function() {
    this.validate();
    this.blur();
  };

  return BaseInputControl;

})(BaseControl);

module.exports = BaseInputControl;


},{"./BaseControl":25}],27:[function(require,module,exports){
var BaseInputControl, BaseSelectControl, Helpers,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseInputControl = require('./BaseInputControl');

Helpers = require('./Helpers');

BaseSelectControl = (function(_super) {
  __extends(BaseSelectControl, _super);

  function BaseSelectControl() {
    return BaseSelectControl.__super__.constructor.apply(this, arguments);
  }

  BaseSelectControl.prototype.items = null;

  BaseSelectControl.prototype.store = null;

  BaseSelectControl.prototype.keyProperty = null;

  BaseSelectControl.prototype.textProperty = null;

  BaseSelectControl.prototype.rowBuilder = null;

  BaseSelectControl.prototype.prompt = false;

  BaseSelectControl.prototype.input = null;

  BaseSelectControl.prototype.setValue = function(value) {
    BaseSelectControl.__super__.setValue.call(this, value);
    this.setSelected(value);
  };

  BaseSelectControl.prototype.setSelected = function(value) {
    if (value || this.prompt) {
      if (this.input) {
        this.input.setValue(value);
      }
      this.emit('selected', this, value);
    }
  };

  BaseSelectControl.prototype.getItems = function() {
    return Helpers.createSelectItems(this);
  };

  BaseSelectControl.prototype.setItems = function(items) {
    Helpers.setSelectItems(this, items);
    if (!this.prompt && this.value !== null) {
      this.input.setValue(this.getValue());
    }
  };

  BaseSelectControl.prototype.buildRowContent = function(row) {
    if (this.rowBuilder) {
      return this.rowBuilder(row);
    } else {
      return null;
    }
  };

  BaseSelectControl.prototype.afterRenderControl = function() {
    BaseSelectControl.__super__.afterRenderControl.call(this);
    this.setItems(this.getItems());
    this.input.on('change', (function(_this) {
      return function(input, value) {
        return _this.setValue(value);
      };
    })(this));
    this.focusEl = this.input.focusEl;
  };

  return BaseSelectControl;

})(BaseInputControl);

module.exports = BaseSelectControl;


},{"./BaseInputControl":26,"./Helpers":38}],28:[function(require,module,exports){
var BaseInputControl, BaseTextControl, TextInput,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseInputControl = require('./BaseInputControl');

TextInput = require('../../input/Text');

BaseTextControl = (function(_super) {
  __extends(BaseTextControl, _super);

  function BaseTextControl() {
    return BaseTextControl.__super__.constructor.apply(this, arguments);
  }

  BaseTextControl.prototype.placeholder = null;

  BaseTextControl.prototype.minLength = null;

  BaseTextControl.prototype.maxLength = null;

  BaseTextControl.prototype.length = null;

  BaseTextControl.prototype.autocomplete = null;

  BaseTextControl.prototype.pattern = null;

  BaseTextControl.prototype.readonly = null;

  BaseTextControl.prototype.notifyInputChange = false;

  BaseTextControl.prototype.setValueInputChange = true;

  BaseTextControl.prototype.validateOnKeyUp = false;

  BaseTextControl.prototype.resetFormOnEsc = false;

  BaseTextControl.prototype.value = '';

  BaseTextControl.prototype.type = null;

  BaseTextControl.prototype.inputCls = null;

  BaseTextControl.prototype.editable = true;

  BaseTextControl.prototype.initRules = function() {
    BaseTextControl.__super__.initRules.call(this);
    if (this.minLength) {
      this.rules.addRule("minLength", null, this.minLength);
    }
    if (this.maxLength) {
      this.rules.addRule("maxLength", null, this.maxLength);
    }
    if (this.length) {
      this.rules.addRule("length", null, this.length);
    }
  };

  BaseTextControl.prototype.createInput = function() {
    return new TextInput({
      id: this.id + 'Input',
      type: this.type || 'text',
      name: 'input',
      cls: this.inputCls,
      inputName: this.name,
      autocomplete: this.autocomplete,
      placeholder: this.placeholder,
      readonly: this.readonly,
      disabled: this.disabled
    });
  };

  BaseTextControl.prototype.afterRenderControl = function() {
    var inputEl;
    BaseTextControl.__super__.afterRenderControl.call(this);
    inputEl = this.input.getInputEl();
    if (this.minLength !== null) {
      inputEl.set("minlength", this.minLength);
    }
    if (this.maxLength !== null) {
      inputEl.set("maxlength", this.maxLength);
    }
    if (this.isRequired()) {
      inputEl.set("required", true);
    }
    this.mon(inputEl, 'keydown', 'onInputKeydown');
    this.mon(inputEl, 'keyup', 'onInputKeyup');
    this.mon(inputEl, 'change', 'onInputChange');
    this.mon(inputEl, 'focus', 'onInputFocus');
    this.mon(inputEl, 'blur', 'onInputBlur');
    this.focusEl = inputEl;
  };

  BaseTextControl.prototype.onInputChange = function() {
    if (this.setValueInputChange) {
      this.setValue(this.getRawValue(), true);
    }
    if (this.notifyInputChange) {
      this.emit("inputchange", this, this.getRawValue());
    }
  };

  BaseTextControl.prototype.onInputKeydown = function(e) {
    if (!this.editable) {
      if (e.key.length === 1) {
        e.preventDefault();
      }
      return;
    }
    if (e.key.length === 1) {
      this.onKeydown(this, e.key, e);
      this.emit("keydown", this, e.key, e);
      if (this.pattern && !this.pattern.test(e.key)) {
        e.stop();
      }
    } else {
      if (this.resetFormOnEsc && e.key === 'esc') {
        this.getForm().reset();
      }
      this.onSpecialkey(this, e.key, e);
      this.emit("specialkey", this, e.key, e);
    }
  };

  BaseTextControl.prototype.onInputKeyup = function(e) {
    this.notifyErrors = true;
    this.emit("inputchange", this, this.getRawValue());
    if (e.key.length === 1) {
      this.onKeyup(this, e.key, e);
      this.emit("keyup", this, e.key, e);
      e.stop();
    } else {
      this.onSpecialkeyup(this, e.key, e);
      this.emit("specialkeyup", this, e.key, e);
    }
    if (this.hasErrors()) {
      this.validateOnKeyUp = true;
      this.setValue(this.getRawValue(), true);
    }
    if (this.validateOnKeyUp) {
      this.setValue(this.getRawValue(), true);
      this.validate();
    }
  };

  BaseTextControl.prototype.onSpecialkey = function(control, key, e) {};

  BaseTextControl.prototype.onKeydown = function(control, key, e) {};

  BaseTextControl.prototype.onSpecialkeyup = function(control, key, e) {};

  BaseTextControl.prototype.onKeyup = function(control, key, e) {};

  return BaseTextControl;

})(BaseInputControl);

module.exports = BaseTextControl;


},{"../../input/Text":80,"./BaseInputControl":26}],29:[function(require,module,exports){
var BaseControl, ButtonGroup, ButtonGroupControl,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseControl = require('./BaseControl');

ButtonGroup = require('../../buttons/ButtonGroup');

ButtonGroupControl = (function(_super) {
  __extends(ButtonGroupControl, _super);

  function ButtonGroupControl() {
    return ButtonGroupControl.__super__.constructor.apply(this, arguments);
  }

  ButtonGroupControl.prototype.xtype = "buttongroupfield";

  ButtonGroupControl.prototype.items = null;

  ButtonGroupControl.prototype.toggle = 'radio';

  ButtonGroupControl.prototype.setValue = function(value) {
    var v, _i, _len;
    ButtonGroupControl.__super__.setValue.call(this, value);
    if (this.input.toggle === 'radio') {
      this.input.setActive(value, true, true);
    } else {
      this.input.setActiveAll(false, true);
      if (Type.isArray(value)) {
        for (_i = 0, _len = value.length; _i < _len; _i++) {
          v = value[_i];
          this.input.setActive(v, true, true);
        }
      } else {
        this.input.setActive(value, true, true);
      }
    }
  };

  ButtonGroupControl.prototype.createInput = function() {
    return new ButtonGroup({
      toggle: this.toggle
    });
  };

  ButtonGroupControl.prototype.setItems = function(items) {
    var name, text;
    this.input.removeComponents();
    for (name in items) {
      text = items[name];
      this.input.addButton(name, {
        text: text
      });
    }
  };

  ButtonGroupControl.prototype.afterRenderControl = function() {
    this.setItems(this.items);
    this.input.on('active', (function(_this) {
      return function() {
        var value;
        value = [];
        _this.input.getActiveButtons().each(function(btn) {
          return value.push(btn.name);
        });
        return _this.setValue(value);
      };
    })(this));
  };

  return ButtonGroupControl;

})(BaseControl);

module.exports = ButtonGroupControl;


},{"../../buttons/ButtonGroup":7,"./BaseControl":25}],30:[function(require,module,exports){
var Button, ButtonControl, ResetButton, SubmitButton,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Button = require('../../buttons/Button');

ButtonControl = (function(_super) {
  __extends(ButtonControl, _super);

  function ButtonControl(config) {
    if (config == null) {
      config = {};
    }
    if (config.label) {
      config.text = config.label;
    }
    ButtonControl.__super__.constructor.call(this, config);
  }

  return ButtonControl;

})(Button);

SubmitButton = (function(_super) {
  __extends(SubmitButton, _super);

  function SubmitButton() {
    return SubmitButton.__super__.constructor.apply(this, arguments);
  }

  SubmitButton.prototype.isSubmitButton = true;

  SubmitButton.prototype.xtype = 'submitbutton';

  SubmitButton.prototype.type = 'primary';

  return SubmitButton;

})(ButtonControl);

ResetButton = (function(_super) {
  __extends(ResetButton, _super);

  function ResetButton() {
    return ResetButton.__super__.constructor.apply(this, arguments);
  }

  ResetButton.prototype.isResetButton = true;

  ResetButton.prototype.xtype = 'submitbutton';

  return ResetButton;

})(ButtonControl);

module.exports = {
  ButtonControl: ButtonControl,
  SubmitButton: SubmitButton,
  ResetButton: ResetButton
};


},{"../../buttons/Button":6}],31:[function(require,module,exports){
var BaseInputControl, Checkbox, CheckboxControl,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseInputControl = require('./BaseInputControl');

Checkbox = require('../../input/Checkbox');

CheckboxControl = (function(_super) {
  __extends(CheckboxControl, _super);

  function CheckboxControl() {
    return CheckboxControl.__super__.constructor.apply(this, arguments);
  }

  CheckboxControl.prototype.xtype = "checkbox";

  CheckboxControl.prototype.value = false;

  CheckboxControl.prototype.isBoxControl = true;

  CheckboxControl.prototype.createInput = function() {
    var checkbox;
    checkbox = new Checkbox({
      id: this.id + 'Input',
      label: this.label
    });
    checkbox.on('change', (function(_this) {
      return function() {
        _this.setValue(!_this.getValue());
      };
    })(this));
    return checkbox;
  };

  CheckboxControl.prototype.isChecked = function() {
    return this.value === true;
  };

  CheckboxControl.prototype.isFilled = function() {
    return this.isChecked();
  };

  CheckboxControl.prototype.renderLabel = function() {};

  CheckboxControl.prototype.renderControl = function(ct) {
    var input;
    ct.addClass('input-control');
    input = this.getInput();
    input.render(ct);
  };

  CheckboxControl.prototype.afterRenderControl = function() {
    CheckboxControl.__super__.afterRenderControl.call(this);
    this.errorTargetEl = this.input.labelEl;
  };

  return CheckboxControl;

})(BaseInputControl);

module.exports = CheckboxControl;


},{"../../input/Checkbox":68,"./BaseInputControl":26}],32:[function(require,module,exports){
var BaseControl, CheckboxList, CheckboxListControl, Helpers,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseControl = require('./BaseControl');

CheckboxList = require('../../input/CheckboxList');

Helpers = require('./Helpers');

CheckboxListControl = (function(_super) {
  __extends(CheckboxListControl, _super);

  function CheckboxListControl() {
    return CheckboxListControl.__super__.constructor.apply(this, arguments);
  }

  CheckboxListControl.prototype.xtype = "checkboxlist";

  CheckboxListControl.prototype.items = null;

  CheckboxListControl.prototype.inline = false;

  CheckboxListControl.prototype.isBoxControl = true;

  CheckboxListControl.prototype.createInput = function() {
    return new CheckboxList({
      id: this.id + '-input',
      inline: this.inline
    });
  };

  CheckboxListControl.prototype.getItems = function() {
    return Helpers.createInputItems(this);
  };

  CheckboxListControl.prototype.setItems = function(items) {
    Helpers.setInputItems(this, items);
  };

  CheckboxListControl.prototype.setValue = function(value) {
    this.input.setValue(value);
    CheckboxListControl.__super__.setValue.call(this, value);
  };

  CheckboxListControl.prototype.setDisabled = function(disabled) {
    this.input.setDisabled(disabled);
    CheckboxListControl.__super__.setDisabled.call(this, disabled);
  };

  CheckboxListControl.prototype.setDisabledItem = function(name, disabled) {
    this.input.setDisabled(name, disabled);
  };

  CheckboxListControl.prototype.renderControl = function(ct) {
    this.getInput().render(ct);
  };

  CheckboxListControl.prototype.afterRenderControl = function() {
    this.setItems(this.getItems());
    this.input.setValue(this.value);
    this.input.setDisabled(this.disabled);
    this.input.on('change', (function(_this) {
      return function() {
        return _this.setValue(_this.input.getValue());
      };
    })(this));
    this.input.on('blur', (function(_this) {
      return function() {
        return _this.validate();
      };
    })(this));
  };

  return CheckboxListControl;

})(BaseControl);

module.exports = CheckboxListControl;


},{"../../input/CheckboxList":69,"./BaseControl":25,"./Helpers":38}],33:[function(require,module,exports){
var BaseInputControl, ColorControl, ColorInput,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseInputControl = require('./BaseInputControl');

ColorInput = require('../../input/Color');

ColorControl = (function(_super) {
  __extends(ColorControl, _super);

  function ColorControl() {
    return ColorControl.__super__.constructor.apply(this, arguments);
  }

  ColorControl.prototype.xtype = 'colorfield';

  ColorControl.prototype.readonly = false;

  ColorControl.prototype.resettable = false;

  ColorControl.prototype.doInit = function() {
    ColorControl.__super__.doInit.apply(this, arguments);
    if (this.value) {
      this.value = this.value.toLowerCase();
    }
  };

  ColorControl.prototype.setValue = function(value) {
    if (value) {
      value = value.toLowerCase();
    }
    ColorControl.__super__.setValue.call(this, value);
    return this;
  };

  ColorControl.prototype.createInput = function() {
    var input;
    input = new ColorInput({
      id: this.id + 'Input',
      disabled: this.disabled,
      readonly: this.readonly
    });
    input.on('changed', (function(_this) {
      return function(input, value) {
        _this.emit('inputchange', _this, value);
      };
    })(this));
    input.on('selected', (function(_this) {
      return function(input, value) {
        _this.setValue(value);
      };
    })(this));
    input.on('reset', (function(_this) {
      return function() {
        _this.reset();
      };
    })(this));
    return input;
  };

  ColorControl.prototype.onDirtyChange = function(isDirty) {
    ColorControl.__super__.onDirtyChange.call(this, isDirty);
    if (this.resettable) {
      this.input.setResettable(isDirty);
    }
  };

  ColorControl.prototype.initRules = function() {
    ColorControl.__super__.initRules.call(this);
    this.rules.addRule("color");
  };

  return ColorControl;

})(BaseInputControl);

module.exports = ColorControl;


},{"../../input/Color":70,"./BaseInputControl":26}],34:[function(require,module,exports){
var BaseSelectControl, Combo, ComboControl,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseSelectControl = require('./BaseSelectControl');

Combo = require('../../input/Combo');

ComboControl = (function(_super) {
  __extends(ComboControl, _super);

  function ComboControl() {
    return ComboControl.__super__.constructor.apply(this, arguments);
  }

  ComboControl.prototype.xtype = 'combobox';

  ComboControl.prototype.hideSelected = false;

  ComboControl.prototype.multiple = false;

  ComboControl.prototype.height = null;

  ComboControl.prototype.placeholder = '';

  ComboControl.prototype.prompt = false;

  ComboControl.prototype.createInput = function() {
    return new Combo({
      id: this.id + 'Input',
      hideSelected: this.hideSelected,
      multiple: this.multiple,
      height: this.height,
      placeholder: this.placeholder,
      prompt: this.prompt
    });
  };

  return ComboControl;

})(BaseSelectControl);

module.exports = ComboControl;


},{"../../input/Combo":71,"./BaseSelectControl":27}],35:[function(require,module,exports){
var DateControl, DateInput, TextControl,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

TextControl = require('./Text');

DateInput = require('../../input/Date');

DateControl = (function(_super) {
  __extends(DateControl, _super);

  function DateControl() {
    return DateControl.__super__.constructor.apply(this, arguments);
  }

  DateControl.prototype.xtype = "datefield";

  DateControl.prototype.type = 'date';

  DateControl.prototype.validateOnChange = false;

  DateControl.prototype.startDate = null;

  DateControl.prototype.endDate = null;

  DateControl.prototype.pickerBtn = false;

  DateControl.prototype.todayBtn = false;

  DateControl.prototype.clearBtn = false;

  DateControl.prototype.resettable = false;

  DateControl.prototype.editable = false;

  DateControl.prototype.resetBtn = null;

  DateControl.prototype.afterInit = function() {
    DateControl.__super__.afterInit.apply(this, arguments);
    this.append = '<span class="glyphicon glyphicon-calendar"></span>';
    if (this.resettable) {
      this.addResetButton();
    }
  };

  DateControl.prototype.onDirtyChange = function(isDirty) {
    if (this.resettable) {
      this.getButton('reset').setDisabled(!isDirty);
    }
  };

  DateControl.prototype.createInput = function() {
    var input;
    input = new DateInput({
      id: this.id + '-input',
      name: this.name,
      type: this.type,
      disabled: this.disabled,
      readonly: this.readonly,
      placeholder: 'yyyy-mm-dd',
      startDate: this.startDate,
      endDate: this.endDate,
      todayBtn: this.todayBtn || this.pickerBtn,
      clearBtn: this.clearBtn || this.pickerBtn
    });
    input.on('changed', (function(_this) {
      return function(picker, value) {
        _this.setValue(value);
      };
    })(this));
    input.on('reset', (function(_this) {
      return function() {
        _this.reset();
      };
    })(this));
    return input;
  };

  DateControl.prototype.initRules = function() {
    DateControl.__super__.initRules.apply(this, arguments);
    this.rules.addRule("date");
  };

  DateControl.prototype.afterRenderControl = function() {
    DateControl.__super__.afterRenderControl.apply(this, arguments);
    this.getElement('.glyphicon-calendar').getParent().setStyle('cursor', 'pointer').on('click', (function(_this) {
      return function() {
        return _this.getInput().openPicker();
      };
    })(this));
  };

  return DateControl;

})(TextControl);

module.exports = DateControl;


},{"../../input/Date":73,"./Text":43}],36:[function(require,module,exports){
var BaseControl, DateRangeControl, DateRangeInput,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseControl = require('./BaseControl');

DateRangeInput = require('../../input/DateRange');

DateRangeControl = (function(_super) {
  __extends(DateRangeControl, _super);

  function DateRangeControl() {
    return DateRangeControl.__super__.constructor.apply(this, arguments);
  }

  DateRangeControl.prototype.xtype = "daterange";

  DateRangeControl.prototype.readonly = false;

  DateRangeControl.prototype.startDate = null;

  DateRangeControl.prototype.endDate = null;

  DateRangeControl.prototype.pickerBtn = false;

  DateRangeControl.prototype.todayBtn = false;

  DateRangeControl.prototype.clearBtn = false;

  DateRangeControl.prototype.resettable = false;

  DateRangeControl.prototype.editable = false;

  DateRangeControl.prototype.afterInit = function() {
    DateRangeControl.__super__.afterInit.apply(this, arguments);
    if (this.resettable) {
      this.addResetButton();
    }
  };

  DateRangeControl.prototype.onDirtyChange = function(isDirty) {
    if (this.resettable) {
      this.getButton('reset').setDisabled(!isDirty);
    }
  };

  DateRangeControl.prototype.createInput = function() {
    var input;
    input = new DateRangeInput({
      id: this.id + '-input',
      name: this.name,
      disabled: this.disabled,
      readonly: this.readonly,
      startDate: this.startDate,
      endDate: this.endDate,
      todayBtn: this.todayBtn || this.pickerBtn,
      clearBtn: this.clearBtn || this.pickerBtn
    });
    input.on('changed', (function(_this) {
      return function(picker, value) {
        _this.setValue(value);
      };
    })(this));
    return input;
  };

  DateRangeControl.prototype.setValue = function(value) {
    this.input.setValue(value);
    DateRangeControl.__super__.setValue.call(this, value);
  };

  DateRangeControl.prototype.setDisabled = function(disabled) {
    this.input.setDisabled(disabled);
    DateRangeControl.__super__.setDisabled.call(this, disabled);
  };

  DateRangeControl.prototype.afterRenderControl = function() {
    DateRangeControl.__super__.afterRenderControl.apply(this, arguments);
    if (this.resettable) {
      this.input.el.addClass('has-append');
    }
  };

  return DateRangeControl;

})(BaseControl);

module.exports = DateRangeControl;


},{"../../input/DateRange":74,"./BaseControl":25}],37:[function(require,module,exports){
var BaseControl, DropSelectControl, DropSelectInput,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseControl = require('./BaseControl');

DropSelectInput = require('../../input/DropSelect');

DropSelectControl = (function(_super) {
  __extends(DropSelectControl, _super);

  function DropSelectControl() {
    return DropSelectControl.__super__.constructor.apply(this, arguments);
  }

  DropSelectControl.prototype.xtype = "dropselect";

  DropSelectControl.prototype.store = void 0;

  DropSelectControl.prototype.keyProperty = void 0;

  DropSelectControl.prototype.textProperty = void 0;

  DropSelectControl.prototype.sourceTitle = void 0;

  DropSelectControl.prototype.targetTitle = void 0;

  DropSelectControl.prototype.sourceEmpty = void 0;

  DropSelectControl.prototype.targetEmpty = void 0;

  DropSelectControl.prototype.createInput = function() {
    return new DropSelectInput({
      id: this.id + '-input',
      store: this.store,
      keyProperty: this.keyProperty,
      textProperty: this.textProperty,
      sourceTitle: this.sourceTitle,
      targetTitle: this.targetTitle,
      sourceEmpty: this.sourceEmpty,
      targetEmpty: this.targetEmpty
    });
  };

  DropSelectControl.prototype.setValue = function(value) {
    this.input.setValue(value, true);
    DropSelectControl.__super__.setValue.call(this, value);
  };

  DropSelectControl.prototype.setDisabled = function(disabled) {
    this.input.setDisabled(disabled);
    DropSelectControl.__super__.setDisabled.call(this, disabled);
  };

  DropSelectControl.prototype.renderControl = function(ct) {
    this.getInput().render(ct);
  };

  DropSelectControl.prototype.afterRenderControl = function() {
    this.input.setValue(this.value);
    this.input.setDisabled(this.disabled);
    this.input.on('change', (function(_this) {
      return function() {
        return _this.setValue(_this.input.getValue());
      };
    })(this));
  };

  return DropSelectControl;

})(BaseControl);

module.exports = DropSelectControl;


},{"../../input/DropSelect":75,"./BaseControl":25}],38:[function(require,module,exports){
var Helpers;

Helpers = (function() {
  function Helpers() {}

  Helpers.createSelectItems = function(control) {
    var items;
    if (control.items) {
      return control.items;
    } else if (control.store) {
      control.store = miwo.store(control.store);
      if (!control.keyProperty) {
        control.keyProperty = 'id';
      }
      if (!control.textProperty) {
        throw new Error("Undefined text property");
      }
      items = {};
      control.store.each((function(_this) {
        return function(row) {
          return items[row.get(control.keyProperty)] = {
            text: row.get(control.textProperty),
            content: control.buildRowContent(row)
          };
        };
      })(this));
      return items;
    } else {
      return {};
    }
  };

  Helpers.setSelectItems = function(control, items) {
    var group, iname, input, ivalue, name, value, _i, _len, _ref;
    if (!control.input) {
      return;
    }
    input = control.input;
    input.clear();
    if (control.prompt && control.requirePromptItem) {
      input.addOption("", control.prompt);
    }
    if (Type.isArray(items)) {
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        value = items[_i];
        input.addOption(value, value);
      }
    } else {
      for (name in items) {
        value = items[name];
        if (Type.isObject(value)) {
          if (value.items) {
            group = input.addGroup(value.title);
            _ref = value.items;
            for (iname in _ref) {
              ivalue = _ref[iname];
              if (Type.isObject(ivalue)) {
                group.addOption(iname, ivalue.text, ivalue.content);
              } else {
                group.addOption(iname, ivalue);
              }
            }
          } else {
            input.addOption(name, value.text, value.content);
          }
        } else {
          input.addOption(name, value);
        }
      }
    }
  };

  Helpers.createInputItems = function(control) {
    var items;
    if (control.items) {
      return control.items;
    } else if (control.store) {
      control.store = miwo.store(control.store);
      if (!control.keyProperty) {
        control.keyProperty = 'id';
      }
      if (!control.textProperty) {
        throw new Error("Undefined text property");
      }
      items = {};
      control.store.each((function(_this) {
        return function(row) {
          return items[row.get(control.keyProperty)] = {
            text: row.get(control.textProperty),
            content: control.buildRowContent(row)
          };
        };
      })(this));
      return items;
    } else {
      return {};
    }
  };

  Helpers.setInputItems = function(control, items) {
    var input, name, value, _i, _len;
    if (!control.input) {
      return;
    }
    input = control.input;
    input.clear();
    if (Type.isArray(items)) {
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        value = items[_i];
        input.addItem(value, value);
      }
    } else {
      for (name in items) {
        value = items[name];
        input.addItem(name, value);
      }
    }
  };

  return Helpers;

})();

module.exports = Helpers;


},{}],39:[function(require,module,exports){
var NumberControl, TextControl,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

TextControl = require('./Text');

NumberControl = (function(_super) {
  __extends(NumberControl, _super);

  function NumberControl() {
    return NumberControl.__super__.constructor.apply(this, arguments);
  }

  NumberControl.prototype.xtype = "numberfield";

  NumberControl.prototype.type = 'number';

  NumberControl.prototype.min = null;

  NumberControl.prototype.max = null;

  NumberControl.prototype.pattern = /[\d\.\-]/;

  NumberControl.prototype.setValue = function(value) {
    if (this.min !== null && value < this.min) {
      value = this.min;
    }
    if (this.max !== null && value > this.max) {
      value = this.max;
    }
    NumberControl.__super__.setValue.call(this, value);
  };

  NumberControl.prototype.initRules = function() {
    NumberControl.__super__.initRules.call(this);
    this.rules.addRule("number");
    if (this.min !== null) {
      this.rules.addRule("min", null, this.min);
    }
    if (this.max !== null) {
      this.rules.addRule("max", null, this.max);
    }
  };

  NumberControl.prototype.createInput = function() {
    var input;
    input = NumberControl.__super__.createInput.call(this);
    input.el.addClass("number");
    if (this.min !== null) {
      input.el.set("min", this.min);
    }
    if (this.max !== null) {
      input.el.set("max", this.max);
    }
    return input;
  };

  return NumberControl;

})(TextControl);

module.exports = NumberControl;


},{"./Text":43}],40:[function(require,module,exports){
var BaseControl, Helpers, RadioList, RadioListControl,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseControl = require('./BaseControl');

RadioList = require('../../input/RadioList');

Helpers = require('./Helpers');

RadioListControl = (function(_super) {
  __extends(RadioListControl, _super);

  function RadioListControl() {
    return RadioListControl.__super__.constructor.apply(this, arguments);
  }

  RadioListControl.prototype.xtype = "radiolist";

  RadioListControl.prototype.items = null;

  RadioListControl.prototype.inline = false;

  RadioListControl.prototype.isBoxControl = true;

  RadioListControl.prototype.createInput = function() {
    return new RadioList({
      id: this.id + '-input',
      inline: this.inline,
      radioName: this.name
    });
  };

  RadioListControl.prototype.getItems = function() {
    return Helpers.createInputItems(this);
  };

  RadioListControl.prototype.setItems = function(items) {
    Helpers.setInputItems(this, items);
  };

  RadioListControl.prototype.setValue = function(value) {
    this.input.setValue(value);
    RadioListControl.__super__.setValue.call(this, value);
  };

  RadioListControl.prototype.setDisabled = function(disabled) {
    this.input.setDisabled(disabled);
    RadioListControl.__super__.setDisabled.call(this, disabled);
  };

  RadioListControl.prototype.setDisabledItem = function(name, disabled) {
    this.input.setDisabled(name, disabled);
  };

  RadioListControl.prototype.renderControl = function(ct) {
    this.getInput().render(ct);
  };

  RadioListControl.prototype.afterRenderControl = function() {
    this.setItems(this.getItems());
    this.input.setValue(this.value);
    this.input.setDisabled(this.disabled);
    this.input.on('change', (function(_this) {
      return function() {
        return _this.setValue(_this.input.getValue());
      };
    })(this));
    this.input.on('blur', (function(_this) {
      return function() {
        return _this.validate();
      };
    })(this));
  };

  return RadioListControl;

})(BaseControl);

module.exports = RadioListControl;


},{"../../input/RadioList":77,"./BaseControl":25,"./Helpers":38}],41:[function(require,module,exports){
var BaseSelectControl, Select, SelectControl,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseSelectControl = require('./BaseSelectControl');

Select = require('../../input/Select');

SelectControl = (function(_super) {
  __extends(SelectControl, _super);

  function SelectControl() {
    return SelectControl.__super__.constructor.apply(this, arguments);
  }

  SelectControl.prototype.xtype = 'selectbox';

  SelectControl.prototype.requirePromptItem = true;

  SelectControl.prototype.createInput = function() {
    return new Select({
      id: this.id + '-input'
    });
  };

  return SelectControl;

})(BaseSelectControl);

module.exports = SelectControl;


},{"../../input/Select":78,"./BaseSelectControl":27}],42:[function(require,module,exports){
var BaseInputControl, Slider, SliderControl,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseInputControl = require('./BaseInputControl');

Slider = require('../../input/Slider');

SliderControl = (function(_super) {
  __extends(SliderControl, _super);

  function SliderControl() {
    return SliderControl.__super__.constructor.apply(this, arguments);
  }

  SliderControl.prototype.xtype = "slider";

  SliderControl.prototype.min = 0;

  SliderControl.prototype.max = 100;

  SliderControl.prototype.step = 1;

  SliderControl.prototype.value = 0;

  SliderControl.prototype.mode = 'slider';

  SliderControl.prototype.knobRenderer = void 0;

  SliderControl.prototype.selectionRenderer = void 0;

  SliderControl.prototype.setValue = function(value) {
    this.input.setValue(value);
    SliderControl.__super__.setValue.call(this, this.input.getValue());
  };

  SliderControl.prototype.createInput = function() {
    var input;
    input = new Slider({
      id: this.id + 'Input',
      mode: this.mode,
      inputName: this.name,
      step: this.step,
      min: this.min,
      max: this.max,
      knobRenderer: this.knobRenderer,
      selectionRenderer: this.selectionRenderer
    });
    input.on('change', (function(_this) {
      return function(slider, value) {
        _this.setValue(value);
      };
    })(this));
    input.on('slide', (function(_this) {
      return function(slider, value) {
        _this.emit('inputchange', _this, value);
      };
    })(this));
    return input;
  };

  return SliderControl;

})(BaseInputControl);

module.exports = SliderControl;


},{"../../input/Slider":79,"./BaseInputControl":26}],43:[function(require,module,exports){
var BaseTextControl, TextControl,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseTextControl = require('./BaseTextControl');

TextControl = (function(_super) {
  __extends(TextControl, _super);

  function TextControl() {
    return TextControl.__super__.constructor.apply(this, arguments);
  }

  TextControl.prototype.isTextField = true;

  TextControl.prototype.xtype = 'textfield';

  TextControl.prototype.initRules = function() {
    TextControl.__super__.initRules.call(this);
    switch (this.type) {
      case 'email':
        this.rules.addRule('email');
        break;
      case 'url':
        this.rules.addRule('url');
        break;
      case 'date':
        this.rules.addRule('date');
    }
  };

  TextControl.prototype.onSpecialkey = function(control, key, e) {
    if (key === 'enter') {
      this.setValue(this.getRawValue(), true);
    }
  };

  return TextControl;

})(BaseTextControl);

module.exports = TextControl;


},{"./BaseTextControl":28}],44:[function(require,module,exports){
var BaseTextControl, TextArea, TextAreaControl,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseTextControl = require('./BaseTextControl');

TextArea = require('../../input/TextArea');

TextAreaControl = (function(_super) {
  __extends(TextAreaControl, _super);

  function TextAreaControl() {
    return TextAreaControl.__super__.constructor.apply(this, arguments);
  }

  TextAreaControl.prototype.xtype = "textarea";

  TextAreaControl.prototype.isTextAreaField = true;

  TextAreaControl.prototype.height = null;

  TextAreaControl.prototype.resize = "vertical";

  TextAreaControl.prototype.createInput = function() {
    var input;
    input = new TextArea({
      id: this.id + '-input',
      inputName: this.name,
      height: this.height,
      readonly: this.readonly,
      disabled: this.disabled,
      resize: this.resize,
      placeholder: this.placeholder
    });
    this.height = null;
    return input;
  };

  return TextAreaControl;

})(BaseTextControl);

module.exports = TextAreaControl;


},{"../../input/TextArea":81,"./BaseTextControl":28}],45:[function(require,module,exports){
var BaseControl, ToggleControl, ToggleInput,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseControl = require('./BaseControl');

ToggleInput = require('../../input/Toggle');

ToggleControl = (function(_super) {
  __extends(ToggleControl, _super);

  function ToggleControl() {
    return ToggleControl.__super__.constructor.apply(this, arguments);
  }

  ToggleControl.prototype.xtype = 'toggle';

  ToggleControl.prototype.onState = void 0;

  ToggleControl.prototype.offState = void 0;

  ToggleControl.prototype.onText = void 0;

  ToggleControl.prototype.offText = void 0;

  ToggleControl.prototype.size = void 0;

  ToggleControl.prototype.value = false;

  ToggleControl.prototype.createInput = function() {
    return new ToggleInput({
      id: this.id + '-input',
      inputName: this.name,
      size: this.size,
      onState: this.onState,
      offState: this.offState,
      onText: this.onText,
      offText: this.offText
    });
  };

  ToggleControl.prototype.setValue = function(value) {
    this.input.setValue(value);
    ToggleControl.__super__.setValue.call(this, value);
  };

  ToggleControl.prototype.setDisabled = function(disabled) {
    this.input.setDisabled(disabled);
    ToggleControl.__super__.setDisabled.call(this, disabled);
  };

  ToggleControl.prototype.setReadonly = function(readonly) {
    this.input.setReadonly(readonly);
  };

  ToggleControl.prototype.renderControl = function(ct) {
    this.getInput().render(ct);
  };

  ToggleControl.prototype.afterRenderControl = function() {
    this.input.setValue(this.value);
    this.input.setDisabled(this.disabled);
    this.input.setReadonly(this.readonly);
    this.input.on('change', (function(_this) {
      return function() {
        return _this.setValue(_this.input.getValue());
      };
    })(this));
  };

  return ToggleControl;

})(BaseControl);

module.exports = ToggleControl;


},{"../../input/Toggle":82,"./BaseControl":25}],46:[function(require,module,exports){
var BaseContainer, exports;

exports = {
  Rules: require('./Rules'),
  Validators: require('./Validators'),
  container: {
    BaseContainer: require('./container/BaseContainer'),
    Fieldset: require('./container/Fieldset'),
    Form: require('./container/Form')
  },
  render: {
    FormRendererFactory: require('./render/FormRendererFactory'),
    DefaultRenderer: require('./render/DefaultRenderer'),
    InlineRenderer: require('./render/InlineRenderer')
  },
  control: {
    BaseControl: require('./control/BaseControl'),
    BaseInputControl: require('./control/BaseInputControl'),
    BaseTextControl: require('./control/BaseTextControl'),
    Checkbox: require('./control/Checkbox'),
    CheckboxList: require('./control/CheckboxList'),
    RadioList: require('./control/RadioList'),
    Select: require('./control/Select'),
    Combo: require('./control/Combo'),
    Color: require('./control/Color'),
    Date: require('./control/Date'),
    DateRange: require('./control/DateRange'),
    Number: require('./control/Number'),
    Slider: require('./control/Slider'),
    Text: require('./control/Text'),
    TextArea: require('./control/TextArea'),
    Toggle: require('./control/Toggle'),
    DropSelect: require('./control/DropSelect'),
    ButtonGroup: require('./control/ButtonGroup'),
    Button: require('./control/Buttons').ButtonControl,
    SubmitButton: require('./control/Buttons').SubmitButton,
    ResetButton: require('./control/Buttons').ResetButton
  }
};

BaseContainer = exports.container.BaseContainer;

BaseContainer.registerControl('container', BaseContainer);

BaseContainer.registerControl('date', exports.control.Date);

BaseContainer.registerControl('dateRange', exports.control.DateRange);

BaseContainer.registerControl('text', exports.control.Text);

BaseContainer.registerControl('textarea', exports.control.TextArea);

BaseContainer.registerControl('color', exports.control.Color);

BaseContainer.registerControl('number', exports.control.Number);

BaseContainer.registerControl('slider', exports.control.Slider);

BaseContainer.registerControl('combo', exports.control.Combo);

BaseContainer.registerControl('select', exports.control.Select);

BaseContainer.registerControl('checkbox', exports.control.Checkbox);

BaseContainer.registerControl('checkboxList', exports.control.CheckboxList);

BaseContainer.registerControl('radioList', exports.control.RadioList);

BaseContainer.registerControl('toggle', exports.control.Toggle);

BaseContainer.registerControl('dropSelect', exports.control.DropSelect);

BaseContainer.registerControl('buttonGroup', exports.control.ButtonGroup);

BaseContainer.registerControl('button', exports.control.Button);

BaseContainer.registerControl('submit', exports.control.SubmitButton);

BaseContainer.registerControl('reset', exports.control.ResetButton);

module.exports = exports;


},{"./Rules":20,"./Validators":21,"./container/BaseContainer":22,"./container/Fieldset":23,"./container/Form":24,"./control/BaseControl":25,"./control/BaseInputControl":26,"./control/BaseTextControl":28,"./control/ButtonGroup":29,"./control/Buttons":30,"./control/Checkbox":31,"./control/CheckboxList":32,"./control/Color":33,"./control/Combo":34,"./control/Date":35,"./control/DateRange":36,"./control/DropSelect":37,"./control/Number":39,"./control/RadioList":40,"./control/Select":41,"./control/Slider":42,"./control/Text":43,"./control/TextArea":44,"./control/Toggle":45,"./render/DefaultRenderer":47,"./render/FormRendererFactory":48,"./render/InlineRenderer":49}],47:[function(require,module,exports){
var DefaultRenderer,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

DefaultRenderer = (function(_super) {
  __extends(DefaultRenderer, _super);

  function DefaultRenderer() {
    return DefaultRenderer.__super__.constructor.apply(this, arguments);
  }

  DefaultRenderer.prototype.formCls = 'horizontal';

  DefaultRenderer.prototype.baseColSize = 8;

  DefaultRenderer.prototype.renderForm = function(form) {
    var username;
    if (this.formCls) {
      form.el.addClass('form-' + this.formCls);
    }
    if (form.preventAutoLogin) {
      username = new Element('input', {
        name: '_username',
        styles: {
          display: 'none'
        }
      });
      username.inject(form.el);
      username = new Element('input', {
        name: '_password',
        type: 'password',
        styles: {
          display: 'none'
        }
      });
      username.inject(form.el);
    }
  };

  DefaultRenderer.prototype.renderButtons = function(buttons, ct) {
    var button, _i, _len;
    ct.addClass('form-actions');
    if (ct.generated && this.baseColSize) {
      ct.addClass("col-sm-offset-" + (12 - this.baseColSize));
      ct.addClass("col-sm-" + this.baseColSize);
    }
    for (_i = 0, _len = buttons.length; _i < _len; _i++) {
      button = buttons[_i];
      button.render(ct);
    }
  };

  DefaultRenderer.prototype.renderGroup = function(control, ct) {
    if (!control.groupEl) {
      control.groupEl = control.el;
      control.groupEl.inject(ct);
      control.groupEl.addClass('form-group');
    }
    if (!control.visible) {
      control.groupEl.setVisible(false);
    }
    control.el = control.groupEl;
    if (!control.labelRendered) {
      this.renderLabel(control, control.groupEl);
    }
    if (!control.controlsRendered) {
      this.renderControls(control, control.groupEl);
    } else if (!control.controlRendered) {
      this.renderControl(control, control.controlsEl);
    } else if (!control.inputRendered) {
      control.getInput().replace(control.inputEl);
    }
  };

  DefaultRenderer.prototype.renderLabel = function(control, ct) {
    var labelEl;
    labelEl = control.renderLabel(ct);
    if (labelEl) {
      labelEl.addClass('control-label');
      if (this.baseColSize) {
        labelEl.addClass('col-sm-' + (12 - this.baseColSize));
      }
    }
  };

  DefaultRenderer.prototype.renderControls = function(control, ct) {
    var controlsEl, descEl, helpEl;
    if (!control.controlsEl) {
      controlsEl = new Element('div');
      controlsEl.inject(ct);
      controlsEl.addClass('form-controls');
      if (this.baseColSize) {
        controlsEl.addClass('col-sm-' + this.baseColSize);
      }
      control.controlsEl = controlsEl;
    }
    controlsEl = control.controlsEl;
    if (!controlsEl.getPrevious('.control-label') && this.baseColSize) {
      controlsEl.addClass('col-sm-offset-' + (12 - this.baseColSize));
    }
    if (control.help) {
      helpEl = new Element("span", {
        parent: controlsEl,
        cls: "help-block",
        html: control.help
      });
      control.helpEl = helpEl;
    }
    this.renderControl(control, controlsEl);
    if (control.desc) {
      descEl = new Element("div", {
        parent: controlsEl,
        cls: "help-block",
        html: control.desc
      });
      control.descEl = descEl;
    }
  };

  DefaultRenderer.prototype.renderControl = function(control, ct) {
    var inputCt;
    if (!control.controlEl) {
      inputCt = new Element('div');
      inputCt.inject(ct);
      control.controlEl = inputCt;
    }
    control.renderControl(control.controlEl);
  };

  return DefaultRenderer;

})(Miwo.Object);

module.exports = DefaultRenderer;


},{}],48:[function(require,module,exports){
var FormRendererFactory;

FormRendererFactory = (function() {
  FormRendererFactory.prototype.defines = null;

  function FormRendererFactory() {
    this.defines = {};
  }

  FormRendererFactory.prototype.register = function(name, fn) {
    this.defines[name] = fn;
  };

  FormRendererFactory.prototype.create = function(type, options) {
    if (!this.defines[type]) {
      throw new Error("Required form renderer '" + type + "' is not registered in FormRendererFactory");
    }
    return new this.defines[type](options);
  };

  return FormRendererFactory;

})();

module.exports = FormRendererFactory;


},{}],49:[function(require,module,exports){
var InlineRenderer;

InlineRenderer = (function() {
  InlineRenderer.prototype.options = null;

  function InlineRenderer() {
    this.options = {};
  }

  InlineRenderer.prototype.renderForm = function(form) {
    form.el.addClass('form-inline');
  };

  InlineRenderer.prototype.renderButtons = function(buttons, ct) {
    var button, _i, _len;
    for (_i = 0, _len = buttons.length; _i < _len; _i++) {
      button = buttons[_i];
      button.render(ct);
    }
  };

  InlineRenderer.prototype.renderGroup = function(control, ct) {
    if (!control.groupEl) {
      control.groupEl = control.el;
      control.groupEl.inject(ct);
      control.groupEl.addClass('form-group');
    }
    if (control.isBoxControl) {
      control.groupEl.addClass('margin-no');
    }
    if (!control.labelRendered) {
      this.renderLabel(control, control.groupEl);
    }
    if (!control.controlsRendered) {
      this.renderControls(control, control.groupEl);
    } else if (!control.controlRendered) {
      this.renderControl(control, control.controlsEl);
    } else if (!control.inputRendered) {
      control.getInput().replace(control.inputEl);
    }
  };

  InlineRenderer.prototype.renderLabel = function(control, ct) {
    var labelEl;
    labelEl = control.renderLabel(ct);
    if (labelEl) {
      labelEl.addClass('sr-only');
    }
  };

  InlineRenderer.prototype.renderControls = function(control, ct) {
    var controlsEl;
    if (!control.controlsEl) {
      controlsEl = new Element('div');
      controlsEl.inject(ct);
      controlsEl.addClass('form-controls');
      control.controlsEl = controlsEl;
    }
    this.renderControl(control, control.controlsEl);
  };

  InlineRenderer.prototype.renderControl = function(control, ct) {
    var inputCt;
    if (!control.controlEl) {
      inputCt = new Element('div');
      inputCt.inject(ct);
      control.controlEl = inputCt;
    }
    control.renderControl(control.controlEl);
  };

  return InlineRenderer;

})();

module.exports = InlineRenderer;


},{}],50:[function(require,module,exports){
var Action,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Action = (function(_super) {
  __extends(Action, _super);

  function Action() {
    return Action.__super__.constructor.apply(this, arguments);
  }

  Action.prototype.name = null;

  Action.prototype.text = null;

  Action.prototype.callback = null;

  Action.prototype.inline = false;

  Action.prototype.confirm = false;

  Action.prototype.confirmPlacement = null;

  Action.prototype.divider = false;

  return Action;

})(Miwo.Object);

module.exports = Action;


},{}],51:[function(require,module,exports){
var ActionColumn, CheckerColumn, Grid, GridRenderer, Operations, Paginator, Pane, SelectionModel,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SelectionModel = require('../selection/SelectionModel');

GridRenderer = require('./renderer/GridRenderer');

CheckerColumn = require('./column/CheckerColumn');

ActionColumn = require('./column/ActionColumn');

Operations = require('./Operations');

Paginator = require('../pagination/Paginator');

Pane = require('../panel/Pane');

Grid = (function(_super) {
  __extends(Grid, _super);

  function Grid() {
    return Grid.__super__.constructor.apply(this, arguments);
  }

  Grid.prototype.isGrid = true;

  Grid.prototype.xtype = 'grid';

  Grid.prototype.condensed = false;

  Grid.prototype.stripe = false;

  Grid.prototype.nowrap = true;

  Grid.prototype.rowclickable = false;

  Grid.prototype.maskOnLoad = false;

  Grid.prototype.verticalAlign = null;

  Grid.prototype.store = null;

  Grid.prototype.renderer = null;

  Grid.prototype.selectable = false;

  Grid.prototype.selector = "auto";

  Grid.prototype.selection = "multi";

  Grid.prototype.groupBy = null;

  Grid.prototype.paginator = false;

  Grid.prototype.actionBtnSize = null;

  Grid.prototype.role = 'grid';

  Grid.prototype.size = 'md';

  Grid.prototype.layout = false;

  Grid.prototype.baseCls = "grid";

  Grid.prototype.checker = null;

  Grid.prototype.operations = null;

  Grid.prototype.selectionModel = null;

  Grid.prototype.headerEl = null;

  Grid.prototype.bodyEl = null;

  Grid.prototype.footerEl = null;

  Grid.prototype.lastAddedColumn = null;

  Grid.prototype.actionColumnIndex = 0;

  Grid.registerColumn = function(columnName, fn) {
    var addMethod;
    if (!fn) {
      throw new Error("Error in registry control " + controlName + ", constructor is undefined");
    }
    addMethod = 'add' + columnName.capitalize();
    this.prototype[addMethod] = function(name, config) {
      if (config == null) {
        config = {};
      }
      return this.addColumn(name, new fn(config));
    };
  };

  Grid.prototype.afterInit = function() {
    var contentEl;
    Grid.__super__.afterInit.apply(this, arguments);
    if (this.maskOnLoad) {
      this.showMask();
    }
    if (this.store) {
      if (Type.isString(this.store)) {
        this.setStore(miwo.store(this.store));
      } else {
        this.setStore(this.store);
      }
    }
    if (this.renderer) {
      this.rendererOptions = this.renderer;
      this.renderer = null;
    }
    contentEl = this.getContentEl();
    contentEl.addClass(this.getBaseCls('container'));
    this.headerEl = new Element("div", {
      parent: contentEl,
      cls: this.getBaseCls("header")
    });
    this.mainEl = new Element("div", {
      parent: contentEl,
      cls: this.getBaseCls("main")
    });
    this.bodyEl = new Element("div", {
      parent: this.mainEl,
      cls: this.getBaseCls("body")
    });
    this.footerEl = new Element("div", {
      parent: contentEl,
      cls: this.getBaseCls("footer")
    });
    this.contentEl = this.bodyEl;
    this.scrollableCt = this.mainEl;
    this.scrollableEl = this.bodyEl;
  };

  Grid.prototype.addedComponent = function(column) {
    this.lastAddedColumn = column;
  };

  Grid.prototype.addColumn = function(name, column) {
    if (!column.isColumn) {
      throw new Error("Object is not instance of column");
    }
    return this.add(name, column);
  };

  Grid.prototype.addCheckerColumn = function(name, config) {
    return this.addColumn(name, new CheckerColumn(config));
  };

  Grid.prototype.addActionColumn = function(name, config) {
    return this.addColumn(name, new ActionColumn(config));
  };

  Grid.prototype.addOperation = function(name, config) {
    return this.getOperations().addAction(name, config);
  };

  Grid.prototype.addAction = function(name, config) {
    return this.getActionColumn().addAction(name, config);
  };

  Grid.prototype.getActionColumn = function() {
    if (!this.lastAddedColumn.isActionColumn) {
      this.addActionColumn('actions' + this.actionColumnIndex);
      this.actionColumnIndex++;
    }
    return this.lastAddedColumn;
  };

  Grid.prototype.getOperations = function() {
    if (!this.operations) {
      this.operations = new Operations(this);
    }
    return this.operations;
  };

  Grid.prototype.getColumns = function() {
    return this.getComponents().toArray();
  };

  Grid.prototype.setSelectionModel = function(selectionModel) {
    this.selectionModel = selectionModel;
    if (!this.store) {
      throw new Error("Before set selection model, first set store");
    }
    this.selectionModel.setStore(this.store);
    this.mon(selectionModel, 'change', 'onSelectionModelChange');
  };

  Grid.prototype.getSelectionModel = function() {
    return this.selectionModel;
  };

  Grid.prototype.onSelectionModelChange = function(sm, selection) {
    this.emit('selectionchange', this, sm, selection);
  };

  Grid.prototype.setSelector = function(selector) {
    this.selector = selector;
    this.selector.setGrid(this);
    this.selector.setSelectionModel(this.getSelectionModel());
  };

  Grid.prototype.onOperationSubmit = function(action) {
    var records;
    records = this.getSelectionModel().getRecords();
    if (action.callback) {
      action.callback(records);
    }
    this.emit("action", this, action.name, records);
  };

  Grid.prototype.onActionSubmit = function(action, record) {
    if (action.callback) {
      action.callback(record);
    }
    this.emit("action", this, action.name, [record]);
  };

  Grid.prototype.showMask = function() {
    if (!this.loadMask) {
      this.loadMask = miwo.mask.create(this);
    }
    this.loadMask.show();
  };

  Grid.prototype.hideMask = function() {
    if (this.loadMask) {
      this.loadMask.hide();
    }
  };

  Grid.prototype.setStore = function(store) {
    this.munon(this.store, store, 'add', 'onStoreAdd');
    this.munon(this.store, store, 'remove', 'onStoreRemove');
    this.munon(this.store, store, 'refresh', 'onStoreRefresh');
    this.munon(this.store, store, 'update', 'onStoreUpdate');
    this.munon(this.store, store, 'beforeload', 'onStoreBeforeload');
    this.munon(this.store, store, 'load', 'onStoreLoad');
    this.munon(this.store, store, 'reload', 'onStoreReload');
    this.store = store;
  };

  Grid.prototype.getStore = function() {
    return this.store;
  };

  Grid.prototype.onStoreAdd = function(store, record) {
    if (this.rendered) {
      this.renderer.recordAdded(record);
    }
  };

  Grid.prototype.onStoreRemove = function(store, record) {
    if (this.rendered) {
      this.renderer.recordRemoved(record);
    }
  };

  Grid.prototype.onStoreUpdate = function(store, record) {
    if (this.rendered) {
      this.renderer.recordUpdated(record);
    }
  };

  Grid.prototype.setAutoSync = function(autoSync) {
    this.getRenderer().setAutoSync(autoSync);
  };

  Grid.prototype.onStoreRefresh = function() {
    this.refresh();
  };

  Grid.prototype.onStoreBeforeload = function() {
    if (this.loadMask && this.maskOnLoad) {
      this.loadMask.show();
    }
  };

  Grid.prototype.onStoreLoad = function() {
    this.refresh();
    if (this.loadMask) {
      this.loadMask.hide();
    }
  };

  Grid.prototype.onStoreReload = function() {
    this.refresh();
    if (this.loadMask) {
      this.loadMask.hide();
    }
  };

  Grid.prototype.refresh = function() {
    if (this.rendered) {
      this.renderer.refresh();
    }
  };

  Grid.prototype.sync = function() {
    if (this.rendered) {
      this.renderer.syncRows();
    }
  };

  Grid.prototype.getRecords = function() {
    return this.store.getRecords();
  };

  Grid.prototype.doRender = function() {
    var config, type;
    if (this.selectable || this.operations) {
      if (!this.selectionModel) {
        if (Type.isString(this.selection)) {
          config = {
            type: this.selection
          };
        } else {
          config = this.selection || {};
        }
        this.setSelectionModel(new SelectionModel(config));
      }
      if (!Type.isObject(this.selector) || !this.selector.isSelector) {
        if (Type.isString(this.selector)) {
          type = this.selector;
          config = null;
        } else {
          type = this.selector.type;
          config = this.selector;
        }
        if (type === 'auto') {
          type = this.operations ? 'check' : 'row';
        }
        this.setSelector(miwo.service('selectorFactory').create(type, config));
      }
      if (this.selector.checkerRequired) {
        this.checker = this.addCheckerColumn('checker');
      }
    }
    this.getRenderer().render();
  };

  Grid.prototype.afterRender = function() {
    Grid.__super__.afterRender.call(this);
    this.getRenderer().afterRender();
    if (this.store.loaded) {
      this.onRefresh();
    }
  };

  Grid.prototype.getRenderer = function() {
    if (!this.renderer) {
      this.renderer = this.createRenderer(this.rendererOptions);
    }
    return this.renderer;
  };

  Grid.prototype.createRenderer = function(options) {
    return new GridRenderer(this, options);
  };

  Grid.prototype.createComponentPaginator = function() {
    var config, paginator;
    config = this.paginator === true ? {} : this.paginator;
    paginator = new Paginator(config);
    if (this.store) {
      paginator.setStore(this.store);
    }
    return paginator;
  };

  Grid.prototype.onRefresh = function() {
    this.emit("refresh", this);
  };

  Grid.prototype.doDestroy = function() {
    if (this.renderer) {
      this.renderer.destroy();
    }
    if (this.selector) {
      this.selector.destroy();
    }
    if (this.selectionModel) {
      this.selectionModel.destroy();
    }
    this.selectionModel = null;
    this.renderer = null;
    this.selector = null;
    this.store = null;
    return Grid.__super__.doDestroy.apply(this, arguments);
  };

  return Grid;

})(Pane);

module.exports = Grid;


},{"../pagination/Paginator":94,"../panel/Pane":96,"../selection/SelectionModel":115,"./Operations":52,"./column/ActionColumn":53,"./column/CheckerColumn":55,"./renderer/GridRenderer":62}],52:[function(require,module,exports){
var Action, Button, Operations, PopoverSubmit, Select,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Action = require('./Action');

Button = require('../buttons/Button');

Select = require('../input/Select');

PopoverSubmit = require('./utils/PopoverSubmit');

Operations = (function(_super) {
  __extends(Operations, _super);

  Operations.prototype.componentCls = 'grid-operations';

  Operations.prototype.actions = null;

  Operations.prototype.select = null;

  Operations.prototype.submit = null;

  function Operations(grid, config) {
    this.grid = grid;
    Operations.__super__.constructor.call(this, config);
    this.actions = {};
  }

  Operations.prototype.addAction = function(name, config) {
    var action;
    action = new Action(config);
    action.name = name;
    this.actions[name] = action;
    return action;
  };

  Operations.prototype.doRender = function() {
    var action, name, _ref;
    this.select = new Select({
      id: this.id + '-operation'
    });
    this.select.render(this.el);
    _ref = this.actions;
    for (name in _ref) {
      action = _ref[name];
      this.select.addOption(action.name, action.text);
    }
    this.submit = new Button({
      text: miwo.tr("miwo.grid.execute"),
      handler: (function(_this) {
        return function() {
          action = _this.actions[_this.select.getValue()];
          _this.onOperationSubmit(action);
        };
      })(this)
    });
    this.submit.render(this.el);
  };

  Operations.prototype.onOperationSubmit = function(action) {
    if (!action.confirm) {
      this.grid.onOperationSubmit(action);
    } else {
      this.popover = new PopoverSubmit({
        renderTo: miwo.body,
        target: this.submit.el,
        title: miwo.tr("miwo.grid.confirm"),
        placement: action.confirmPlacement || 'top',
        onSubmit: (function(_this) {
          return function() {
            return _this.grid.onOperationSubmit(action);
          };
        })(this)
      });
      this.popover.show();
    }
  };

  return Operations;

})(Miwo.Component);

module.exports = Operations;


},{"../buttons/Button":6,"../input/Select":78,"./Action":50,"./utils/PopoverSubmit":64}],53:[function(require,module,exports){
var Action, ActionColumn, Button, Column, DropdownButton, PopoverSubmit,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Column = require('./Column');

Action = require('../Action');

Button = require('../../buttons/Button');

DropdownButton = require('../../buttons/DropdownButton');

PopoverSubmit = require('../utils/PopoverSubmit');

ActionColumn = (function(_super) {
  __extends(ActionColumn, _super);

  ActionColumn.prototype.xtype = 'actioncolumn';

  ActionColumn.prototype.actions = null;

  ActionColumn.prototype.align = 'right';

  ActionColumn.prototype.colCls = 'actions';

  ActionColumn.prototype.isActionColumn = true;

  ActionColumn.prototype.btnSize = null;

  ActionColumn.prototype.preventUpdateCell = true;

  ActionColumn.prototype.popover = null;

  ActionColumn.prototype.popoverCell = null;

  function ActionColumn() {
    this.actions = {};
  }

  ActionColumn.prototype.attachedContainer = function(grid) {
    if (!this.btnSize) {
      this.btnSize = grid.actionBtnSize || 'sm';
    }
  };

  ActionColumn.prototype.addAction = function(name, config) {
    var action;
    action = new Action(config);
    action.name = name;
    this.actions[name] = action;
    return action;
  };

  ActionColumn.prototype.removeAction = function(name) {
    delete this.actions[name];
    return this;
  };

  ActionColumn.prototype.onRenderCell = function(td, value, record, rowIndex) {
    var action, btn, buttons, inline, list, name, _i, _j, _len, _len1, _ref;
    inline = [];
    list = [];
    buttons = [];
    _ref = this.actions;
    for (name in _ref) {
      action = _ref[name];
      if (action.inline) {
        inline.push(action);
      } else {
        list.push(action);
      }
    }
    for (_i = 0, _len = inline.length; _i < _len; _i++) {
      action = inline[_i];
      btn = new Button({
        size: this.btnSize,
        name: action.name,
        text: action.text,
        handler: (function(_this) {
          return function(btn) {
            _this.onActionClick(_this.actions[btn.name], record, td, btn);
          };
        })(this)
      });
      btn.render(td);
      buttons.push(btn);
    }
    if (list.length > 0) {
      btn = new DropdownButton({
        size: this.btnSize
      });
      for (_j = 0, _len1 = list.length; _j < _len1; _j++) {
        action = list[_j];
        if (action.divider) {
          btn.addDivider();
        }
        btn.addItem(action.name, action.text, (function(_this) {
          return function(item) {
            _this.onActionClick(_this.actions[item.name], record, td, btn);
          };
        })(this));
      }
      btn.render(td);
      buttons.push(btn);
    }
    td.store('buttons', buttons);
  };

  ActionColumn.prototype.onDestroyCell = function(td) {
    var button, buttons, _i, _len;
    buttons = td.retrieve('buttons');
    for (_i = 0, _len = buttons.length; _i < _len; _i++) {
      button = buttons[_i];
      button.destroy();
    }
    td.eliminate('buttons');
    if (this.popoverCell && this.popoverCell === td) {
      this.closePopover();
    }
  };

  ActionColumn.prototype.onActionClick = function(action, record, td, btn) {
    if (!action.confirm) {
      this.getGrid().onActionSubmit(action, record);
    } else {
      this.closePopover();
      this.popover = new PopoverSubmit({
        renderTo: miwo.body,
        target: btn.el,
        title: miwo.tr("miwo.grid.confirm"),
        placement: action.confirmPlacement || 'left',
        onSubmit: (function(_this) {
          return function() {
            return _this.getGrid().onActionSubmit(action, record);
          };
        })(this),
        onCancel: (function(_this) {
          return function() {
            return _this.closePopover();
          };
        })(this)
      });
      this.popover.show();
      this.popoverCell = td;
    }
  };

  ActionColumn.prototype.closePopover = function() {
    if (!this.popover) {
      return;
    }
    this.popover.destroy();
    this.popover = null;
    this.popoverCell = null;
  };

  return ActionColumn;

})(Column);

module.exports = ActionColumn;


},{"../../buttons/Button":6,"../../buttons/DropdownButton":9,"../Action":50,"../utils/PopoverSubmit":64,"./Column":56}],54:[function(require,module,exports){
var CheckColumn, Column,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Column = require('./Column');

CheckColumn = (function(_super) {
  __extends(CheckColumn, _super);

  function CheckColumn() {
    return CheckColumn.__super__.constructor.apply(this, arguments);
  }

  CheckColumn.prototype.xtype = "checkcolumn";

  CheckColumn.prototype.align = "center";

  CheckColumn.prototype.width = 50;

  CheckColumn.prototype.iconTrue = "glyphicon glyphicon-ok";

  CheckColumn.prototype.iconFalse = "";

  CheckColumn.prototype.formatValue = function(value) {
    if (value) {
      return (this.iconTrue ? "<i class=\"" + this.iconTrue + "\"></i>" : "");
    } else {
      return (this.iconFalse ? "<i class=\"" + this.iconFalse + "\"></i>" : "");
    }
  };

  return CheckColumn;

})(Column);

module.exports = CheckColumn;


},{"./Column":56}],55:[function(require,module,exports){
var Checkbox, CheckerColumn, Column,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Column = require('./Column');

Checkbox = require('../../input/Checkbox');

CheckerColumn = (function(_super) {
  __extends(CheckerColumn, _super);

  function CheckerColumn() {
    return CheckerColumn.__super__.constructor.apply(this, arguments);
  }

  CheckerColumn.prototype.xtype = "checkercolumn";

  CheckerColumn.prototype.align = "center";

  CheckerColumn.prototype.width = 50;

  CheckerColumn.prototype.colCls = 'checker';

  CheckerColumn.prototype.isCheckerColumn = true;

  CheckerColumn.randId = 0;

  CheckerColumn.prototype.preventUpdateCell = true;

  CheckerColumn.prototype.onRenderCell = function(td, value, record) {
    var checkbox;
    checkbox = new Checkbox({
      id: this.getGrid().id.toString() + "-checker-" + (record.id || 'rnd' + (CheckerColumn.randId++))
    });
    checkbox.render(td);
    checkbox.on('change', (function(_this) {
      return function(checker, value) {
        _this.emit("rowcheck", _this, td.getParent('tr'), value);
      };
    })(this));
    td.set("disableclick", true);
    td.store('checker', checkbox);
  };

  CheckerColumn.prototype.onDestroyCell = function(td) {
    var checkbox;
    checkbox = td.retrieve('checker');
    checkbox.destroy();
    td.eliminate('checker');
  };

  CheckerColumn.prototype.onRenderHeader = function(th) {
    var checkbox;
    checkbox = new Checkbox({
      id: this.getGrid().id.toString() + '-checker-all'
    });
    checkbox.render(th);
    checkbox.on('change', (function(_this) {
      return function(checker, value) {
        _this.emit("headercheck", _this, value);
      };
    })(this));
    th.store('checker', checkbox);
  };

  CheckerColumn.prototype.getRowChecker = function(record) {
    var tr, _i, _len, _ref;
    _ref = this.getGrid().tbodyEl.getChildren();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tr = _ref[_i];
      if (tr.retrieve('record') === record) {
        return tr.getElement('td.grid-col-checker').retrieve('checker');
      }
    }
    return null;
  };

  CheckerColumn.prototype.getHeadChecker = function() {
    return this.getGrid().headerEl.getElement('tr:first-child th.grid-col-checker').retrieve('checker');
  };

  CheckerColumn.prototype.setCheckedRow = function(record, checked) {
    this.getRowChecker(record).setChecked(checked);
  };

  CheckerColumn.prototype.setDisabledRow = function(record, disabled) {
    this.getRowChecker(record).setDisabled(disabled);
  };

  CheckerColumn.prototype.setCheckedHeader = function(checked) {
    this.getHeadChecker().setChecked(checked);
  };

  return CheckerColumn;

})(Column);

module.exports = CheckerColumn;


},{"../../input/Checkbox":68,"./Column":56}],56:[function(require,module,exports){
var Column,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Column = (function(_super) {
  __extends(Column, _super);

  function Column() {
    return Column.__super__.constructor.apply(this, arguments);
  }

  Column.prototype.isColumn = true;

  Column.prototype.text = '';

  Column.prototype.title = '';

  Column.prototype.visible = true;

  Column.prototype.sortable = false;

  Column.prototype.renderer = null;

  Column.prototype.align = 'left';

  Column.prototype.emptyText = '';

  Column.prototype.widthType = 'auto';

  Column.prototype.width = null;

  Column.prototype.fit = null;

  Column.prototype.dataIndex = '';

  Column.prototype.titleIndex = null;

  Column.prototype.afterInit = function() {
    Column.__super__.afterInit.call(this);
    if (this.fit) {
      this.widthType = 'fit';
      delete this.fit;
    }
  };

  Column.prototype.getGrid = function() {
    return this.container;
  };

  Column.prototype.getDataIndex = function() {
    return this.dataIndex || this.name;
  };

  Column.prototype.renderHeader = function(value, record) {
    return this.text;
  };

  Column.prototype.renderValue = function(value, record) {
    var html;
    if (this.renderer) {
      html = this.renderer(value, record);
    } else {
      if (value === '' || value === void 0 || value === null) {
        html = this.emptyText;
      } else {
        html = this.formatValue(value, record);
      }
    }
    return html;
  };

  Column.prototype.formatValue = function(value, record) {
    return value;
  };

  Column.prototype.afterRender = function(renderer, grid) {};

  return Column;

})(Miwo.Component);

module.exports = Column;


},{}],57:[function(require,module,exports){
var Column, DateColumn,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Column = require('./Column');

DateColumn = (function(_super) {
  __extends(DateColumn, _super);

  function DateColumn() {
    return DateColumn.__super__.constructor.apply(this, arguments);
  }

  DateColumn.prototype.xtype = 'datecolumn';

  DateColumn.prototype.align = 'right';

  DateColumn.prototype.emptyText = 'N/A';

  DateColumn.prototype.format = '%c';

  DateColumn.prototype.formatValue = function(value, record) {
    if (Type.isDate(value)) {
      if (value.format) {
        return value.format(this.format);
      } else {
        return value.toDateString();
      }
    } else {
      return value;
    }
  };

  return DateColumn;

})(Column);

module.exports = DateColumn;


},{"./Column":56}],58:[function(require,module,exports){
var Column, NumberColumn,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Column = require('./Column');

NumberColumn = (function(_super) {
  __extends(NumberColumn, _super);

  function NumberColumn() {
    return NumberColumn.__super__.constructor.apply(this, arguments);
  }

  NumberColumn.prototype.xtype = 'numbercolumn';

  NumberColumn.prototype.align = 'right';

  return NumberColumn;

})(Column);

module.exports = NumberColumn;


},{"./Column":56}],59:[function(require,module,exports){
var Column, TextColumn,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Column = require('./Column');

TextColumn = (function(_super) {
  __extends(TextColumn, _super);

  function TextColumn() {
    return TextColumn.__super__.constructor.apply(this, arguments);
  }

  TextColumn.prototype.xtype = 'textcolumn';

  return TextColumn;

})(Column);

module.exports = TextColumn;


},{"./Column":56}],60:[function(require,module,exports){
var Column, ToggleColumn, ToggleInput,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Column = require('./Column');

ToggleInput = require('../../input/Toggle');

ToggleColumn = (function(_super) {
  __extends(ToggleColumn, _super);

  function ToggleColumn() {
    return ToggleColumn.__super__.constructor.apply(this, arguments);
  }

  ToggleColumn.prototype.xtype = 'togglecolumn';

  ToggleColumn.prototype.align = 'center';

  ToggleColumn.prototype.width = 110;

  ToggleColumn.prototype.onState = void 0;

  ToggleColumn.prototype.offState = void 0;

  ToggleColumn.prototype.onText = void 0;

  ToggleColumn.prototype.offText = void 0;

  ToggleColumn.prototype.size = void 0;

  ToggleColumn.prototype.renderValue = function(value, row) {
    var input;
    input = new ToggleInput({
      value: value,
      onState: this.onState,
      offState: this.offState,
      onText: this.onText,
      offText: this.offText,
      size: this.size
    });
    input.on('beforechange', (function(_this) {
      return function() {
        _this.emit('beforechange', _this, input, row);
      };
    })(this));
    input.on('change', (function(_this) {
      return function() {
        row.set(_this.getDataIndex(), input.getValue());
      };
    })(this));
    return input;
  };

  return ToggleColumn;

})(Column);

module.exports = ToggleColumn;


},{"../../input/Toggle":82,"./Column":56}],61:[function(require,module,exports){
var Grid, exports;

exports = {
  Grid: require('./Grid'),
  Action: require('./Action'),
  Operations: require('./Operations'),
  column: {
    Column: require('./column/Column'),
    NumberColumn: require('./column/NumberColumn'),
    DateColumn: require('./column/DateColumn'),
    CheckColumn: require('./column/CheckColumn'),
    CheckerColumn: require('./column/CheckerColumn'),
    TextColumn: require('./column/TextColumn'),
    ToggleColumn: require('./column/ToggleColumn'),
    ActionColumn: require('./column/ActionColumn')
  },
  renderer: {
    GridRenderer: require('./renderer/GridRenderer'),
    WidthManager: require('./renderer/WidthManager')
  },
  utils: {
    PopoverSubmit: require('./utils/PopoverSubmit')
  }
};

Grid = exports.Grid;

Grid.registerColumn('numberColumn', exports.column.NumberColumn);

Grid.registerColumn('dateColumn', exports.column.DateColumn);

Grid.registerColumn('checkColumn', exports.column.CheckColumn);

Grid.registerColumn('textColumn', exports.column.TextColumn);

Grid.registerColumn('toggleColumn', exports.column.ToggleColumn);

module.exports = exports;


},{"./Action":50,"./Grid":51,"./Operations":52,"./column/ActionColumn":53,"./column/CheckColumn":54,"./column/CheckerColumn":55,"./column/Column":56,"./column/DateColumn":57,"./column/NumberColumn":58,"./column/TextColumn":59,"./column/ToggleColumn":60,"./renderer/GridRenderer":62,"./renderer/WidthManager":63,"./utils/PopoverSubmit":64}],62:[function(require,module,exports){
var GridRenderer, WidthManager,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

WidthManager = require('./WidthManager');

GridRenderer = (function(_super) {
  __extends(GridRenderer, _super);

  GridRenderer.prototype.dblclickdelay = 0;

  GridRenderer.prototype.autoSync = true;

  GridRenderer.prototype.autoSyncInterval = null;

  GridRenderer.prototype.grid = null;

  GridRenderer.prototype.columns = null;

  GridRenderer.prototype.thead = null;

  GridRenderer.prototype.tfoot = null;

  GridRenderer.prototype.tbody = null;

  GridRenderer.prototype.tfilters = null;

  GridRenderer.prototype.widthManager = null;

  GridRenderer.prototype.cellClickTimeoutId = null;

  function GridRenderer(grid, config) {
    this.grid = grid;
    GridRenderer.__super__.constructor.call(this, config);
    this.columns = [];
    this.widthManager = new WidthManager(this, this.widthManager);
    if (this.autoSyncInterval) {
      this.syncRowsInterval = setInterval((function(_this) {
        return function() {
          if (_this.requiredSyncRows) {
            _this.syncRows();
          }
        };
      })(this), this.autoSyncInterval);
    }
    return;
  }

  GridRenderer.prototype.render = function() {
    var bodyEl, column, grid, tbodyTable, theadTable, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    grid = this.grid;
    grid.on("parentshown", this.bound('onGridParentShown'));
    grid.on("selectionchange", this.bound('onSelectionChanged'));
    _ref = grid.getColumns();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      column = _ref[_i];
      if (column.isCheckerColumn) {
        this.columns.push(column);
      }
    }
    _ref1 = grid.getColumns();
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      column = _ref1[_j];
      if (!column.isCheckerColumn) {
        this.columns.push(column);
      }
    }
    theadTable = new Element("table");
    theadTable.inject(grid.headerEl);
    this.renderHeader(theadTable);
    this.renderFilters(theadTable);
    tbodyTable = new Element("table");
    tbodyTable.inject(grid.bodyEl);
    bodyEl = grid.bodyEl;
    if (grid.stripe) {
      bodyEl.addClass('grid-stripe');
    }
    if (grid.condensed) {
      bodyEl.addClass('grid-condensed');
    }
    if (grid.nowrap) {
      bodyEl.addClass('grid-nowrap');
    }
    if (grid.rowclickable) {
      bodyEl.addClass('grid-rowclickable');
    }
    if (grid.verticalAlign) {
      bodyEl.addClass('grid-align-' + grid.verticalAlign);
    }
    if (grid.size) {
      bodyEl.addClass('grid-' + grid.size);
    }
    this.renderBody(tbodyTable);
    this.renderFooter(grid.footerEl);
    grid.emit("render", grid);
    _ref2 = this.columns;
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      column = _ref2[_k];
      column.afterRender();
    }
  };

  GridRenderer.prototype.afterRender = function() {
    this.widthManager.actualize();
  };

  GridRenderer.prototype.refresh = function() {
    this.destroyRows(this.tbody);
    this.renderBody(this.tbody);
    this.grid.onRefresh();
    this.widthManager.actualize();
  };

  GridRenderer.prototype.setAutoSync = function(autoSync) {
    this.autoSync = autoSync;
    if (this.autoSync) {
      this.syncRows();
    }
  };

  GridRenderer.prototype.recordAdded = function(record) {
    var tr;
    tr = this.renderRow(this.tbody, record, this.tbody.getChildren().length);
    if (this.autoSync) {
      this.requireSyncRows();
    }
    this.widthManager.actualize(tr);
  };

  GridRenderer.prototype.recordRemoved = function(record) {
    var tr;
    tr = this.getRowByRecord(record);
    if (tr) {
      this.destroyRow(tr);
      if (this.autoSync) {
        this.requireSyncRows();
      }
    }
  };

  GridRenderer.prototype.recordUpdated = function(record) {
    var tr;
    tr = this.getRowByRecord(record);
    if (tr) {
      this.updateRow(tr, record);
    } else {
      this.renderRow(this.tbody, record);
    }
    if (this.autoSync) {
      this.requireSyncRows();
    }
  };

  GridRenderer.prototype.renderHeader = function(theadTable) {
    var column, th, thead, tr, _i, _len, _ref;
    thead = new Element("thead", {
      cls: "grid-headers"
    });
    thead.inject(theadTable);
    this.thead = thead;
    tr = new Element("tr").inject(thead);
    _ref = this.columns;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      column = _ref[_i];
      th = new Element("th").inject(tr);
      th.addClass('text-' + column.align);
      if (column.colCls) {
        th.addClass('grid-col-' + column.colCls);
      }
      th.set("column", column.name);
      th.set("html", '<span title="' + (column.title || column.text) + '" data-toggle="tooltip">' + column.renderHeader() + '</span>');
      if (!column.visible) {
        th.setVisible(false);
      }
      if (column.onRenderHeader) {
        column.onRenderHeader(th);
      }
      this.grid.emit("headerrender", this.grid, th, column);
    }
  };

  GridRenderer.prototype.renderFilters = function(theadTable) {};

  GridRenderer.prototype.renderBody = function(tbodyTable) {
    var grid, groups, name, record, records, tbody, value, _i, _len;
    grid = this.grid;
    records = grid.getRecords();
    tbody = new Element("tbody", {
      cls: "grid-rows"
    });
    tbody.inject(tbodyTable);
    tbody.on("click:relay(tr.grid-row-data td)", this.bound('onCellClick'));
    tbody.on("dblclick:relay(tr.grid-row-data td)", this.bound('onCellDblClick'));
    grid.tbodyEl = this.tbody = tbody;
    if (grid.groupBy) {
      groups = {};
      for (_i = 0, _len = records.length; _i < _len; _i++) {
        record = records[_i];
        value = record.get(grid.groupBy);
        if (!groups[value]) {
          groups[value] = [];
        }
        groups[value].push(record);
      }
      grid.emit('beforesync', grid, groups);
      for (name in groups) {
        records = groups[name];
        this.renderGroup(tbody, name);
        this.renderRows(tbody, records);
      }
    } else {
      this.renderRows(tbody, records);
    }
    this.reindexRows();
    grid.emit('aftersync', grid);
  };

  GridRenderer.prototype.renderGroup = function(tbody, name) {
    var td, tr;
    tr = new Element("tr", {
      cls: "grid-row-group",
      parent: tbody,
      'data-group': name
    });
    tr.store("rowid", 'group-' + name);
    td = new Element("td", {
      html: name,
      colspan: this.columns.length,
      parent: tr
    });
    this.grid.emit("grouprender", this.grid, td, name);
  };

  GridRenderer.prototype.renderRows = function(tbody, records) {
    var index, record, _i, _len;
    for (index = _i = 0, _len = records.length; _i < _len; index = ++_i) {
      record = records[index];
      this.renderRow(tbody, record, index);
    }
  };

  GridRenderer.prototype.renderRow = function(tbody, record, index) {
    var column, tr, _i, _len, _ref;
    tr = new Element("tr", {
      cls: "grid-row-data"
    });
    tr.store("record", record);
    tr.store("rowid", record.getId());
    tr.set("data-row", record.getId());
    tr.inject(tbody);
    _ref = this.columns;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      column = _ref[_i];
      this.renderCell(tr, record, column);
    }
    this.grid.emit("rowrender", this.grid, tr, record, index);
    return tr;
  };

  GridRenderer.prototype.updateRow = function(tr, record) {
    var cells, column, td, _i, _j, _len, _len1, _ref, _ref1;
    if (!tr.retrieve("rowid")) {
      tr.set("data-row", record.getId());
      tr.store("rowid", record.getId());
    }
    cells = {};
    _ref = tr.getElements('td');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      td = _ref[_i];
      cells[td.get('column')] = td;
    }
    _ref1 = this.columns;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      column = _ref1[_j];
      if (!column.preventUpdateCell) {
        this.updateCell(cells[column.name], record, column);
      }
    }
    this.grid.emit("rowrender", this.grid, tr, record);
  };

  GridRenderer.prototype.renderCell = function(tr, record, column) {
    var td;
    td = new Element("td").inject(tr);
    if (column.colCls) {
      td.addClass('grid-col-' + column.colCls);
    }
    td.addClass("text-" + column.align);
    td.store("dataIndex", column.getDataIndex());
    td.set("column", column.name);
    if (column.titleIndex) {
      td.set("title", record.get(column.titleIndex));
    }
    if (!column.visible) {
      td.setVisible(false);
    }
    this.updateCell(td, record, column);
  };

  GridRenderer.prototype.updateCell = function(td, record, column) {
    var dataIndex, rendered, value;
    dataIndex = column.getDataIndex();
    value = record.get(dataIndex);
    rendered = column.renderValue(value, record);
    if (Type.isObject(rendered) && rendered.isComponent) {
      td.empty();
      rendered.render(td);
    } else {
      td.set('html', rendered);
    }
    if (column.onRenderCell) {
      column.onRenderCell(td, value, record);
    }
    this.grid.emit('cellrender', this.grid, td, value, record);
  };

  GridRenderer.prototype.destroyRows = function(tbody) {
    var tr, _i, _len, _ref;
    _ref = tbody.getElements("tr");
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tr = _ref[_i];
      if (tr.hasClass('grid-row-group')) {
        tr.destroy();
      } else {
        this.destroyRow(tr);
      }
    }
  };

  GridRenderer.prototype.destroyRow = function(tr) {
    var record, td, _i, _len, _ref;
    record = tr.retrieve('record');
    tr.eliminate('record');
    tr.eliminate('rowid');
    this.grid.emit('rowdestroy', this.grid, tr);
    _ref = tr.getElements('td');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      td = _ref[_i];
      this.destroyCell(td, record);
    }
    tr.destroy();
  };

  GridRenderer.prototype.destroyCell = function(td, record) {
    var column, name;
    name = td.get('column');
    column = this.grid.get(name);
    if (column.onDestroyCell) {
      column.onDestroyCell(td, record);
    }
    this.grid.emit('celldestroy', this.grid, td);
    td.eliminate('dataIndex');
  };

  GridRenderer.prototype.requireSyncRows = function() {
    if (this.syncRowsInterval) {
      this.requiredSyncRows = true;
    } else {
      this.syncRows();
    }
  };

  GridRenderer.prototype.syncRows = function() {
    var changed, grid, groupName, groupRow, groups, i, id, len, limit, name, positions, rec, record, records, row, rows, value, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _n, _ref, _ref1;
    grid = this.grid;
    records = grid.getRecords();
    this.requiredSyncRows = false;
    if (grid.groupBy) {
      groups = {};
      for (_i = 0, _len = records.length; _i < _len; _i++) {
        record = records[_i];
        value = record.get(grid.groupBy);
        if (!groups[value]) {
          groups[value] = [];
        }
        groups[value].push(record);
      }
    }
    grid.emit('beforesync', grid, groups);
    if (!grid.groupBy) {
      positions = [];
      for (_j = 0, _len1 = records.length; _j < _len1; _j++) {
        rec = records[_j];
        positions.push(rec.getId());
      }
    } else {
      for (name in groups) {
        records = groups[name];
        groupRow = this.tbody.getChildren("tr.grid-row-group[data-group='" + name + "']")[0];
        if (!groupRow) {
          this.renderGroup(this.tbody, name);
        }
      }
      _ref = this.tbody.getChildren('tr.grid-row-group');
      for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
        groupRow = _ref[_k];
        groupName = groupRow.get('data-group');
        if (!groups[groupName]) {
          groupRow.destroy();
        }
      }
      positions = [];
      for (name in groups) {
        records = groups[name];
        positions.push('group-' + name);
        for (_l = 0, _len3 = records.length; _l < _len3; _l++) {
          record = records[_l];
          positions.push(record.getId());
        }
      }
    }
    grid.emit('sync', grid, positions);
    rows = {};
    _ref1 = this.tbody.getChildren();
    for (_m = 0, _len4 = _ref1.length; _m < _len4; _m++) {
      row = _ref1[_m];
      rows[row.retrieve('rowid')] = row;
    }
    changed = false;
    len = positions.length;
    limit = Math.round(len / 2);
    for (i = _n = 0; _n <= limit; i = _n += +1) {
      id = positions.shift();
      row = rows[id];
      if (row) {
        if (this.syncRow(row, i)) {
          changed = true;
        }
      }
      id = positions.pop();
      row = rows[id];
      if (row) {
        if (this.syncRow(row, len - i - 1)) {
          changed = true;
        }
      }
    }
    if (changed) {
      this.reindexRows();
    }
    grid.emit('aftersync', grid);
  };

  GridRenderer.prototype.syncRow = function(row, position) {
    var prevRow;
    if (row.getIndex() === position) {
      return false;
    }
    if (position === 0) {
      row.inject(this.tbody, 'top');
    } else {
      prevRow = this.tbody.getChildren('tr:nth-child("' + position + '")')[0];
      row.inject(prevRow, 'after');
    }
    return true;
  };

  GridRenderer.prototype.reindexRows = function() {
    var index, row, _i, _len, _ref;
    index = 0;
    _ref = this.tbody.getChildren('tr.grid-row-data');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      row = _ref[_i];
      row.set('row-index', index++);
    }
  };

  GridRenderer.prototype.renderFooter = function(footerEl) {
    var hasSelection, paginator, showFooter;
    showFooter = false;
    if (this.grid.paginator) {
      paginator = this.grid.get('paginator');
      paginator.el.addClass('grid-paginator');
      paginator.render(footerEl);
    }
    if (this.grid.operations) {
      showFooter = true;
      hasSelection = this.grid.getSelectionModel().hasSelection();
      this.grid.operations.render(footerEl);
      this.grid.operations.setVisible(hasSelection);
    }
    if (!showFooter) {
      footerEl.hide();
      this.grid.el.addClass('grid-nofooter');
    }
  };

  GridRenderer.prototype.onSelectionChanged = function(grid, sm, selection) {
    var hasSelection;
    hasSelection = selection.length > 0;
    if (this.grid.operations) {
      this.grid.operations.setVisible(hasSelection);
    }
  };

  GridRenderer.prototype.onCellClick = function(e, td) {
    if (td.get('disableclick')) {
      return;
    }
    if (e.target.tagName === 'A') {
      return;
    }
    clearTimeout(this.cellClickTimeoutId);
    this.cellClickTimeoutId = ((function(_this) {
      return function() {
        var info;
        info = _this.getCellInfo(td);
        _this.grid.emit('cellclick', _this.grid, td, info.record, info, e);
        _this.grid.emit('rowclick', _this.grid, info.record, info, e);
      };
    })(this)).delay(this.dblclickdelay);
  };

  GridRenderer.prototype.onCellDblClick = function(e, td) {
    var info;
    if (td.get('disableclick')) {
      return;
    }
    if (e.target.tagName === "A") {
      return;
    }
    clearTimeout(this.cellClickTimeoutId);
    info = this.getCellInfo(td);
    this.grid.emit('celldblclick', this.grid, td, info.record, info, e);
    this.grid.emit('rowdblclick', this.grid, info.record, info, e);
  };

  GridRenderer.prototype.getCellInfo = function(td) {
    var dataIndex, record, tr;
    tr = td.getParent();
    dataIndex = td.retrieve('dataIndex');
    record = tr.retrieve('record');
    return {
      tr: tr,
      cellIndex: td.getIndex(),
      rowIndex: tr.getIndex(),
      record: record,
      value: record.get(dataIndex),
      dataIndex: dataIndex,
      column: td.get('column')
    };
  };

  GridRenderer.prototype.getRowById = function(id) {
    var tr, _i, _len, _ref;
    _ref = this.tbody.getChildren('tr');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tr = _ref[_i];
      if (tr.retrieve('rowid') === id) {
        return tr;
      }
    }
    return null;
  };

  GridRenderer.prototype.getRowByRecord = function(record) {
    var tr, _i, _len, _ref;
    _ref = this.tbody.getChildren('tr');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tr = _ref[_i];
      if (tr.retrieve('record') === record) {
        return tr;
      }
    }
    return null;
  };

  GridRenderer.prototype.onGridParentShown = function() {
    var wm;
    wm = this.widthManager;
    wm.widths = null;
    wm.actualize();
  };

  GridRenderer.prototype.doDestroy = function() {
    this.widthManager.destroy();
    this.grid.un('parentshown', this.bound('onGridParentShown'));
    this.grid.un('selectionchange', this.bound('onSelectionChanged'));
    this.destroyRows(this.tbody);
    this.grid = this.tbody = this.tfilters = this.thead = this.tfoot = null;
    GridRenderer.__super__.doDestroy.call(this);
  };

  return GridRenderer;

})(Miwo.Object);

module.exports = GridRenderer;


},{"./WidthManager":63}],63:[function(require,module,exports){
var WidthManager,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

WidthManager = (function(_super) {
  __extends(WidthManager, _super);

  WidthManager.prototype.defaultFitWidth = 100;

  WidthManager.prototype.renderer = null;

  WidthManager.prototype.widths = null;

  function WidthManager(renderer, config) {
    this.renderer = renderer;
    WidthManager.__super__.constructor.call(this, config);
    window.on("resize", this.bound("onWindowResize"));
    return;
  }

  WidthManager.prototype.actualize = function(tr) {
    var row, _i, _len, _ref;
    if (!this.widths) {
      this.widths = this.detectWidths();
    }
    if (tr) {
      this.actualizeRow(tr, this.widths);
    } else {
      this.actualizeRow(this.renderer.thead.getChildren('tr')[0], this.widths);
      _ref = this.renderer.tbody.getChildren("tr.grid-row-data");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        row = _ref[_i];
        this.actualizeRow(row, this.widths);
      }
    }
  };

  WidthManager.prototype.actualizeRow = function(tr, widths) {
    var name, width;
    for (name in widths) {
      width = widths[name];
      if (width !== null) {
        tr.getChildren("[column=\"" + name + "\"]").setStyles({
          width: width,
          maxWidth: width
        });
      }
    }
  };

  WidthManager.prototype.onWindowResize = function() {
    this.widths = null;
    this.actualize();
  };

  WidthManager.prototype.detectWidths = function() {
    var column, columns, fitWidth, freeWidth, isFit, name, renderer, totalFit, widths, wildCount, _i, _j, _k, _len, _len1, _len2, _ref;
    renderer = this.renderer;
    freeWidth = renderer.grid.bodyEl.getWidth();
    totalFit = 0;
    widths = {};
    isFit = false;
    columns = [];
    _ref = renderer.columns;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      column = _ref[_i];
      if (column.isVisible()) {
        columns.push(column);
        if (column.widthType === "fit") {
          isFit = true;
        }
      }
    }
    wildCount = 0;
    for (_j = 0, _len1 = columns.length; _j < _len1; _j++) {
      column = columns[_j];
      name = column.name;
      if (column.widthType === "auto") {
        if (column.width) {
          widths[name] = column.width;
        } else if (isFit) {
          widths[name] = this.defaultFitWidth;
        } else {
          widths[name] = null;
          wildCount++;
        }
        if (widths[name]) {
          freeWidth -= widths[name];
        }
      }
      if (column.widthType === "fit") {
        widths[name] = null;
        totalFit += (column.width ? column.width : 1);
      }
    }
    for (_k = 0, _len2 = columns.length; _k < _len2; _k++) {
      column = columns[_k];
      if (column.widthType === "fit") {
        fitWidth = ((freeWidth * column.width) / totalFit).round();
        if (fitWidth < column.minWidth) {
          widths[column.name] = column.minWidth;
          freeWidth -= column.minWidth;
        } else {
          widths[column.name] = fitWidth;
        }
      } else if (column.widthType === "auto") {
        if (widths[column.name] === null) {
          widths[column.name] = (freeWidth / wildCount).round();
        }
      }
    }
    return widths;
  };

  WidthManager.prototype.doDestroy = function() {
    window.un("resize", this.bound("onWindowResize"));
    this.renderer = null;
    WidthManager.__super__.doDestroy.call(this);
  };

  return WidthManager;

})(Miwo.Object);

module.exports = WidthManager;


},{}],64:[function(require,module,exports){
var Button, Popover, PopoverSubmit,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Popover = require('../../tip/Popover');

Button = require('../../buttons/Button');

PopoverSubmit = (function(_super) {
  __extends(PopoverSubmit, _super);

  function PopoverSubmit() {
    return PopoverSubmit.__super__.constructor.apply(this, arguments);
  }

  PopoverSubmit.prototype.onSubmit = null;

  PopoverSubmit.prototype.onCancel = null;

  PopoverSubmit.prototype.width = 145;

  PopoverSubmit.prototype.doInit = function() {
    var buttonNo, buttonYes;
    PopoverSubmit.__super__.doInit.apply(this, arguments);
    this.el.addClass('grid-popover-submit');
    buttonYes = new Button({
      text: 'Yes',
      type: 'primary',
      handler: (function(_this) {
        return function() {
          if (_this.onSubmit) {
            _this.onSubmit();
          }
          _this.close();
        };
      })(this)
    });
    this.add('yes', buttonYes);
    buttonNo = new Button({
      text: 'No',
      type: 'default',
      handler: (function(_this) {
        return function() {
          if (_this.onCancel) {
            _this.onCancel();
          }
          _this.close();
        };
      })(this)
    });
    this.add('no', buttonNo);
  };

  return PopoverSubmit;

})(Popover);

module.exports = PopoverSubmit;


},{"../../buttons/Button":6,"../../tip/Popover":123}],65:[function(require,module,exports){
miwo.registerExtension('miwo-ui', require('./DiExtension'));

miwo.translator.setTranslates('en', 'miwo', require('./translates'));

Miwo.ui = {};

Miwo.drag = require('./drag');

Miwo.notify = require('./notify');

Miwo.buttons = require('./buttons');

Miwo.navbar = require('./navbar');

Miwo.dropdown = require('./dropdown');

Miwo.input = require('./input');

Miwo.picker = require('./picker');

Miwo.pagination = require('./pagination');

Miwo.form = require('./form');

Miwo.panel = require('./panel');

Miwo.window = require('./window');

Miwo.tabs = require('./tabs');

Miwo.selection = require('./selection');

Miwo.grid = require('./grid');

Miwo.tip = require('./tip');

Miwo.mask = require('./mask');

Miwo.progress = require('./progress');

Miwo.ui.utils = require('./utils');

Miwo.Form = Miwo.form.container.Form;

Miwo.Window = Miwo.window.Window;

Miwo.FormWindow = Miwo.window.FormWindow;

Miwo.Tabs = Miwo.tabs.Tabs;

Miwo.Grid = Miwo.grid.Grid;

Miwo.Pane = Miwo.panel.Pane;


},{"./DiExtension":1,"./buttons":11,"./drag":14,"./dropdown":19,"./form":46,"./grid":61,"./input":83,"./mask":86,"./navbar":89,"./notify":91,"./pagination":95,"./panel":98,"./picker":107,"./progress":111,"./selection":117,"./tabs":120,"./tip":127,"./translates":128,"./utils":132,"./window":138}],66:[function(require,module,exports){
var BaseInput,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseInput = (function(_super) {
  __extends(BaseInput, _super);

  function BaseInput() {
    return BaseInput.__super__.constructor.apply(this, arguments);
  }

  BaseInput.prototype.isInput = true;

  BaseInput.prototype.getInputEl = function() {
    return this.inputEl;
  };

  BaseInput.prototype.getInputId = function(name) {
    if (name == null) {
      name = 'input';
    }
    return this.id + '-' + name;
  };

  BaseInput.prototype.afterRender = function() {
    BaseInput.__super__.afterRender.call(this);
    if (!this.focusEl) {
      this.focusEl = this.getInputEl();
    }
    this.setDisabled(this.disabled);
  };

  return BaseInput;

})(Miwo.Component);

module.exports = BaseInput;


},{}],67:[function(require,module,exports){
var BaseInput, BaseTextInput,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseInput = require('./BaseInput');

BaseTextInput = (function(_super) {
  __extends(BaseTextInput, _super);

  function BaseTextInput() {
    return BaseTextInput.__super__.constructor.apply(this, arguments);
  }

  BaseTextInput.prototype.el = 'input';

  BaseTextInput.prototype.disabled = false;

  BaseTextInput.prototype.readonly = false;

  BaseTextInput.prototype.placeholder = null;

  BaseTextInput.prototype.tabindex = 0;

  BaseTextInput.prototype.inputName = null;

  BaseTextInput.prototype.componentCls = 'form-control';

  BaseTextInput.prototype.getInputEl = function() {
    return this.el;
  };

  BaseTextInput.prototype.setValue = function(value) {
    this.el.set("value", value);
  };

  BaseTextInput.prototype.getValue = function() {
    return this.el.get("value");
  };

  BaseTextInput.prototype.setDisabled = function(disabled) {
    this.disabled = disabled;
    this.el.set("disabled", this.disabled);
  };

  BaseTextInput.prototype.setReadonly = function(readonly) {
    this.readonly = readonly;
    this.el.set("readonly", this.readonly);
  };

  BaseTextInput.prototype.setPlaceholder = function(placeholder) {
    this.placeholder = placeholder;
    this.el.set("placeholder", this.placeholder);
  };

  BaseTextInput.prototype.doRender = function() {
    this.el.set("tabindex", this.tabindex);
    this.el.set("name", this.inputName || this.name);
    if (this.placeholder !== null) {
      this.el.set("placeholder", this.placeholder);
    }
    if (this.readonly) {
      this.el.set("readonly", this.readonly);
    }
    if (this.disabled) {
      this.el.set("disabled", this.disabled);
    }
  };

  return BaseTextInput;

})(BaseInput);

module.exports = BaseTextInput;


},{"./BaseInput":66}],68:[function(require,module,exports){
var BaseInput, Checkbox,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseInput = require('./BaseInput');

Checkbox = (function(_super) {
  __extends(Checkbox, _super);

  function Checkbox() {
    return Checkbox.__super__.constructor.apply(this, arguments);
  }

  Checkbox.prototype.xtype = 'checkboxinput';

  Checkbox.prototype.baseCls = 'checkbox';

  Checkbox.prototype.label = '';

  Checkbox.prototype.disabled = false;

  Checkbox.prototype.checked = false;

  Checkbox.prototype.inputEl = null;

  Checkbox.prototype.iconEl = null;

  Checkbox.prototype.checkerEl = null;

  Checkbox.prototype.labelEl = null;

  Checkbox.prototype.textEl = null;

  Checkbox.prototype.doRender = function() {
    this.el.set('html', "<label miwo-reference=\"labelEl\" for='" + (this.getInputId()) + "'>\n	<span miwo-reference=\"checkerEl\" class=\"checker\" tabindex=\"0\">\n		<i miwo-reference=\"iconEl\" class=\"fa\"></i>\n		<input miwo-reference=\"inputEl\" type=\"checkbox\" id='" + (this.getInputId()) + "' tabindex=\"-1\">\n	</span>\n	<span miwo-reference=\"textEl\" class=\"label-text\">" + this.label + "</span>\n</label>");
  };

  Checkbox.prototype.afterRender = function() {
    Checkbox.__super__.afterRender.call(this);
    this.inputEl.on('change', (function(_this) {
      return function() {
        if (_this.disabled) {
          return;
        }
        _this.setChecked(_this.getValue());
        _this.emit('change', _this, _this.getValue());
        _this.setFocus();
      };
    })(this));
    this.inputEl.on('focus', (function(_this) {
      return function() {
        if (_this.disabled) {
          return;
        }
        _this.setFocus();
      };
    })(this));
    this.checkerEl.on('focus', (function(_this) {
      return function() {
        if (_this.disabled) {
          return;
        }
        _this.setFocus();
      };
    })(this));
    this.checkerEl.on('keydown', (function(_this) {
      return function(e) {
        if (_this.disabled) {
          return;
        }
        if (e.key === 'space' || e.key === 'enter') {
          e.stop();
          _this.setChecked(!_this.checked);
        }
      };
    })(this));
    this.inputEl.on('blur', (function(_this) {
      return function() {
        if (_this.disabled) {
          return;
        }
        _this.blur();
      };
    })(this));
    this.focusEl = this.checkerEl;
    this.setChecked(this.checked);
  };

  Checkbox.prototype.blur = function() {
    Checkbox.__super__.blur.call(this);
    this.el.removeClass('focus');
  };

  Checkbox.prototype.setChecked = function(checked) {
    this.checked = checked;
    this.el.toggleClass('checked', this.checked);
    this.inputEl.set('checked', this.checked);
    this.updateIconCls();
  };

  Checkbox.prototype.isChecked = function() {
    return this.checked;
  };

  Checkbox.prototype.setDisabled = function(disabled) {
    this.disabled = disabled;
    this.el.toggleClass('disabled', this.disabled);
    this.inputEl.set('disabled', this.disabled);
    this.checkerEl.set('tabindex', -this.disabled);
    this.updateIconCls();
  };

  Checkbox.prototype.updateIconCls = function() {
    this.iconEl.removeClass('fa-check-square-o').removeClass('fa-square-o').removeClass('fa-check-square').removeClass('fa-square');
    if (this.disabled) {
      this.iconEl.addClass(this.checked ? 'fa-check-square' : 'fa-square');
    } else {
      this.iconEl.addClass(this.checked ? 'fa-check-square-o' : 'fa-square-o');
    }
  };

  Checkbox.prototype.setLabel = function(label) {
    this.textEl.set('text', label);
  };

  Checkbox.prototype.setValue = function(checked) {
    this.setChecked(!!checked);
  };

  Checkbox.prototype.getValue = function() {
    return this.isChecked();
  };

  return Checkbox;

})(BaseInput);

module.exports = Checkbox;


},{"./BaseInput":66}],69:[function(require,module,exports){
var Checkbox, CheckboxList,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Checkbox = require('./Checkbox');

CheckboxList = (function(_super) {
  __extends(CheckboxList, _super);

  function CheckboxList() {
    return CheckboxList.__super__.constructor.apply(this, arguments);
  }

  CheckboxList.prototype.xtype = 'checkboxlistinput';

  CheckboxList.prototype.isInput = true;

  CheckboxList.prototype.inline = false;

  CheckboxList.prototype.baseCls = 'checkboxlist';

  CheckboxList.prototype.setChecked = function(name, checked) {
    this.get(name).setChecked(checked);
  };

  CheckboxList.prototype.setDisabled = function(name, disabled) {
    if (Type.isString(name)) {
      this.get(name).setDisabled(disabled);
    } else {
      disabled = name;
      this.components.each((function(_this) {
        return function(checkbox) {
          checkbox.setDisabled(disabled);
        };
      })(this));
    }
  };

  CheckboxList.prototype.setValue = function(value) {
    this.components.each((function(_this) {
      return function(checkbox, name) {
        checkbox.setChecked(value.indexOf(name) >= 0);
      };
    })(this));
  };

  CheckboxList.prototype.getValue = function() {
    var value;
    value = [];
    this.components.each((function(_this) {
      return function(checkbox, name) {
        if (checkbox.isChecked() && !checkbox.disabled) {
          value.push(name);
        }
      };
    })(this));
    return value;
  };

  CheckboxList.prototype.addItem = function(name, label) {
    this.add(name, this.createCheckbox(name, label));
  };

  CheckboxList.prototype.createCheckbox = function(name, label) {
    var checkbox;
    checkbox = new Checkbox({
      id: this.id + '-' + name,
      label: label,
      cls: this.inline ? 'checkbox-inline' : null
    });
    checkbox.on('change', (function(_this) {
      return function() {
        _this.emit('change', _this);
      };
    })(this));
    checkbox.on('blur', (function(_this) {
      return function() {
        _this.emit('blur', _this);
      };
    })(this));
    checkbox.on('focus', (function(_this) {
      return function() {
        _this.emit('focus', _this);
      };
    })(this));
    return checkbox;
  };

  CheckboxList.prototype.clear = function() {
    this.components.each((function(_this) {
      return function(component, name) {
        _this.removeComponent(name);
        component.destroy();
      };
    })(this));
  };

  return CheckboxList;

})(Miwo.Container);

module.exports = CheckboxList;


},{"./Checkbox":68}],70:[function(require,module,exports){
var BaseInput, Button, ColorInput,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Button = require('../buttons/Button');

BaseInput = require('./BaseInput');

ColorInput = (function(_super) {
  __extends(ColorInput, _super);

  function ColorInput() {
    return ColorInput.__super__.constructor.apply(this, arguments);
  }

  ColorInput.prototype.xtype = "colorinput";

  ColorInput.prototype.baseCls = 'colorfield';

  ColorInput.prototype.value = '#ffffff';

  ColorInput.prototype.readonly = false;

  ColorInput.prototype.resettable = false;

  ColorInput.prototype.pickerPlacement = 'bottom';

  ColorInput.prototype.popover = null;

  ColorInput.prototype.doRender = function() {
    this.el.addClass('clearfix');
    this.inputEl = new Element('input', {
      id: this.getInputId(),
      cls: 'form-control ' + this.getBaseCls('color'),
      type: 'color',
      tabindex: 0,
      parent: this.el
    });
    this.textEl = new Element('input', {
      id: this.getInputId('color'),
      cls: 'form-control ' + this.getBaseCls('text'),
      type: 'text',
      tabindex: -1,
      parent: this.el
    });
    this.resetBtn = new Button({
      icon: 'remove',
      visible: this.resettable,
      handler: (function(_this) {
        return function() {
          _this.emit('reset', _this);
          _this.setFocus();
        };
      })(this)
    });
    this.resetBtn.render(this.el);
    this.inputEl.on('click', this.bound('onInputClick'));
    this.textEl.on('mousedown', this.bound('onInputClick'));
  };

  ColorInput.prototype.onInputClick = function(event) {
    event.stop();
    if (this.focus) {
      this.setFocus();
    }
    this.openPicker();
  };

  ColorInput.prototype.afterRender = function() {
    ColorInput.__super__.afterRender.call(this);
    this.inputEl.on('keydown', (function(_this) {
      return function(event) {
        if (event.key === 'space' || event.key === 'enter') {
          event.stop();
          _this.openPicker();
        }
      };
    })(this));
    this.inputEl.on('focus', (function(_this) {
      return function() {
        _this.setFocus();
      };
    })(this));
    this.inputEl.on('blur', (function(_this) {
      return function() {
        _this.blur();
      };
    })(this));
  };

  ColorInput.prototype.setValue = function(value) {
    this.inputEl.set("value", value);
    this.textEl.set("value", value);
    return this;
  };

  ColorInput.prototype.getValue = function() {
    return this.inputEl.get("value");
  };

  ColorInput.prototype.setDisabled = function(disabled) {
    ColorInput.__super__.setDisabled.call(this, disabled);
    this.inputEl.set('disabled', disabled);
    this.textEl.set('disabled', disabled);
    this.resetBtn.setDisabled(disabled);
    return this;
  };

  ColorInput.prototype.setResettable = function(resettable) {
    this.resettable = resettable;
    this.resetBtn.setVisible(this.resettable);
    return this;
  };

  ColorInput.prototype.openPicker = function() {
    if (this.disabled || this.readonly) {
      return;
    }
    if (!this.popover) {
      this.popover = this.createPicker();
    }
    this.popover.show();
    this.popover.get('picker').setColor(this.getValue());
  };

  ColorInput.prototype.hidePicker = function() {
    this.popover.close();
  };

  ColorInput.prototype.createPicker = function() {
    var picker, popover;
    popover = miwo.pickers.createPopoverPicker('color', {
      target: this.inputEl,
      placement: this.pickerPlacement
    });
    picker = popover.get('picker');
    picker.on('changed', (function(_this) {
      return function(picker, hex) {
        var value;
        value = _this.formatColor(hex);
        _this.emit("changed", _this, value);
      };
    })(this));
    picker.on('selected', (function(_this) {
      return function(picker, hex) {
        var value;
        value = _this.formatColor(hex);
        _this.setValue(value);
        _this.emit('selected', _this, value);
        _this.hidePicker();
      };
    })(this));
    popover.on('close', (function(_this) {
      return function() {
        _this.popover = null;
        _this.setFocus();
        _this.emit("changed", _this, _this.getValue());
      };
    })(this));
    return popover;
  };

  ColorInput.prototype.formatColor = function(color) {
    return '#' + color.toLowerCase();
  };

  ColorInput.prototype.doDestroy = function() {
    if (this.popover) {
      this.popover.destroy();
    }
    if (this.resetBtn) {
      this.resetBtn.destroy();
    }
    return ColorInput.__super__.doDestroy.call(this);
  };

  return ColorInput;

})(BaseInput);

module.exports = ColorInput;


},{"../buttons/Button":6,"./BaseInput":66}],71:[function(require,module,exports){
var BaseInput, ComboInput, ScreenMask,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ScreenMask = require('../utils/ScreenMask');

BaseInput = require('./BaseInput');

ComboInput = (function(_super) {
  __extends(ComboInput, _super);

  ComboInput.prototype.xtype = 'comboinput';

  ComboInput.prototype.role = 'combobox';

  ComboInput.prototype.hideSelected = false;

  ComboInput.prototype.multiple = false;

  ComboInput.prototype.height = null;

  ComboInput.prototype.placeholder = '';

  ComboInput.prototype.prompt = false;

  ComboInput.prototype.items = null;

  ComboInput.prototype.disabled = false;

  ComboInput.prototype.opened = false;

  ComboInput.prototype.inputEl = null;

  ComboInput.prototype.resetEl = null;

  ComboInput.prototype.dropdownEl = null;

  ComboInput.prototype.dropdownItemsEl = null;

  ComboInput.prototype.activeItemIndex = -1;

  ComboInput.prototype.activeValueIndex = -1;

  ComboInput.prototype.active = false;

  ComboInput.prototype.screenMask = null;

  function ComboInput(config) {
    ComboInput.__super__.constructor.call(this, config);
    this.items = [];
    return;
  }

  ComboInput.prototype.afterInit = function() {
    ComboInput.__super__.afterInit.call(this);
    this.el.set('html', '<div class="combo-input">' + '<span class="combo-input-text">' + this.placeholder + '</span>' + '<span class="combo-input-reset" style="display: none;"><i class="glyphicon glyphicon glyphicon-remove"></i></span>' + '<span class="combo-input-arrow"><i class="glyphicon glyphicon-chevron-down"></i></span>' + '</div>' + '<input name="' + this.name + '" class="screen-off" id="' + this.id + '-input" type="text" role="button" aria-haspopup="true" aria-labelledby="' + this.id + '-input" tabindex="-1" >');
    this.el.set('tabindex', 0);
    this.control = this.el.getElement('.combo-input');
    this.inputEl = this.el.getElement('input');
    this.textEl = this.el.getElement('.combo-input-text');
    this.resetEl = this.el.getElement('.combo-input-reset');
    this.screenMask = new ScreenMask((function(_this) {
      return function() {
        return _this.close();
      };
    })(this));
    this.dropdownEl = new Element('div', {
      cls: 'combo-dropdown'
    });
    this.dropdownItemsEl = new Element('div', {
      cls: 'combo-dropdown-items',
      parent: this.dropdownEl
    });
  };

  ComboInput.prototype.doRender = function() {
    this.el.addClass('form-control combo combo-empty');
    if (this.height) {
      this.el.setStyle('height', this.height);
    }
    this.el.on('mousedown', (function(_this) {
      return function(event) {
        if (_this.disabled) {
          event.stop();
        }
      };
    })(this));
    this.el.on('click', (function(_this) {
      return function() {
        if (_this.disabled) {
          return;
        }
        _this.setFocus();
        _this.open();
      };
    })(this));
    this.el.on('focus', (function(_this) {
      return function() {
        if (_this.disabled) {
          return;
        }
        _this.setFocus();
      };
    })(this));
    this.el.on('blur', (function(_this) {
      return function() {
        if (_this.disabled) {
          return;
        }
        _this.blur();
      };
    })(this));
    this.dropdownEl.on('click:relay(.combo-dropdown-item)', (function(_this) {
      return function(event, target) {
        var val;
        event.stop();
        if (target.hasClass('disabled')) {
          return;
        }
        val = target.get('data-value');
        _this.setValue((_this.multiple ? _this.getValue().include(val) : val));
        _this.close();
      };
    })(this));
    this.dropdownEl.on('mouseenter:relay(.combo-dropdown-item)', (function(_this) {
      return function(event, target) {
        event.stop();
        if (target.hasClass('disabled')) {
          return;
        }
        _this.activateItem(target.get('data-index'));
      };
    })(this));
    this.textEl.on('click:relay(.combo-input-text li)', (function(_this) {
      return function(event, target) {
        var val;
        if (_this.disabled) {
          return;
        }
        event.stop();
        if (target.hasClass('disabled')) {
          return;
        }
        val = target.get('data-value');
        _this.setValue(_this.getValue().erase(val));
      };
    })(this));
    this.textEl.on('mouseenter:relay(li)', (function(_this) {
      return function(event, target) {
        if (_this.disabled) {
          return;
        }
        event.stop();
        if (target.hasClass('disabled')) {
          return;
        }
        _this.activateValue(parseInt(target.get('data-index')));
      };
    })(this));
    this.textEl.on('mouseleave:relay(li)', (function(_this) {
      return function(event, target) {
        if (_this.disabled) {
          return;
        }
        event.stop();
        if (target.hasClass('disabled')) {
          return;
        }
        _this.activateValue(-1);
      };
    })(this));
    this.resetEl.on('click', (function(_this) {
      return function(event) {
        if (_this.disabled) {
          return;
        }
        event.stop();
        _this.setValue();
      };
    })(this));
    this.keyListener = new Miwo.utils.KeyListener(this.el, 'keydown');
    this.keyListener.on('esc', (function(_this) {
      return function() {
        if (_this.disabled) {
          return;
        }
        _this.close();
        return true;
      };
    })(this));
    this.keyListener.on('up', (function(_this) {
      return function() {
        if (_this.disabled) {
          return;
        }
        _this.open();
        _this.activatePrevItem();
        return true;
      };
    })(this));
    this.keyListener.on('down', (function(_this) {
      return function() {
        if (_this.disabled) {
          return;
        }
        _this.open();
        _this.activateNextItem();
        return true;
      };
    })(this));
    this.keyListener.on('left', (function(_this) {
      return function() {
        if (_this.disabled) {
          return;
        }
        if (_this.multiple) {
          _this.activatePrevValue();
        }
        return true;
      };
    })(this));
    this.keyListener.on('right', (function(_this) {
      return function() {
        if (_this.disabled) {
          return;
        }
        if (_this.multiple) {
          _this.activateNextValue();
        }
        return true;
      };
    })(this));
    this.keyListener.on('backspace', (function(_this) {
      return function() {
        var item, val;
        if (_this.disabled) {
          return;
        }
        if (!_this.opened) {
          if ((item = _this.getActiveValue()) && !item.hasClass('disabled')) {
            val = item.get('data-value');
            _this.setValue(_this.getValue().erase(val));
          } else {
            _this.activateLastValue();
            if ((item = _this.getActiveValue()) && !item.hasClass('disabled')) {
              val = item.get('data-value');
              _this.setValue(_this.getValue().erase(val));
            }
          }
        }
        return true;
      };
    })(this));
    this.keyListener.on('enter', (function(_this) {
      return function() {
        var item, val;
        if (_this.disabled) {
          return;
        }
        if (_this.opened) {
          if ((item = _this.getActiveItem()) && !item.hasClass('disabled')) {
            val = item.get('data-value');
            _this.setValue((_this.multiple ? _this.getValue().include(val) : val));
            _this.close();
          }
          return true;
        }
      };
    })(this));
    this.focusEl = this.el;
  };

  ComboInput.prototype.setValue = function(value, silent) {
    var content, i, inputValue, item, selected, v, _i, _j, _len, _len1, _ref;
    if (value === void 0 || value === null) {
      value = '';
    }
    if (!Type.isArray(value)) {
      value = [value];
    }
    if (this.multiple) {
      content = '<ul>';
      for (i = _i = 0, _len = value.length; _i < _len; i = ++_i) {
        v = value[i];
        content += '<li class="combo-value" data-index="' + i + '" data-value="' + v + '" >' + this.getItemText(v) + '<i class="glyphicon glyphicon-remove"></i></li>';
      }
      content += '</ul>';
      inputValue = value.join(',');
    } else {
      content = this.getItemText(value[0]);
      inputValue = value[0];
    }
    this.el.toggleClass('combo-empty', !inputValue);
    this.textEl.set('html', inputValue ? content : this.placeholder);
    if (this.inputEl.get('value') !== inputValue) {
      this.inputEl.set('value', inputValue);
      if (!silent) {
        this.inputEl.emit('change');
      }
      if (!silent) {
        this.emit('change', this, inputValue);
      }
    }
    this.activeValueIndex = -1;
    if (this.hideSelected) {
      _ref = this.items;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        item = _ref[_j];
        selected = value.indexOf(item.get('data-value')) >= 0;
        item.setVisible(!selected);
        item.toggleClass('selected', selected);
      }
    }
    this.resetEl.setVisible(!this.disabled && this.prompt && value[0] !== void 0 && value[0] !== '');
  };

  ComboInput.prototype.getValue = function() {
    var value;
    value = this.inputEl.get('value');
    if (this.multiple) {
      if (value) {
        return value.split(',');
      } else {
        return [];
      }
    } else {
      return value;
    }
  };

  ComboInput.prototype.getItemText = function(value) {
    var el;
    el = this.dropdownEl.getElement('[data-value="' + value + '"]');
    if (el) {
      return el.comboText;
    } else {
      return '';
    }
  };

  ComboInput.prototype.addOption = function(value, text, content) {
    var item;
    item = new Element('div', {
      cls: 'combo-dropdown-item',
      'data-value': value,
      html: content || text,
      'data-index': this.items.length
    });
    item.comboText = text;
    item.inject(this.dropdownItemsEl);
    this.items.push(item);
    if (!this.prompt && this.getValue() === '') {
      this.setValue(value);
    }
  };

  ComboInput.prototype.addOptions = function(items) {
    var item, _i, _len;
    for (_i = 0, _len = items.length; _i < _len; _i++) {
      item = items[_i];
      this.addOption(item.value, item.text, item.content);
    }
  };

  ComboInput.prototype.setOptions = function(items) {
    this.clear();
    this.addOptions(items);
  };

  ComboInput.prototype.setOptionDisabled = function(name, disabled) {
    this.getOption(name).toggleClass('disabled', disabled);
  };

  ComboInput.prototype.getOption = function(name) {
    return this.dropdownItemsEl.getElement('[data-value="' + name + '"]');
  };

  ComboInput.prototype.setPrompt = function(text) {
    this.prompt = text;
  };

  ComboInput.prototype.clear = function() {
    this.items.empty();
    this.dropdownItemsEl.empty();
  };

  ComboInput.prototype.setDisabled = function(disabled) {
    ComboInput.__super__.setDisabled.call(this, disabled);
    this.el.toggleClass('disabled', disabled);
  };

  ComboInput.prototype.open = function() {
    var pos, size;
    if (this.opened) {
      return;
    }
    this.opened = true;
    this.setFocus();
    this.el.addClass('combo-open');
    this.screenMask.show();
    this.dropdownEl.inject(miwo.body);
    this.dropdownEl.addClass('active');
    pos = this.el.getPosition();
    size = this.el.getSize();
    this.dropdownEl.setStyles({
      top: pos.y + size.y,
      left: pos.x,
      width: size.x
    });
    if (this.activeItemIndex < 0) {
      this.activateNextItem();
    }
  };

  ComboInput.prototype.close = function() {
    if (!this.opened) {
      return;
    }
    this.opened = false;
    this.el.removeClass('combo-open');
    this.dropdownEl.removeClass('active');
    this.dropdownEl.dispose();
    this.screenMask.hide();
    this.setFocus();
  };

  ComboInput.prototype.getActiveItem = function() {
    return this.items[this.activeItemIndex] || null;
  };

  ComboInput.prototype.activateItem = function(index) {
    if (this.activeItemIndex >= 0) {
      this.items[this.activeItemIndex].removeClass('active');
      this.activeItemIndex = -1;
    }
    if (index >= 0 && index < this.items.length) {
      this.items[index].addClass('active');
      this.activeItemIndex = index;
    }
  };

  ComboInput.prototype.activatePrevItem = function() {
    var activateIndex, index, item, _i, _len, _ref;
    activateIndex = null;
    _ref = this.items;
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      item = _ref[index];
      if (!item.hasClass('selected') && !item.hasClass('disabled') && index < this.activeItemIndex) {
        activateIndex = index;
      }
    }
    if (activateIndex !== null) {
      this.activateItem(activateIndex);
    }
  };

  ComboInput.prototype.activateNextItem = function() {
    var activateIndex, index, item, _i, _len, _ref;
    activateIndex = null;
    _ref = this.items;
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      item = _ref[index];
      if (!item.hasClass('selected') && !item.hasClass('disabled') && index > this.activeItemIndex) {
        activateIndex = index;
        break;
      }
    }
    if (activateIndex !== null) {
      this.activateItem(activateIndex);
    }
  };

  ComboInput.prototype.getValueElAt = function(index) {
    return this.textEl.getElement('li:nth-child(' + (index + 1) + ')');
  };

  ComboInput.prototype.getActiveValue = function() {
    return this.getValueElAt(this.activeValueIndex) || null;
  };

  ComboInput.prototype.activateValue = function(index) {
    var activeItem, item;
    if (this.activeValueIndex >= 0) {
      activeItem = this.getValueElAt(this.activeValueIndex);
      activeItem.removeClass('active');
    }
    if (index >= 0 && index < this.getValue().length) {
      item = this.getValueElAt(index);
      if (!item.hasClass('disabled')) {
        item.addClass('active');
        this.activeValueIndex = index;
      }
    }
  };

  ComboInput.prototype.activatePrevValue = function() {
    var index;
    if (this.activeValueIndex < 0) {
      index = this.getValue().length - 1;
    } else {
      index = this.activeValueIndex === 0 ? this.getValue().length - 1 : this.activeValueIndex - 1;
    }
    this.activateValue(index);
  };

  ComboInput.prototype.activateNextValue = function() {
    var index;
    if (this.activeValueIndex < 0) {
      index = 0;
    } else {
      index = this.getValue().length === this.activeValueIndex + 1 ? 0 : this.activeValueIndex + 1;
    }
    this.activateValue(index);
  };

  ComboInput.prototype.activateLastValue = function() {
    this.activateValue(this.getValue().length - 1);
  };

  ComboInput.prototype.doDestroy = function() {
    this.screenMask.destroy();
    this.keyListener.destroy();
    return ComboInput.__super__.doDestroy.apply(this, arguments);
  };

  return ComboInput;

})(BaseInput);

module.exports = ComboInput;


},{"../utils/ScreenMask":131,"./BaseInput":66}],72:[function(require,module,exports){
var Composite,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Composite = (function(_super) {
  __extends(Composite, _super);

  function Composite() {
    return Composite.__super__.constructor.apply(this, arguments);
  }

  Composite.prototype.xtype = 'composite';

  Composite.prototype.componentCls = 'form-composite';

  Composite.prototype.labelSeparator = ', ';

  Composite.prototype.getInputs = function() {
    return this.getComponents().toArray();
  };

  Composite.prototype.setValue = function(value) {
    var input, _i, _len, _ref;
    value = value || {};
    _ref = this.getInputs();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      input = _ref[_i];
      if (value.hasOwnProperty(input.name)) {
        input.setValue(value[input.name]);
      }
    }
  };

  Composite.prototype.getValue = function() {
    var input, value, _i, _len, _ref;
    value = {};
    _ref = this.getInputs();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      input = _ref[_i];
      value[input.name] = input.getValue();
    }
    return value;
  };

  Composite.prototype.setDisabled = function(disabled) {
    var input, _i, _len, _ref;
    this.disabled = disabled;
    _ref = this.getInputs();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      input = _ref[_i];
      input.setDisabled(this.disabled);
    }
  };

  Composite.prototype.setReadonly = function(readonly) {
    var input, _i, _len, _ref;
    this.readonly = readonly;
    _ref = this.getInputs();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      input = _ref[_i];
      input.setReadonly(this.readonly);
    }
  };

  return Composite;

})(Miwo.Container);

module.exports = Composite;


},{}],73:[function(require,module,exports){
var DateInput, TextInput,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

TextInput = require('./Text');

DateInput = (function(_super) {
  __extends(DateInput, _super);

  function DateInput() {
    return DateInput.__super__.constructor.apply(this, arguments);
  }

  DateInput.prototype.xtype = 'dateinput';

  DateInput.prototype.type = 'date';

  DateInput.prototype.placeholder = 'yyyy-mm-dd';

  DateInput.prototype.startDate = null;

  DateInput.prototype.endDate = null;

  DateInput.prototype.todayBtn = false;

  DateInput.prototype.clearBtn = false;

  DateInput.prototype.rangeSelector = null;

  DateInput.prototype.rangeStart = null;

  DateInput.prototype.rangeEnd = null;

  DateInput.prototype.popover = null;

  DateInput.prototype.doInit = function() {
    DateInput.__super__.doInit.apply(this, arguments);
    this.startDate = this.parseDate(this.startDate);
    this.endDate = this.parseDate(this.endDate);
    this.rangeStart = this.parseDate(this.rangeStart) || null;
    this.rangeEnd = this.parseDate(this.rangeEnd) || null;
  };

  DateInput.prototype.afterRender = function() {
    DateInput.__super__.afterRender.apply(this, arguments);
    this.el.set('type', 'text');
    this.el.on('click', (function(_this) {
      return function() {
        return _this.openPicker();
      };
    })(this));
    this.el.on('keydown', (function(_this) {
      return function(e) {
        return _this.onKeyDown(e);
      };
    })(this));
  };

  DateInput.prototype.onKeyDown = function(e) {
    if (e.key.length === 1) {
      e.stop();
    } else if (e.key === 'up' || e.key === 'down' || e.key === 'left' || e.key === 'right') {
      e.stop();
      this.openPicker();
    } else if (e.key === 'backspace') {
      e.stop();
      this.setValue('');
    }
  };

  DateInput.prototype.setValue = function(value) {
    if (value && !Type.isDate(value)) {
      value = this.parseDate(value);
    }
    DateInput.__super__.setValue.call(this, value ? this.formatDate(value) : '');
    if (this.rangeSelector === 'start') {
      this.setRange(value || false, null, true);
    } else if (this.rangeSelector === 'end') {
      this.setRange(null, value || false, true);
    }
  };

  DateInput.prototype.setStartDate = function(date) {
    this.startDate = this.parseDate(date);
    if (this.popover) {
      this.popover.get('picker').setStartDate(date);
    }
  };

  DateInput.prototype.setEndDate = function(date) {
    this.endDate = this.parseDate(date);
    if (this.popover) {
      this.popover.get('picker').setEndDate(date);
    }
  };

  DateInput.prototype.setRange = function(rangeStart, rangeEnd, silent) {
    this.rangeStart = rangeStart === false ? false : this.parseDate(rangeStart) || this.rangeStart;
    this.rangeEnd = rangeEnd === false ? false : this.parseDate(rangeEnd) || this.rangeEnd;
    if (this.popover) {
      this.popover.get('picker').setRange(this.rangeStart, this.rangeEnd, silent);
    }
  };

  DateInput.prototype.openPicker = function() {
    if (this.disabled || this.readonly) {
      return;
    }
    if (!this.popover) {
      this.popover = this.createPicker();
    }
    this.popover.show();
    this.popover.get('picker').setDate(this.parseDate(this.getValue()), true);
    this.popover.get('picker').setFocus();
  };

  DateInput.prototype.hidePicker = function() {
    this.popover.close();
  };

  DateInput.prototype.createPicker = function() {
    var popover;
    popover = miwo.pickers.createPopoverPicker('date', {
      target: this.el,
      type: this.type,
      rangeSelector: this.rangeSelector,
      rangeStart: this.rangeStart || null,
      rangeEnd: this.rangeEnd || null,
      startDate: this.startDate,
      endDate: this.endDate,
      todayBtn: this.todayBtn,
      clearBtn: this.clearBtn
    });
    popover.get('picker').on('selected', (function(_this) {
      return function(picker, date) {
        _this.setValue(date);
        _this.hidePicker();
        _this.emit('changed', _this, _this.getValue(), date);
      };
    })(this));
    popover.on('close', (function(_this) {
      return function() {
        _this.popover = null;
        _this.setFocus();
      };
    })(this));
    return popover;
  };

  DateInput.prototype.formatDate = function(date) {
    return date.getFullYear() + '-' + (date.getMonth() + 1).pad(2) + '-' + date.getDate().pad(2);
  };

  DateInput.prototype.parseDate = function(value) {
    var parts;
    if (!value) {
      return null;
    }
    if (Type.isDate(value)) {
      return value;
    }
    if (!value.match(/[0-9]{4}-[0-9]{2}-[0-9]{2}/)) {
      return null;
    }
    parts = value.split('-');
    return new Date(parseInt(parts[0]), parseInt(parts[1]) - 1, parseInt(parts[2]));
  };

  DateInput.prototype.doDestroy = function() {
    if (this.popover) {
      this.popover.destroy();
    }
    return DateInput.__super__.doDestroy.apply(this, arguments);
  };

  return DateInput;

})(TextInput);

module.exports = DateInput;


},{"./Text":80}],74:[function(require,module,exports){
var DateInput, DateRangeInput,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

DateInput = require('./Date');

DateRangeInput = (function(_super) {
  __extends(DateRangeInput, _super);

  function DateRangeInput() {
    return DateRangeInput.__super__.constructor.apply(this, arguments);
  }

  DateRangeInput.prototype.xtype = 'daterangeinput';

  DateRangeInput.prototype.isInput = true;

  DateRangeInput.prototype.placeholder = 'yyyy-mm-dd';

  DateRangeInput.prototype.readonly = false;

  DateRangeInput.prototype.startDate = null;

  DateRangeInput.prototype.endDate = null;

  DateRangeInput.prototype.todayBtn = false;

  DateRangeInput.prototype.clearBtn = false;

  DateRangeInput.prototype.baseCls = 'daterange';

  DateRangeInput.prototype.doInit = function() {
    DateRangeInput.__super__.doInit.apply(this, arguments);
    this.value = [null, null];
    this.startDate = this.parseDate(this.startDate);
    this.endDate = this.parseDate(this.endDate);
    this.add('start', this.createStartDate());
    this.add('end', this.createEndDate());
  };

  DateRangeInput.prototype.setDisabled = function(disabled) {
    this.get('start').setDisabled(disabled);
    this.get('end').setDisabled(disabled);
  };

  DateRangeInput.prototype.setValue = function(value) {
    if (!value) {
      value = [null, null];
    }
    this.get('start').setValue(value[0]);
    this.get('end').setValue(value[1]);
    this.get('start').setRange(value[0], value[1]);
    this.get('end').setRange(value[0], value[1]);
  };

  DateRangeInput.prototype.setStartDate = function(date) {
    this.startDate = this.parseDate(date);
    this.onDateLimitsChanged();
  };

  DateRangeInput.prototype.setEndDate = function(date) {
    this.endDate = this.parseDate(date);
    this.onDateLimitsChanged();
  };

  DateRangeInput.prototype.getValue = function() {
    return [this.get('start').getValue(), this.get('end').getValue()];
  };

  DateRangeInput.prototype.getRange = function() {
    var value;
    value = this.getValue();
    return [this.parseDate(value[0]), this.parseDate(value[1])];
  };

  DateRangeInput.prototype.getInputEl = function() {
    return this.get('start').el;
  };

  DateRangeInput.prototype.getInputId = function() {
    return this.get('start').id;
  };

  DateRangeInput.prototype.createStartDate = function() {
    var input;
    input = this.createInput('start');
    input.on('changed', (function(_this) {
      return function(component, value, date) {
        _this.emit('changed', _this, _this.getValue());
        _this.get('end').setRange(date, null, true);
        _this.onDateLimitsChanged();
      };
    })(this));
    return input;
  };

  DateRangeInput.prototype.createEndDate = function() {
    var input;
    input = this.createInput('end');
    input.on('changed', (function(_this) {
      return function(component, value, date) {
        _this.emit('changed', _this, _this.getValue());
        _this.get('start').setRange(null, date, true);
        _this.onDateLimitsChanged();
      };
    })(this));
    return input;
  };

  DateRangeInput.prototype.createInput = function(type) {
    var input;
    input = new DateInput({
      id: this.id + '-' + type,
      id: this.name + '-' + type,
      cls: this.getBaseCls(type),
      rangeSelector: type,
      disabled: this.disabled,
      readonly: this.readonly,
      startDate: this.startDate,
      endDate: this.endDate,
      placeholder: this.placeholder,
      todayBtn: this.todayBtn,
      clearBtn: this.clearBtn
    });
    return input;
  };

  DateRangeInput.prototype.onDateLimitsChanged = function() {
    var range;
    range = this.getRange();
    this.get('end').setStartDate(this.startDate && this.startDate > range[0] ? this.startDate : range[0]);
    this.get('start').setEndDate(this.endDate && this.endDate < range[1] ? this.endDate : range[1]);
  };

  DateRangeInput.prototype.doRender = function() {
    this.get('start').render(this.el);
    (new Element('span', {
      cls: 'input-group-addon',
      html: miwo.tr('miwo.inputs.dateTo')
    })).inject(this.el);
    this.get('end').render(this.el);
  };

  DateRangeInput.prototype.parseDate = function(value) {
    var parts;
    if (!value) {
      return null;
    }
    if (Type.isDate(value)) {
      return value;
    }
    if (!value.match(/[0-9]{4}-[0-9]{2}-[0-9]{2}/)) {
      return null;
    }
    parts = value.split('-');
    return new Date(parseInt(parts[0]), parseInt(parts[1]) - 1, parseInt(parts[2]));
  };

  return DateRangeInput;

})(Miwo.Container);

module.exports = DateRangeInput;


},{"./Date":73}],75:[function(require,module,exports){
var DropSelectInput,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

DropSelectInput = (function(_super) {
  __extends(DropSelectInput, _super);

  function DropSelectInput() {
    return DropSelectInput.__super__.constructor.apply(this, arguments);
  }

  DropSelectInput.prototype.xtype = 'dropselectinput';

  DropSelectInput.prototype.store = null;

  DropSelectInput.prototype.keyProperty = 'id';

  DropSelectInput.prototype.textProperty = null;

  DropSelectInput.prototype.sourceTitle = '';

  DropSelectInput.prototype.targetTitle = '';

  DropSelectInput.prototype.sourceEmpty = '';

  DropSelectInput.prototype.targetEmpty = '';

  DropSelectInput.prototype.baseCls = 'dropselect';

  DropSelectInput.prototype.afterInit = function() {
    DropSelectInput.__super__.afterInit.apply(this, arguments);
    this.store = miwo.store(this.store);
    if (!this.textProperty) {
      throw new Error("Undefined textProperty attribute");
    }
  };

  DropSelectInput.prototype.setDisabled = function(disabled) {};

  DropSelectInput.prototype.setValue = function(value, silent) {
    this.loadItems(value, silent);
  };

  DropSelectInput.prototype.getValue = function() {
    return this.getTargetKeys();
  };

  DropSelectInput.prototype.doRender = function() {
    var buttonsCls, container, listCls, source, sourceCls, target, targetCls;
    listCls = this.getBaseCls('list');
    sourceCls = this.getBaseCls('source');
    targetCls = this.getBaseCls('target');
    buttonsCls = this.getBaseCls('buttons');
    container = new Element('div', {
      parent: this.el,
      cls: 'controls row',
      html: "<div class='col-md-5'>\n	<div class='" + listCls + " " + sourceCls + "'>\n		<h5>" + this.sourceTitle + "</h4>\n		<div class=\"items\"></div>\n		<div class=\"empty\"><span>" + this.sourceEmpty + "</span></div>\n	</div>\n</div>\n<div class='col-md-2 " + buttonsCls + " text-center'>\n	<button class=\"btn btn-default\" name=\"removeAll\"> << </button>\n	<button class=\"btn btn-default\" name=\"addAll\"> >> </button>\n</div>\n<div class='col-md-5'>\n	<div class='" + listCls + " " + targetCls + "'>\n		<h5>" + this.targetTitle + "</h4>\n		<div class=\"items\"></div>\n		<div class=\"empty\"><span>" + this.targetEmpty + "</span></div>\n	</div>\n</div>"
    });
    source = container.getElement('.' + sourceCls);
    target = container.getElement('.' + targetCls);
    this.sourceEmptyCt = source.getElement('.empty');
    this.targetEmptyCt = target.getElement('.empty');
    this.sourceEl = source = source.getElement('.items');
    this.targetEl = target = target.getElement('.items');
    container.on('click:relay(.item)', (function(_this) {
      return function(event, target) {
        event.stop();
        target[target.hasClass('selected') ? 'removeClass' : 'addClass']('selected');
      };
    })(this));
    source.on('click:relay(.item)', (function(_this) {
      return function(event, item) {
        event.stop();
        _this.addItem(item);
      };
    })(this));
    target.on('click:relay(.item)', (function(_this) {
      return function(event, item) {
        event.stop();
        _this.removeItem(item);
      };
    })(this));
    target.on('click', (function(_this) {
      return function(event) {
        if (event.target.hasClass(listCls)) {
          target.getElements('.item.selected').removeClass('selected');
        }
      };
    })(this));
    source.on('click', (function(_this) {
      return function(event) {
        if (event.target.hasClass(listCls)) {
          source.getElements('.item.selected').removeClass('selected');
        }
      };
    })(this));
    container.getElement('button[name="addAll"]').on('click', (function(_this) {
      return function(e) {
        e.stop();
        _this.addAll();
      };
    })(this));
    container.getElement('button[name="removeAll"]').on('click', (function(_this) {
      return function(e) {
        e.stop();
        _this.removeAll();
      };
    })(this));
  };

  DropSelectInput.prototype.afterRender = function() {
    DropSelectInput.__super__.afterRender.apply(this, arguments);
    this.loadItems();
  };

  DropSelectInput.prototype.addItem = function(source) {
    source.inject(this.targetEl);
    source.removeClass('selected');
    this.onItemsChanged();
  };

  DropSelectInput.prototype.addAll = function() {
    var item, _i, _len, _ref;
    _ref = this.sourceEl.getElements('.item');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      item.inject(this.targetEl);
      item.removeClass('selected');
    }
    this.onItemsChanged();
  };

  DropSelectInput.prototype.addSelected = function() {
    var item, _i, _len, _ref;
    _ref = this.sourceEl.getElements('.selected');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      item.inject(this.targetEl);
      item.removeClass('selected');
    }
    this.onItemsChanged();
  };

  DropSelectInput.prototype.removeItem = function(item) {
    item.inject(this.sourceEl);
    item.removeClass('selected');
    this.onItemsChanged();
  };

  DropSelectInput.prototype.removeAll = function() {
    var item, _i, _len, _ref;
    _ref = this.targetEl.getElements('.item');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      item.inject(this.sourceEl);
      item.removeClass('selected');
    }
    this.onItemsChanged();
  };

  DropSelectInput.prototype.removeSelected = function() {
    var item, _i, _len, _ref;
    _ref = this.targetEl.getElements('.selected');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      item.inject(this.sourceEl);
      item.removeClass('selected');
    }
    this.onItemsChanged();
  };

  DropSelectInput.prototype.loadItems = function(values, silent) {
    var id, item, _i, _len, _ref;
    this.sourceEl.empty();
    this.targetEl.empty();
    this.store.each((function(_this) {
      return function(record) {
        var item;
        item = new Element('div', {
          cls: 'item',
          parent: _this.sourceEl,
          'data-id': record.get(_this.keyProperty),
          html: record.get(_this.textProperty)
        });
      };
    })(this));
    if (values) {
      _ref = this.sourceEl.getElements('.item');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        id = item.get('data-id');
        if (values.indexOf(id) >= 0) {
          item.inject(this.targetEl);
        }
      }
    }
    this.onItemsChanged(silent);
  };

  DropSelectInput.prototype.getSourceKeys = function() {
    var item, keys, _i, _len, _ref;
    keys = [];
    _ref = this.sourceEl.getElements('.item');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      keys.push(item.get('data-id'));
    }
    return keys;
  };

  DropSelectInput.prototype.getTargetKeys = function() {
    var item, keys, _i, _len, _ref;
    keys = [];
    _ref = this.targetEl.getElements('.item');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      keys.push(item.get('data-id'));
    }
    return keys;
  };

  DropSelectInput.prototype.onItemsChanged = function(silent) {
    this.sourceEmptyCt.setVisible(this.sourceEl.getElements('.item').length === 0);
    this.targetEmptyCt.setVisible(this.targetEl.getElements('.item').length === 0);
    if (!silent) {
      this.emit('change', this);
    }
  };

  return DropSelectInput;

})(Miwo.Component);

module.exports = DropSelectInput;


},{}],76:[function(require,module,exports){
var Radio,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Radio = (function(_super) {
  __extends(Radio, _super);

  function Radio() {
    return Radio.__super__.constructor.apply(this, arguments);
  }

  Radio.prototype.xtype = 'radioinput';

  Radio.prototype.isInput = true;

  Radio.prototype.checked = false;

  Radio.prototype.disabled = false;

  Radio.prototype.inputEl = null;

  Radio.prototype.iconEl = null;

  Radio.prototype.labelEl = null;

  Radio.prototype.radioName = null;

  Radio.prototype.doRender = function() {
    this.el.addClass('radio');
    this.el.set('html', '<label miwo-reference="labelEl" for="' + this.getInputId() + '">' + '<span miwo-reference="checkerEl" class="checker" tabindex="0">' + '<i miwo-reference="iconEl" class="fa"></i>' + '<input miwo-reference="inputEl" type="radio" id="' + this.getInputId() + '" name="' + this.radioName + '" value="' + this.name + '" tabindex="-1" >' + '</span>' + '<span miwo-reference="textEl" class="label-text">' + this.label + '</span>' + '</label>');
  };

  Radio.prototype.afterRender = function() {
    Radio.__super__.afterRender.apply(this, arguments);
    this.inputEl.on('change', (function(_this) {
      return function() {
        if (_this.disabled) {
          return;
        }
        _this.setChecked(_this.isChecked());
      };
    })(this));
    this.inputEl.on('focus', (function(_this) {
      return function() {
        if (_this.disabled) {
          return;
        }
        _this.setFocus();
      };
    })(this));
    this.checkerEl.on('focus', (function(_this) {
      return function() {
        if (_this.disabled) {
          return;
        }
        _this.setFocus();
      };
    })(this));
    this.checkerEl.on('keydown', (function(_this) {
      return function(e) {
        if (_this.disabled) {
          return;
        }
        if (e.key === 'space') {
          e.stop();
          _this.setChecked(!_this.isChecked());
        }
      };
    })(this));
    this.inputEl.on('blur', (function(_this) {
      return function() {
        if (_this.disabled) {
          return;
        }
        _this.emit('blur', _this);
      };
    })(this));
    this.focusEl = this.checkerEl;
    this.setDisabled(this.disabled);
    this.setChecked(this.checked);
  };

  Radio.prototype.setChecked = function(checked, silent) {
    var checkedOld;
    checkedOld = this.checked;
    this.checked = checked;
    if (!silent && checkedOld !== checked) {
      this.emit('change', this, this.name);
    }
    if (!this.rendered) {
      return;
    }
    this.el.toggleClass('checked', checked);
    this.inputEl.set('checked', checked);
    this.iconEl.removeClass('fa-dot-circle-o').removeClass('fa-circle-o');
    this.iconEl.addClass(checked ? 'fa-dot-circle-o' : 'fa-circle-o');
    return this;
  };

  Radio.prototype.isChecked = function() {
    if (this.rendered) {
      return this.inputEl.get('checked');
    } else {
      return this.checked;
    }
  };

  Radio.prototype.setDisabled = function(disabled) {
    this.disabled = disabled;
    if (!this.rendered) {
      return;
    }
    this.el.toggleClass('disabled', disabled);
    this.inputEl.set('disabled', disabled);
  };

  Radio.prototype.setLabel = function(label) {
    this.label = label;
    if (!this.rendered) {
      return;
    }
    this.textEl.set('text', label);
  };

  Radio.prototype.setValue = function(checked) {
    this.setChecked(checked);
  };

  Radio.prototype.getValue = function() {
    return this.isChecked();
  };

  Radio.prototype.getInputEl = function() {
    return this.inputEl;
  };

  Radio.prototype.getInputId = function() {
    return this.id + '-input';
  };

  return Radio;

})(Miwo.Component);

module.exports = Radio;


},{}],77:[function(require,module,exports){
var Radio, RadioListInput,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Radio = require('./Radio');

RadioListInput = (function(_super) {
  __extends(RadioListInput, _super);

  function RadioListInput() {
    return RadioListInput.__super__.constructor.apply(this, arguments);
  }

  RadioListInput.prototype.xtype = 'radiolistinput';

  RadioListInput.prototype.isInput = true;

  RadioListInput.prototype.inline = false;

  RadioListInput.prototype.radioName = null;

  RadioListInput.prototype.componentCls = 'radiolist';

  RadioListInput.prototype.setChecked = function(name) {
    this.components.each((function(_this) {
      return function(radio) {
        radio.setChecked(radio.name === name, true);
      };
    })(this));
  };

  RadioListInput.prototype.setDisabled = function(name, disabled) {
    if (Type.isString(name)) {
      this.get(name).setDisabled(disabled);
    } else {
      disabled = name;
      this.components.each((function(_this) {
        return function(checkbox) {
          checkbox.setDisabled(disabled);
        };
      })(this));
    }
  };

  RadioListInput.prototype.setValue = function(value) {
    this.components.each((function(_this) {
      return function(checkbox, name) {
        checkbox.setChecked(value === name, true);
      };
    })(this));
  };

  RadioListInput.prototype.getValue = function() {
    var value;
    value = null;
    this.components.each((function(_this) {
      return function(radio, name) {
        if (radio.isChecked() && !radio.disabled) {
          value = name;
        }
      };
    })(this));
    return value;
  };

  RadioListInput.prototype.addItem = function(name, label) {
    this.add(name, this.createRadio(name, label));
  };

  RadioListInput.prototype.createRadio = function(name, label) {
    var radio;
    radio = new Radio({
      id: this.id + '-' + name,
      name: name,
      radioName: this.radioName,
      label: label,
      cls: this.inline ? 'radio-inline' : null
    });
    radio.on('change', (function(_this) {
      return function() {
        if (_this.disabled) {
          return;
        }
        _this.setChecked(name);
        _this.emit('change');
      };
    })(this));
    radio.on('blur', (function(_this) {
      return function() {
        if (_this.disabled) {
          return;
        }
        _this.emit('blur');
      };
    })(this));
    radio.on('focus', (function(_this) {
      return function() {
        if (_this.disabled) {
          return;
        }
        _this.emit('focus');
      };
    })(this));
    return radio;
  };

  RadioListInput.prototype.clear = function() {
    this.components.each((function(_this) {
      return function(component, name) {
        _this.removeComponent(name);
        component.destroy();
      };
    })(this));
  };

  return RadioListInput;

})(Miwo.Container);

module.exports = RadioListInput;


},{"./Radio":76}],78:[function(require,module,exports){
var BaseInput, OptionGroup, SelectInput,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseInput = require('./BaseInput');

OptionGroup = (function(_super) {
  __extends(OptionGroup, _super);

  OptionGroup.prototype.select = null;

  OptionGroup.prototype.label = null;

  function OptionGroup(select, config) {
    this.select = select;
    OptionGroup.__super__.constructor.call(this, config);
    this.el = new Element('optgroup', {
      label: this.label,
      parent: this.select.el
    });
    return;
  }

  OptionGroup.prototype.setLabel = function(label) {
    this.el.set('label', label);
    return this;
  };

  OptionGroup.prototype.addOption = function(value, text) {
    var option;
    option = new Element('option', {
      value: value,
      html: text
    });
    option.inject(this.el);
    return this;
  };

  return OptionGroup;

})(Miwo.Object);

SelectInput = (function(_super) {
  __extends(SelectInput, _super);

  function SelectInput() {
    return SelectInput.__super__.constructor.apply(this, arguments);
  }

  SelectInput.prototype.xtype = 'selectinput';

  SelectInput.prototype.el = 'select';

  SelectInput.prototype.componentCls = 'form-control';

  SelectInput.prototype.afterRender = function() {
    SelectInput.__super__.afterRender.call(this);
    this.el.on('change', (function(_this) {
      return function() {
        return _this.emit('change', _this, _this.getValue());
      };
    })(this));
  };

  SelectInput.prototype.addOption = function(value, text) {
    var option;
    option = new Element('option', {
      value: value,
      html: text
    });
    option.inject(this.el);
    return this;
  };

  SelectInput.prototype.addGroup = function(title) {
    return new OptionGroup(this, {
      label: title
    });
  };

  SelectInput.prototype.clear = function() {
    this.el.empty();
    return this;
  };

  SelectInput.prototype.setDisabled = function(disabled) {
    SelectInput.__super__.setDisabled.call(this, disabled);
    this.el.toggleClass('disabled', disabled);
    return this;
  };

  SelectInput.prototype.setValue = function(value) {
    this.el.set('value', value);
    return this;
  };

  SelectInput.prototype.getValue = function() {
    return this.el.get('value');
  };

  SelectInput.prototype.getInputEl = function() {
    return this.el;
  };

  return SelectInput;

})(BaseInput);

module.exports = SelectInput;


},{"./BaseInput":66}],79:[function(require,module,exports){
var SliderInput, Tooltip,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Tooltip = require('../tip/Tooltip');

SliderInput = (function(_super) {
  __extends(SliderInput, _super);

  function SliderInput() {
    return SliderInput.__super__.constructor.apply(this, arguments);
  }

  SliderInput.prototype.xtype = 'sliderinput';

  SliderInput.prototype.isInput = true;

  SliderInput.prototype.value = 0;

  SliderInput.prototype.step = 1;

  SliderInput.prototype.min = 0;

  SliderInput.prototype.max = 100;

  SliderInput.prototype.disabled = false;

  SliderInput.prototype.mode = 'slider';

  SliderInput.prototype.knobRenderer = null;

  SliderInput.prototype.selectionRenderer = null;

  SliderInput.prototype.selectionEl = null;

  SliderInput.prototype.selectionTooltip = null;

  SliderInput.prototype.trackEl = null;

  SliderInput.prototype.trackPos = null;

  SliderInput.prototype.trackSize = null;

  SliderInput.prototype.stepSize = null;

  SliderInput.prototype.knob0El = null;

  SliderInput.prototype.knob1El = null;

  SliderInput.prototype.afterInit = function() {
    SliderInput.__super__.afterInit.call(this);
    if (this.min === null || this.max === null) {
      throw new Error("min or max properties are required");
    }
    if (!Type.isArray(this.value)) {
      this.value = [0, this.value];
    }
  };

  SliderInput.prototype.doRender = function() {
    this.el.addClass('slider');
    this.el.set('html', '<div miwo-reference="trackEl" class="slider-track">' + '<div miwo-reference="selectionEl" class="slider-selection"></div>' + '<div miwo-reference="knob0El" style="display: none" class="slider-knob" tabindex="0"></div>' + '<div miwo-reference="knob1El" class="slider-knob" tabindex="0"></div>' + '</div>');
  };

  SliderInput.prototype.afterRender = function() {
    SliderInput.__super__.afterRender.call(this);
    this.selectionTooltip = new Tooltip({
      target: this.selectionEl,
      placement: 'top',
      distance: 3
    });
    this.trackEl.on('click', (function(_this) {
      return function(event) {
        if (_this.disabled) {
          return;
        }
        _this.emit('focus', _this);
        _this.setValueByEvent(event);
        _this.selectionTooltip.setText(_this.formatSelectionTooltip(_this.getValue()));
        _this.emit('change', _this, _this.getValue());
      };
    })(this));
    this.selectionEl.on('mouseenter', (function(_this) {
      return function() {
        if (_this.disabled) {
          return;
        }
        if (_this.active) {
          return;
        }
        _this.selectionTooltip.show();
        _this.selectionTooltip.setText(_this.formatSelectionTooltip(_this.getValue()));
      };
    })(this));
    this.selectionEl.on('mouseleave', (function(_this) {
      return function() {
        if (_this.disabled) {
          return;
        }
        if (_this.active) {
          return;
        }
        _this.selectionTooltip.hide();
      };
    })(this));
    this.focusEl = this.knob1El;
    this.knob0El.setVisible(this.mode === 'range');
    this.decorateKnob(this.knob0El, 0);
    this.decorateKnob(this.knob1El, 1);
    this.setValue(this.value);
    this.setDisabled(this.disabled);
    window.on('resize', this.bound('updateSlider'));
  };

  SliderInput.prototype.decorateKnob = function(knobEl, index) {
    var tooltip;
    tooltip = new Tooltip({
      target: knobEl,
      placement: 'top',
      distance: 3
    });
    knobEl.store('tooltip', tooltip);
    knobEl.store('index', index);
    knobEl.on('mousedown', (function(_this) {
      return function() {
        if (_this.disabled) {
          return;
        }
        _this.active = true;
        _this.activeKnobEl = knobEl;
        knobEl.addClass('active');
        _this.startDrag();
      };
    })(this));
    knobEl.on('keydown', (function(_this) {
      return function(e) {
        if (_this.disabled) {
          return;
        }
        switch (e.key) {
          case 'left':
            _this.decrease();
            e.stop();
            break;
          case 'down':
            _this.decrease();
            e.stop();
            break;
          case 'right':
            _this.increase();
            e.stop();
            break;
          case 'up':
            _this.increase();
            e.stop();
        }
      };
    })(this));
  };

  SliderInput.prototype.startDrag = function() {
    this.activeKnobEl.retrieve('tooltip').setText(this.formatKnobTooltip(this.getValue(this.activeKnobEl.retrieve('index')))).show();
    miwo.body.on('mousemove', this.bound('onMouseMove'));
    miwo.body.on('mouseup', this.bound('onMouseUp'));
    this.emit('focus', this);
  };

  SliderInput.prototype.stopDrag = function() {
    if (this.activeKnobEl) {
      this.activeKnobEl.retrieve('tooltip').hide();
    }
    miwo.body.un('mousemove', this.bound('onMouseMove'));
    miwo.body.un('mouseup', this.bound('onMouseUp'));
  };

  SliderInput.prototype.onMouseUp = function() {
    this.active = false;
    if (this.activeKnobEl) {
      this.activeKnobEl.removeClass('active');
    }
    this.stopDrag();
    this.onChange();
  };

  SliderInput.prototype.onChange = function() {
    this.emit('change', this, this.getValue());
  };

  SliderInput.prototype.onMouseMove = function(event) {
    this.setValueByEvent(event);
    this.activeKnobEl.retrieve('tooltip').setText(this.formatKnobTooltip(this.getValue(this.activeKnobEl.retrieve('index'))));
    this.emit('slide', this, this.getValue());
  };

  SliderInput.prototype.setValueByEvent = function(event) {
    var index, left, relativeValue, value;
    left = Math.max(0, Math.min(event.page.x - this.trackPos.x, this.trackSize.x));
    relativeValue = left / this.trackSize.x;
    value = this.min + Math.round(relativeValue * (this.max - this.min));
    if (this.mode === 'range') {
      index = value > this.value[0] + (this.value[1] - this.value[0]) / 2 ? 1 : 0;
    } else {
      index = 1;
    }
    this.setValue(value, index);
  };

  SliderInput.prototype.setValue = function(value, index) {
    var tmp;
    if (index == null) {
      index = 1;
    }
    if (Type.isArray(value)) {
      this.value[0] = this.formatValue(value[0]);
      this.value[1] = this.formatValue(value[1]);
    } else {
      this.value[index] = this.formatValue(value);
    }
    if (this.value[0] > this.value[1]) {
      tmp = this.value[0];
      this.value[0] = this.value[1];
      this.value[1] = tmp;
    }
    this.updateSlider(true);
    return this;
  };

  SliderInput.prototype.updateSlider = function(onlyValue) {
    if (!onlyValue || !this.trackPos) {
      this.trackPos = this.trackEl.getPosition();
      this.trackSize = this.trackEl.getSize();
      this.stepSize = this.trackSize.x / (this.max - this.min);
    }
    this.knob0El.setStyle('left', (this.value[0] - this.min) * this.stepSize);
    this.knob1El.setStyle('left', (this.value[1] - this.min) * this.stepSize);
    this.selectionEl.setStyle('width', ((this.value[1] - this.value[0]) - this.min) * this.stepSize);
    this.selectionEl.setStyle('left', (this.value[0] - this.min) * this.stepSize);
  };

  SliderInput.prototype.formatValue = function(value) {
    value = Math.round(value);
    if (this.step > 1) {
      value = parseInt(value / this.step) * this.step;
    }
    value = Math.min(this.max, Math.max(this.min, value));
    return value;
  };

  SliderInput.prototype.getValue = function(index) {
    if (index !== void 0) {
      return this.value[index];
    } else if (this.mode === 'range') {
      return this.value;
    } else {
      if (this.value[1] > this.value[0]) {
        return this.value[1];
      } else {
        return this.value[0];
      }
    }
  };

  SliderInput.prototype.decrease = function() {
    var index;
    if (!this.activeKnobEl) {
      return;
    }
    index = this.activeKnobEl.retrieve('index');
    this.setValue(this.value[index] - this.step, index);
    return this;
  };

  SliderInput.prototype.increase = function() {
    var index;
    if (!this.activeKnobEl) {
      return;
    }
    index = this.activeKnobEl.retrieve('index');
    this.setValue(this.value[index] + this.step, index);
    return this;
  };

  SliderInput.prototype.setDisabled = function(disabled) {
    this.disabled = disabled;
    if (!this.rendered) {
      return;
    }
    this.el.toggleClass('disabled', this.disabled);
    this.knob0El.set('tabindex', -this.disabled);
    this.knob1El.set('tabindex', -this.disabled);
    return this;
  };

  SliderInput.prototype.parentShown = function() {
    this.updateSlider();
  };

  SliderInput.prototype.formatKnobTooltip = function(value) {
    if (this.knobRenderer) {
      return this.knobRenderer(value);
    } else {
      return value;
    }
  };

  SliderInput.prototype.formatSelectionTooltip = function(value) {
    if (this.selectionRenderer) {
      return this.selectionRenderer(value);
    } else if (this.mode === 'range') {
      return "" + value[0] + " - " + value[1];
    } else {
      return value;
    }
  };

  SliderInput.prototype.doDestroy = function() {
    this.stopDrag();
    this.knob0El.retrieve('tooltip').destroy();
    this.knob1El.retrieve('tooltip').destroy();
    this.selectionTooltip.destroy();
    window.un('resize', this.bound('updateSlider'));
    return SliderInput.__super__.doDestroy.call(this);
  };

  return SliderInput;

})(Miwo.Component);

module.exports = SliderInput;


},{"../tip/Tooltip":125}],80:[function(require,module,exports){
var BaseTextInput, TextInput,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseTextInput = require('./BaseTextInput');

TextInput = (function(_super) {
  __extends(TextInput, _super);

  function TextInput() {
    return TextInput.__super__.constructor.apply(this, arguments);
  }

  TextInput.prototype.type = 'text';

  TextInput.prototype.autocomplete = null;

  TextInput.prototype.doRender = function() {
    TextInput.__super__.doRender.call(this);
    this.el.set("type", this.type);
    if (this.autocomplete !== null) {
      this.el.set("autocomplete", this.autocomplete);
    }
  };

  return TextInput;

})(BaseTextInput);

module.exports = TextInput;


},{"./BaseTextInput":67}],81:[function(require,module,exports){
var BaseTextInput, TextAreaInput,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseTextInput = require('./BaseTextInput');

TextAreaInput = (function(_super) {
  __extends(TextAreaInput, _super);

  function TextAreaInput() {
    return TextAreaInput.__super__.constructor.apply(this, arguments);
  }

  TextAreaInput.prototype.xtype = 'textareainput';

  TextAreaInput.prototype.el = 'textarea';

  TextAreaInput.prototype.height = null;

  TextAreaInput.prototype.resize = 'vertical';

  TextAreaInput.prototype.doRender = function() {
    TextAreaInput.__super__.doRender.call(this);
    if (this.resize) {
      this.el.setStyle("resize", this.resize);
    }
    if (this.height) {
      this.el.setStyle("height", this.height);
    }
  };

  return TextAreaInput;

})(BaseTextInput);

module.exports = TextAreaInput;


},{"./BaseTextInput":67}],82:[function(require,module,exports){
var ToggleInput,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ToggleInput = (function(_super) {
  __extends(ToggleInput, _super);

  function ToggleInput() {
    return ToggleInput.__super__.constructor.apply(this, arguments);
  }

  ToggleInput.prototype.xtype = 'toggleinput';

  ToggleInput.prototype.isInput = true;

  ToggleInput.prototype.baseCls = 'toggle';

  ToggleInput.prototype.onState = 'success';

  ToggleInput.prototype.offState = 'default';

  ToggleInput.prototype.onText = 'ON';

  ToggleInput.prototype.offText = 'OFF';

  ToggleInput.prototype.value = false;

  ToggleInput.prototype.disabled = false;

  ToggleInput.prototype.readonly = false;

  ToggleInput.prototype.size = 'md';

  ToggleInput.prototype.beforeInit = function() {
    ToggleInput.__super__.beforeInit.apply(this, arguments);
    this.onText = miwo.tr('miwo.inputs.switchOn');
    this.offText = miwo.tr('miwo.inputs.switchOff');
  };

  ToggleInput.prototype.toggle = function() {
    this.setValue(!this.getValue());
  };

  ToggleInput.prototype.setValue = function(value, silent) {
    var oldValue;
    if (!silent) {
      this.preventChange = false;
      this.emit('beforechange', this);
      if (this.preventChange) {
        return;
      }
    }
    oldValue = this.value;
    this.value = value;
    if (this.rendered) {
      this.inputEl.set('checked', value);
      this.textEl.set('html', value ? this.onText : this.offText);
      this.el.toggleClass('toggle-on', value).toggleClass('toggle-off', !value).toggleClass('toggle-' + this.onState, value).toggleClass('toggle-' + this.offState, !value);
    }
    if (!silent && oldValue !== value) {
      this.emit('change', this, value);
    }
  };

  ToggleInput.prototype.getValue = function() {
    if (this.rendered) {
      return this.inputEl.get('checked');
    } else {
      return this.value;
    }
  };

  ToggleInput.prototype.setDisabled = function(disabled) {
    this.disabled = disabled;
    if (!this.rendered) {
      return;
    }
    this.el.toggleClass('disabled', this.disabled);
    this.el.set('tabindex', -this.disabled);
    this.inputEl.set('disabled', this.disabled);
  };

  ToggleInput.prototype.setReadonly = function(readonly) {
    this.readonly = readonly;
    if (!this.readonly) {
      return;
    }
    this.el.toggleClass('readonly', this.readonly);
  };

  ToggleInput.prototype.getInputEl = function() {
    return this.inputEl;
  };

  ToggleInput.prototype.getInputId = function() {
    return this.id + '-input';
  };

  ToggleInput.prototype.doRender = function() {
    this.el.addClass('input-' + this.size);
    this.el.addClass('form-control');
    this.el.set('tabindex', 0);
    this.el.set('html', "<div miwo-reference=\"textEl\" class='toggle-text'></div>\n<div miwo-reference=\"handleEl\" class='toggle-handle'></div>\n<input id=\"" + (this.getInputId()) + "\" type=\"checkbox\" tabindex=\"-1\" miwo-reference=\"inputEl\" class='screen-off'>");
  };

  ToggleInput.prototype.afterRender = function() {
    ToggleInput.__super__.afterRender.apply(this, arguments);
    this.el.on('click', (function(_this) {
      return function(e) {
        e.stop();
        if (_this.disabled) {
          return;
        }
        _this.toggle();
      };
    })(this));
    this.el.on('keydown', (function(_this) {
      return function(e) {
        if (_this.disabled) {
          return;
        }
        if (e.key === 'left' || e.key === 'right' || e.key === 'space') {
          e.stop();
          if (e.key === 'left') {
            _this.setValue(false);
          }
          if (e.key === 'right') {
            _this.setValue(true);
          }
          if (e.key === 'space') {
            _this.toggle();
          }
        }
      };
    })(this));
    this.inputEl.on('focus', (function(_this) {
      return function() {
        if (_this.disabled) {
          return;
        }
        _this.setFocus();
      };
    })(this));
    this.setValue(this.value, true);
    this.setDisabled(this.disabled);
    this.setReadonly(this.readonly);
  };

  return ToggleInput;

})(Miwo.Component);

module.exports = ToggleInput;


},{}],83:[function(require,module,exports){
module.exports = {
  Checkbox: require('./Checkbox'),
  Radio: require('./Radio'),
  Select: require('./Select'),
  Combo: require('./Combo'),
  Date: require('./Date'),
  DateRange: require('./DateRange'),
  Text: require('./Text'),
  Slider: require('./Slider'),
  Toggle: require('./Toggle'),
  Color: require('./Color'),
  RadioList: require('./RadioList'),
  CheckboxList: require('./CheckboxList'),
  TextArea: require('./TextArea'),
  DropSelect: require('./DropSelect'),
  Composite: require('./Composite')
};


},{"./Checkbox":68,"./CheckboxList":69,"./Color":70,"./Combo":71,"./Composite":72,"./Date":73,"./DateRange":74,"./DropSelect":75,"./Radio":76,"./RadioList":77,"./Select":78,"./Slider":79,"./Text":80,"./TextArea":81,"./Toggle":82}],84:[function(require,module,exports){
var LoadingMask,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

LoadingMask = (function(_super) {
  __extends(LoadingMask, _super);

  function LoadingMask() {
    return LoadingMask.__super__.constructor.apply(this, arguments);
  }

  LoadingMask.prototype.baseCls = 'loading-mask';

  LoadingMask.prototype.template = "<p class=\"{baseCls ct} text-center\">Loading...</p>";

  return LoadingMask;

})(Miwo.Component);

module.exports = LoadingMask;


},{}],85:[function(require,module,exports){
var LoadingMaskFactory;

LoadingMaskFactory = (function() {
  function LoadingMaskFactory() {}

  LoadingMaskFactory.prototype.instanceCls = null;

  LoadingMaskFactory.prototype.create = function(target) {
    if (target instanceof Miwo.Component) {
      target = target.el;
    }
    return new this.instanceCls({
      renderTo: target
    });
  };

  LoadingMaskFactory.prototype.show = function(target) {
    var mask;
    mask = this.create(target);
    mask.show();
    return mask;
  };

  return LoadingMaskFactory;

})();

module.exports = LoadingMaskFactory;


},{}],86:[function(require,module,exports){
module.exports = {
  LoadingMask: require('./LoadingMask'),
  LoadingMaskFactory: require('./LoadingMaskFactory')
};


},{"./LoadingMask":84,"./LoadingMaskFactory":85}],87:[function(require,module,exports){
var DropdownItem, DropdownList, Item,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Item = require('./Item');

DropdownList = require('../dropdown/List');

DropdownItem = (function(_super) {
  __extends(DropdownItem, _super);

  function DropdownItem() {
    return DropdownItem.__super__.constructor.apply(this, arguments);
  }

  DropdownItem.prototype.dropdown = null;

  DropdownItem.prototype.afterRender = function() {
    DropdownItem.__super__.afterRender.apply(this, arguments);
    this.el.set('aria-haspopup', true);
    this.el.set('aria-expanded', false);
  };

  DropdownItem.prototype.getDropdown = function() {
    if (!this.dropdown) {
      this.dropdown = new DropdownList({
        target: this.el
      });
      this.dropdown.el.set('aria-labelledby', this.id);
    }
    return this.dropdown;
  };

  DropdownItem.prototype.doRender = function() {
    var caret;
    DropdownItem.__super__.doRender.apply(this, arguments);
    caret = new Element("span", {
      cls: 'caret'
    });
    caret.inject(this.getContentEl());
  };

  DropdownItem.prototype.click = function() {
    this.getDropdown().toggle();
  };

  DropdownItem.prototype.doDestroy = function() {
    if (this.dropdown) {
      this.dropdown.destroy();
    }
    return DropdownItem.__super__.doDestroy.apply(this, arguments);
  };

  return DropdownItem;

})(Item);

module.exports = DropdownItem;


},{"../dropdown/List":18,"./Item":88}],88:[function(require,module,exports){
var NavbarItem,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

NavbarItem = (function(_super) {
  __extends(NavbarItem, _super);

  function NavbarItem() {
    return NavbarItem.__super__.constructor.apply(this, arguments);
  }

  NavbarItem.prototype.xtype = "navbaritem";

  NavbarItem.prototype.isNavbarItem = true;

  NavbarItem.prototype.handler = null;

  NavbarItem.prototype.text = "";

  NavbarItem.prototype.disabled = false;

  NavbarItem.prototype.active = false;

  NavbarItem.prototype.el = 'li';

  NavbarItem.prototype.baseCls = 'dropdown';

  NavbarItem.prototype.contentEl = 'a';

  NavbarItem.prototype.setDisabled = function(disabled, silent) {
    this.el.toggleClass('disabled', disabled);
    this.el.set('tabindex', -disabled);
    this.disabled = disabled;
    if (!silent) {
      if (disabled) {
        this.emit('disabled', this);
      } else {
        this.emit('enabled', this);
      }
    }
  };

  NavbarItem.prototype.setText = function(text) {
    this.text = text;
    if (this.textEl) {
      this.textEl.set("html", this.text);
    }
  };

  NavbarItem.prototype.setActive = function(active, silent) {
    this.el.toggleClass('active', active);
    this.active = active;
    if (!silent && active) {
      this.emit('active', this, active);
    }
  };

  NavbarItem.prototype.isActive = function() {
    return this.active && !this.disabled;
  };

  NavbarItem.prototype.click = function(e) {
    if (Type.isFunction(this.handler)) {
      this.handler(this, e);
    } else if (Type.isString(this.handler)) {
      if (this.handler.indexOf('#') === 0) {
        miwo.redirect(this.handler);
      } else {
        document.location = this.handler;
      }
    }
  };

  NavbarItem.prototype.doRender = function() {
    if (this.active) {
      this.el.addClass('active');
    }
    if (this.disabled) {
      this.el.addClass('disabled');
    }
    if (this.disabled) {
      this.el.set('tabindex', -1);
    }
    this.getContentEl().set('href', '#');
    this.getContentEl().on("click", this.bound("onClick"));
    this.textEl = new Element("span", {
      html: this.text,
      parent: this.getContentEl()
    });
  };

  NavbarItem.prototype.onClick = function(e) {
    e.preventDefault();
    if (this.disabled) {
      return;
    }
    this.preventClick = false;
    this.emit('beforeclick', this, e);
    if (this.preventClick) {
      return;
    }
    this.emit('click', this, e);
    this.click(e);
  };

  return NavbarItem;

})(Miwo.Component);

module.exports = NavbarItem;


},{}],89:[function(require,module,exports){
module.exports = {
  Item: require('./Item'),
  DropdownItem: require('./DropdownItem')
};


},{"./DropdownItem":87,"./Item":88}],90:[function(require,module,exports){
var Notification, Notificator,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Notification = window.Notification;

Notificator = (function(_super) {
  __extends(Notificator, _super);

  function Notificator() {
    return Notificator.__super__.constructor.apply(this, arguments);
  }

  Notificator.prototype.notification = null;

  Notificator.prototype.initialize = function(config) {
    Notificator.__super__.initialize.call(this, config);
    window.on("beforeunload", (function(_this) {
      return function() {
        if (_this.notification) {
          _this.notification.close();
        }
      };
    })(this));
  };

  Notificator.prototype.requestPermission = function() {
    if (Notification && Notification.permission === 'default') {
      Notification.requestPermission();
    }
  };

  Notificator.prototype.notify = function(config) {
    var notification;
    if (!Notification || Notification.permission !== "granted") {
      return null;
    }
    notification = new Notification(config.title, {
      body: config.message,
      icon: config.icon
    });
    notification.handler = config.callback;
    notification.onclick = (function(_this) {
      return function() {
        if (config.callback) {
          config.callback();
        }
        notification.close();
      };
    })(this);
    notification.onshow = (function(_this) {
      return function() {
        if (_this.notification === notification) {
          _this.notification.close();
        }
        _this.notification = notification;
      };
    })(this);
    notification.onclose = (function(_this) {
      return function() {
        if (_this.notification === notification) {
          delete _this.notification;
        }
      };
    })(this);
    if (config.timeout) {
      setTimeout((function(_this) {
        return function() {
          notification.close();
        };
      })(this), this.timeout);
    }
    this.notification = notification;
    return notification;
  };

  return Notificator;

})(Miwo.Object);

module.exports = Notificator;


},{}],91:[function(require,module,exports){
module.exports = {
  Notificator: require('./Notificator')
};


},{"./Notificator":90}],92:[function(require,module,exports){
var Pager, Paginator,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Paginator = require('../utils/Paginator');

Pager = (function(_super) {
  __extends(Pager, _super);

  function Pager() {
    return Pager.__super__.constructor.apply(this, arguments);
  }

  Pager.prototype.el = 'nav';

  Pager.prototype.paginator = null;

  Pager.prototype.navigate = false;

  Pager.prototype.doInit = function() {
    Pager.__super__.doInit.apply(this, arguments);
    this.paginator = new Paginator();
    this.paginator.on('page', (function(_this) {
      return function() {
        if (!_this.rendered) {
          return;
        }
        _this.prevEl.toggleClass('disabled', _this.paginator.isFirst());
        _this.nextEl.toggleClass('disabled', _this.paginator.isLast());
      };
    })(this));
  };

  Pager.prototype.setStore = function(store) {
    this.store = store;
    this.mon(store, 'beforeload', (function(_this) {
      return function() {
        _this.setDisabled(true);
      };
    })(this));
    this.mon(store, 'load', (function(_this) {
      return function() {
        _this.setDisabled(false);
        _this.syncPaginator();
      };
    })(this));
    if (store.loading) {
      this.setDisabled(true);
    } else if (store.loaded) {
      this.syncPaginator();
    }
  };

  Pager.prototype.syncPaginator = function() {
    this.paginator.setItemsPerPage(this.store.pageSize);
    this.paginator.setItemCount(this.store.totalCount);
    this.paginator.setPage(this.store.page);
    this.redraw();
  };

  Pager.prototype.doRender = function() {
    var a, li, text, ul;
    ul = new Element('ul', {
      cls: 'pager'
    }).inject(this.el);
    text = '<span>' + miwo.tr('miwo.nav.prev') + '</span>';
    if (this.navigate) {
      text = '<span aria-hidden="true">&larr;</span> ' + text;
    }
    li = new Element('li').inject(ul);
    li.toggleClass('disabled', this.paginator.isFirst());
    if (this.navigate) {
      li.addClass('previous');
    }
    a = new Element('a', {
      html: text,
      href: '#',
      'data-page': 'prev',
      role: 'button'
    }).inject(li);
    this.prevEl = li;
    text = '<span>' + miwo.tr('miwo.nav.next') + '</span>';
    if (this.navigate) {
      text = text + ' <span aria-hidden="true">&rarr;</span>';
    }
    li = new Element('li').inject(ul);
    li.setStyle('padding-left', '10px');
    li.toggleClass('disabled', this.paginator.isLast());
    if (this.navigate) {
      li.addClass('next');
    }
    a = new Element('a', {
      html: text,
      href: '#',
      'data-page': 'next',
      role: 'button'
    }).inject(li);
    this.nextEl = li;
  };

  Pager.prototype.afterRender = function() {
    Pager.__super__.afterRender.apply(this, arguments);
    this.mon(this.el, 'click:relay(a)', 'onClick');
  };

  Pager.prototype.onClick = function(event, el) {
    var page;
    event.preventDefault();
    if (this.disabled) {
      return;
    }
    if (el.getParent('li').hasClass('disabled')) {
      return;
    }
    page = el.get('data-page');
    this.emit('page', this, page);
    if (this.store) {
      this.store.loadNestedPage(page);
    }
  };

  Pager.prototype.doDestroy = function() {
    this.paginator.destroy();
    return Pager.__super__.doDestroy.apply(this, arguments);
  };

  return Pager;

})(Miwo.Component);

module.exports = Pager;


},{"../utils/Paginator":130}],93:[function(require,module,exports){
var PagerInfo,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

PagerInfo = (function(_super) {
  __extends(PagerInfo, _super);

  function PagerInfo() {
    return PagerInfo.__super__.constructor.apply(this, arguments);
  }

  PagerInfo.prototype.xtype = 'pagerinfo';

  PagerInfo.prototype.el = 'p';

  PagerInfo.prototype.baseCls = 'pager-info';

  PagerInfo.prototype.setStore = function(store) {
    this.store = store;
    this.mon(store, 'load', (function(_this) {
      return function() {
        if (_this.rendered) {
          _this.redraw();
        }
      };
    })(this));
    if (this.rendered && store.loaded) {
      this.redraw();
    }
  };

  PagerInfo.prototype.doRender = function() {
    var from, store, to;
    store = this.store;
    from = (store.page - 1) * store.pageSize;
    to = Math.min(store.totalCount, from + store.pageSize);
    this.el.set('html', miwo.tr('miwo.pagination.pageInfo').substitute({
      visible: from + ' - ' + to,
      total: store.totalCount
    }));
  };

  return PagerInfo;

})(Miwo.Component);

module.exports = PagerInfo;


},{}],94:[function(require,module,exports){
var Paginator, UtilPaginator,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

UtilPaginator = require('../utils/Paginator');

Paginator = (function(_super) {
  __extends(Paginator, _super);

  function Paginator() {
    return Paginator.__super__.constructor.apply(this, arguments);
  }

  Paginator.prototype.nestedCount = 2;

  Paginator.prototype.remoteCount = 2;

  Paginator.prototype.size = null;

  Paginator.prototype.el = 'nav';

  Paginator.prototype.paginator = null;

  Paginator.prototype.doInit = function() {
    Paginator.__super__.doInit.apply(this, arguments);
    this.paginator = new UtilPaginator();
    this.paginator.on('page', (function(_this) {
      return function() {
        if (!_this.rendered) {
          return;
        }
        _this.renderPages();
      };
    })(this));
  };

  Paginator.prototype.setStore = function(store) {
    this.store = store;
    this.mon(store, 'beforeload', (function(_this) {
      return function() {
        _this.setDisabled(true);
      };
    })(this));
    this.mon(store, 'load', (function(_this) {
      return function() {
        _this.setDisabled(false);
        _this.syncPaginator();
      };
    })(this));
    if (store.loading) {
      this.setDisabled(true);
    } else if (store.loaded) {
      this.syncPaginator();
    }
  };

  Paginator.prototype.syncPaginator = function() {
    this.paginator.setItemsPerPage(this.store.pageSize);
    this.paginator.setItemCount(this.store.totalCount);
    this.paginator.setPage(this.store.page);
    this.redraw();
  };

  Paginator.prototype.doRender = function() {
    var a, i, li, max, min, quotient, step, steps, text, ul, _i, _j, _k, _len, _ref, _results;
    this.el.empty();
    if (this.paginator.itemCount === null) {
      return;
    }
    if (this.paginator.getPageCount() < 2) {
      return;
    }
    min = Math.max(this.paginator.getFirstPage(), this.page - this.nestedCount);
    max = Math.min(this.paginator.getLastPage(), this.page + this.nestedCount);
    steps = (function() {
      _results = [];
      for (var _i = min; min <= max ? _i <= max : _i >= max; min <= max ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this);
    quotient = (this.paginator.getPageCount() - 1) / this.remoteCount;
    for (i = _j = 0, _ref = this.remoteCount; 0 <= _ref ? _j <= _ref : _j >= _ref; i = 0 <= _ref ? ++_j : --_j) {
      steps.include(Math.round(quotient * i) + this.paginator.getFirstPage());
    }
    steps.sort(function(a, b) {
      return a - b;
    });
    ul = new Element('ul', {
      cls: 'pagination'
    }).inject(this.el);
    if (this.size) {
      ul.addClass('pagination-' + this.size);
    }
    text = '<span class="sr-only">' + miwo.tr('miwo.nav.prev') + '</span><span aria-hidden="true">&laquo;</span>';
    li = new Element('li').inject(ul);
    a = new Element('a', {
      html: text,
      href: '#',
      'data-page': 1,
      role: 'button'
    }).inject(li);
    if (this.paginator.isFirst()) {
      li.addClass('disabled');
    }
    for (_k = 0, _len = steps.length; _k < _len; _k++) {
      step = steps[_k];
      li = new Element('li').inject(ul);
      if (step === this.page) {
        li.addClass('active');
      }
      text = '<span>' + step + '</span>';
      if (step === this.page) {
        text = step + '<span class="sr-only">(' + miwo.tr('miwo.nav.current') + ')</span>';
      }
      a = new Element('a', {
        html: text,
        href: '#',
        'data-page': step,
        role: 'button'
      }).inject(li);
    }
    text = '<span aria-hidden="true">&raquo;</span><span class="sr-only">' + miwo.tr('miwo.nav.next') + '</span>';
    li = new Element('li').inject(ul);
    a = new Element('a', {
      html: text,
      href: '#',
      'data-page': this.paginator.getLastPage(),
      role: 'button'
    }).inject(li);
    if (this.paginator.isLast()) {
      li.addClass('disabled');
    }
  };

  Paginator.prototype.afterRender = function() {
    Paginator.__super__.afterRender.apply(this, arguments);
    this.mon(this.el, 'click:relay(a)', 'onClick');
  };

  Paginator.prototype.onClick = function(event, el) {
    var page;
    event.preventDefault();
    if (this.disabled) {
      return;
    }
    if (el.getParent('li').hasClass('disabled')) {
      return;
    }
    page = parseInt(el.get('data-page'));
    this.emit('page', this, page);
    if (this.store) {
      this.store.loadPage(page);
    }
  };

  return Paginator;

})(Miwo.Component);

module.exports = Paginator;


},{"../utils/Paginator":130}],95:[function(require,module,exports){
module.exports = {
  Paginator: require('./Paginator'),
  Pager: require('./Pager'),
  PagerInfo: require('./PagerInfo')
};


},{"./Pager":92,"./PagerInfo":93,"./Paginator":94}],96:[function(require,module,exports){
var Pane, Scrollable,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Scrollable = require('./Scrollable');

Pane = (function(_super) {
  __extends(Pane, _super);

  function Pane() {
    return Pane.__super__.constructor.apply(this, arguments);
  }

  Pane.prototype.scrollable = false;

  Pane.prototype.scrollableOptions = null;

  Pane.prototype.contentEl = 'div';

  Pane.prototype.doInit = function() {
    Pane.__super__.doInit.apply(this, arguments);
    this.setScrollable(this.scrollable);
  };

  Pane.prototype.setScrollable = function(scrollable) {
    this.scrollable = scrollable;
    if (this.scrollable && !this.hasPlugin('scrollable')) {
      this.installPlugin('scrollable', new Scrollable(this, this.scrollableOptions));
    } else if (!this.scrollable && this.hasPlugin('scrollable')) {
      this.uninstallPlugin('scrollable');
    }
  };

  Pane.prototype.scrollTop = function() {
    if (this.scrollable) {
      this.getPlugin('scrollable').scrollTop();
    }
  };

  Pane.prototype.scrollBottom = function() {
    if (this.scrollable) {
      this.getPlugin('scrollable').scrollBottom();
    }
  };

  Pane.prototype.afterRender = function() {
    Pane.__super__.afterRender.apply(this, arguments);
    this.el.addClass('pane');
    this.contentEl.addClass('pane-ct');
  };

  return Pane;

})(Miwo.Container);

module.exports = Pane;


},{"./Scrollable":97}],97:[function(require,module,exports){
var Scrollable, Slider,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Slider = require('../drag/Slider');

Scrollable = (function(_super) {
  __extends(Scrollable, _super);

  Scrollable.prototype.fade = true;

  Scrollable.prototype.autoHide = true;

  Scrollable.prototype.proportional = true;

  Scrollable.prototype.proportionalMinHeight = 15;

  function Scrollable(container, config) {
    this.container = container;
    Scrollable.__super__.constructor.call(this, config);
    return;
  }

  Scrollable.prototype.scrollTop = function() {
    this.scrollableBody.scrollTop = 0;
    this.actualize();
  };

  Scrollable.prototype.scrollBottom = function() {
    this.scrollableBody.scrollTop = this.scrollableBody.scrollHeight;
    this.actualize();
  };

  Scrollable.prototype.afterRender = function() {
    this.container.el.addClass('scrollable');
    this.scrollableCt = this.container.scrollableCt || this.container.el;
    this.scrollableBody = this.container.scrollableEl || this.container.getContentEl();
    this.scrollableCt.addClass('scrollable-ct');
    this.scrollableBody.addClass('scrollable-body');
    this.scrollbar = new Element('div', {
      parent: this.scrollableCt,
      cls: 'scrollable-slider'
    });
    this.scrollbar.set('tween', {
      duration: 50
    });
    this.knob = new Element('div', {
      parent: this.scrollbar,
      cls: 'scrollable-knob'
    });
    this.slider = new Slider(this.scrollbar, this.knob, {
      mode: 'vertical'
    });
    this.slider.on('change', (function(_this) {
      return function(step) {
        _this.scrollableBody.scrollTop = (_this.scrollableBody.scrollHeight - _this.scrollableBody.offsetHeight) * step / 100;
      };
    })(this));
    this.scrollableCt.on('mouseenter', this.bound('onElementMouseEnter'));
    this.scrollableCt.on('mouseleave', this.bound('onElementMouseLeave'));
    this.scrollableCt.on('mousewheel', this.bound('onElementMouseWheel'));
    this.scrollableBody.on('Scrollable:contentHeightChange', this.bound('onContentHeightChange'));
    this.knob.on('mousedown', this.bound('onKnobMouseDown'));
    window.on('resize', this.bound('onWindowResize'));
    window.on('mousewheel', this.bound('onWindowMouseWheel'));
    this.scrollbar.fade('show');
    if (this.autoHide) {
      this.scrollbar.fade('hide');
    }
    this.actualize();
  };

  Scrollable.prototype.onElementMouseEnter = function() {
    if (this.scrollableBody.scrollHeight > this.scrollableCt.offsetHeight) {
      this.showContainer();
    }
    this.actualize();
  };

  Scrollable.prototype.onElementMouseLeave = function(e) {
    if (!this.active) {
      this.hideContainer();
    }
  };

  Scrollable.prototype.onElementMouseWheel = function(e) {
    var el;
    e.preventDefault();
    el = this.scrollableBody;
    if (e.wheel < 0 && el.scrollTop < el.scrollHeight - el.offsetHeight || e.wheel > 0 && el.scrollTop > 0) {
      el.scrollTop = el.scrollTop - this.normalizeWheelSpeed(e);
      this.actualize();
    }
  };

  Scrollable.prototype.normalizeWheelSpeed = function(e) {
    var normalized, rawAmount;
    e = e.event;
    if (e.wheelDelta) {
      normalized = e.wheelDelta % 120 - 0 === -0 ? e.wheelDelta / 120 : e.wheelDelta / 12;
      normalized *= 5;
    } else {
      rawAmount = e.deltaY ? e.deltaY : e.detail;
      normalized = -(rawAmount % 3 ? rawAmount * 10 : rawAmount / 3);
      normalized *= 30;
    }
    return normalized;
  };

  Scrollable.prototype.onContentHeightChange = function() {
    this.container.emit('heightchange', this.container);
  };

  Scrollable.prototype.onKnobMouseDown = function() {
    this.active = true;
    window.on('mouseup', this.bound('onWindowMouseUp'));
  };

  Scrollable.prototype.onWindowMouseUp = function(e) {
    this.active = false;
    window.un('mouseup', this.bound('onWindowMouseUp'));
  };

  Scrollable.prototype.onWindowResize = function() {
    this.actualize.delay(50, this);
  };

  Scrollable.prototype.onWindowMouseWheel = function() {
    if (this.scrollableBody.isVisible()) {
      this.actualize();
    }
  };

  Scrollable.prototype.actualize = function() {
    var diff, el, knobHeight, minHeight, pos;
    el = this.scrollableBody;
    setTimeout((function(_this) {
      return function() {
        _this.size = el.getSize();
        _this.position = el.getPosition();
        _this.slider.updateSize();
      };
    })(this), 50);
    if (this.proportional) {
      if (isNaN(this.proportionalMinHeight) || this.proportionalMinHeight <= 0) {
        throw new Error('Miwo.panel.Scrollpane::reposition(): option "proportionalMinHeight" is not a positive number.');
      } else {
        minHeight = Math.abs(this.proportionalMinHeight);
        knobHeight = el.scrollHeight !== 0 ? el.offsetHeight * (el.offsetHeight / el.scrollHeight) : 0;
        this.knob.setStyle('height', Math.max(knobHeight, minHeight));
      }
    }
    diff = el.scrollHeight - el.offsetHeight;
    pos = diff ? Math.round(el.scrollTop / diff * 100) : 0;
    this.slider.setStep(pos);
  };

  Scrollable.prototype.showContainer = function(force) {
    if (this.autoHide && this.fade && !this.active || force && this.fade) {
      this.scrollbar.fade(0.6);
    } else if (this.autoHide && !this.fade && !this.active || force && !this.fade) {
      this.scrollbar.fade('show');
    }
  };

  Scrollable.prototype.hideContainer = function(force) {
    if (this.autoHide && this.fade && !this.active || force && this.fade) {
      this.scrollbar.fade('out');
    } else if (this.autoHide && !this.fade && !this.active || force && !this.fade) {
      this.scrollbar.fade('hide');
    }
  };

  Scrollable.prototype.doDestroy = function() {
    window.un('resize', this.bound('onWindowResize'));
    window.un('mousewheel', this.bound('onWindowMouseWheel'));
    this.scrollbar.destroy();
    return Scrollable.__super__.doDestroy.apply(this, arguments);
  };

  return Scrollable;

})(Miwo.Object);

module.exports = Scrollable;


},{"../drag/Slider":13}],98:[function(require,module,exports){
module.exports = {
  Pane: require('./Pane'),
  Scrollable: require('./Scrollable')
};


},{"./Pane":96,"./Scrollable":97}],99:[function(require,module,exports){
var BaseDatePicker,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseDatePicker = (function(_super) {
  __extends(BaseDatePicker, _super);

  function BaseDatePicker() {
    return BaseDatePicker.__super__.constructor.apply(this, arguments);
  }

  BaseDatePicker.prototype.startDate = null;

  BaseDatePicker.prototype.endDate = null;

  BaseDatePicker.prototype.selectedDate = null;

  BaseDatePicker.prototype.activeDate = null;

  BaseDatePicker.prototype.focusedDate = null;

  BaseDatePicker.prototype.componentCls = 'datepicker';

  BaseDatePicker.prototype.moveIndex = null;

  BaseDatePicker.prototype.items = null;

  BaseDatePicker.prototype.doInit = function() {
    BaseDatePicker.__super__.doInit.apply(this, arguments);
    this.setActiveDate(this.activeDate || new Date());
    if (this.startDate) {
      this.setStartDate(this.startDate);
    }
    if (this.endDate) {
      this.setEndDate(this.endDate);
    }
  };

  BaseDatePicker.prototype.setStartDate = function(startDate) {
    this.startDate = startDate ? new Date(startDate.getFullYear(), startDate.getMonth(), 1) : null;
  };

  BaseDatePicker.prototype.setEndDate = function(endDate) {
    this.endDate = endDate ? new Date(endDate.getFullYear(), endDate.getMonth() + 1, 0) : null;
  };

  BaseDatePicker.prototype.setActiveDate = function(activeDate) {
    this.activeDate = new Date(activeDate.getTime());
    this.activeDate.setDate(1);
  };

  BaseDatePicker.prototype.setDate = function(date, silent) {
    if (date) {
      this.select(date, silent);
      this.activate(date);
    } else {
      this.select(null, silent);
      this.activate(new Date());
    }
  };

  BaseDatePicker.prototype.getDate = function() {
    return this.selectedDate;
  };

  BaseDatePicker.prototype.setFocus = function() {
    if (this.panel) {
      this.panel.setFocus();
    }
  };

  BaseDatePicker.prototype.select = function(date, silent) {
    if (date) {
      this.selectedDate = new Date(date.getTime());
      this.focusedDate = new Date(date.getTime());
      this.updateCalendar();
    } else {
      this.selectedDate = null;
      this.focusedDate = null;
      this.updateCalendar();
    }
    if (!silent) {
      this.emit('selected', this, this.selectedDate);
    }
    this.onSelected(this.selectedDate, silent);
  };

  BaseDatePicker.prototype.onSelected = function(date, silent) {};

  BaseDatePicker.prototype.activate = function(year, month) {
    if (Type.isDate(year)) {
      month = year.getMonth();
      year = year.getFullYear();
    }
    if (month !== void 0 && month !== null) {
      this.activeDate.setMonth(month);
    }
    if (year !== void 0 && year !== null) {
      this.activeDate.setFullYear(year);
    }
    this.renderCalendar();
  };

  BaseDatePicker.prototype.isDayEnabled = function(date) {
    if (this.startDate && this.endDate) {
      return date >= this.startDate && date <= this.endDate;
    } else if (this.startDate) {
      return date >= this.startDate;
    } else if (date <= this.endDate) {
      return true;
    } else {
      return true;
    }
  };

  BaseDatePicker.prototype.formatYear = function(date) {
    return date.getFullYear();
  };

  BaseDatePicker.prototype.formatMonth = function(date) {
    if (date.format) {
      return date.format('B');
    } else {
      return date.toString().split(' ')[1];
    }
  };

  BaseDatePicker.prototype.doRender = function() {
    this.renderPanel();
  };

  BaseDatePicker.prototype.renderPanel = function() {
    this.panel = new Element('table', {
      cls: 'table-condensed datepicker-panel',
      tabindex: -1,
      parent: this.el,
      html: '<thead></thead><tbody></tbody>'
    });
    this.renderHeader();
    this.renderCalendar();
  };

  BaseDatePicker.prototype.renderHeader = function() {
    var tr;
    tr = new Element('tr', {
      html: '<tr>' + '<th class="prev">«</th>' + '<th class="switch" colspan="2"></th>' + '<th class="next">»</th>' + '</tr>'
    });
    tr.inject(this.getElement('thead'));
  };

  BaseDatePicker.prototype.renderCalendar = function() {};

  BaseDatePicker.prototype.updateCalendar = function() {};

  BaseDatePicker.prototype.afterRender = function() {
    BaseDatePicker.__super__.afterRender.apply(this, arguments);
    this.panel.getElement('.prev').on('click', (function(_this) {
      return function() {
        _this.activatePrev();
      };
    })(this));
    this.panel.getElement('.next').on('click', (function(_this) {
      return function() {
        _this.activateNext();
      };
    })(this));
    this.panel.getElement('.switch').on('click', (function(_this) {
      return function() {
        _this.emit('switch', _this);
      };
    })(this));
    this.panel.on('click:relay(tbody td)', (function(_this) {
      return function(event, target) {
        var item;
        if (!target.hasClass('disabled')) {
          item = _this.items[target.get('data-index')];
          _this.select(item.date);
          if (item.foreign) {
            _this.activate(item.date);
          }
        }
      };
    })(this));
    this.panel.on('mouseenter:relay(tbody td)', (function(_this) {
      return function(event, target) {
        var item;
        item = _this.items[target.get('data-index')];
        if (_this.isDayEnabled(item.date)) {
          _this.focusedIndex = item.index;
          _this.focusedDate = new Date(item.date);
          _this.updateCalendar();
        }
      };
    })(this));
    this.keyListener = new Miwo.utils.KeyListener(this.panel, 'keydown');
    this.keyListener.pause();
    this.keyListener.on('up', (function(_this) {
      return function() {
        _this.tryMoveFocus(_this.moveIndex.up);
        return true;
      };
    })(this));
    this.keyListener.on('down', (function(_this) {
      return function() {
        _this.tryMoveFocus(_this.moveIndex.down);
        return true;
      };
    })(this));
    this.keyListener.on('left', (function(_this) {
      return function() {
        _this.tryMoveFocus(_this.moveIndex.left);
        return true;
      };
    })(this));
    this.keyListener.on('right', (function(_this) {
      return function() {
        _this.tryMoveFocus(_this.moveIndex.right);
        return true;
      };
    })(this));
    this.keyListener.on('enter', (function(_this) {
      return function() {
        var item;
        item = _this.items[_this.focusedIndex];
        _this.select(item.date);
        if (!item.foreign) {
          _this.activate(item.date);
        }
        return true;
      };
    })(this));
    if (!this.focusedDate) {
      if (this.selectedDate) {
        this.focusedDate = new Date(this.selectedDate.getTime());
      } else {
        this.focusedDate = new Date(this.activeDate.getTime());
      }
    }
    if (this.selectedDate) {
      this.activate(this.selectedDate);
    }
  };

  BaseDatePicker.prototype.doShow = function() {
    BaseDatePicker.__super__.doShow.apply(this, arguments);
    if (this.keyListener) {
      this.keyListener.resume();
    }
  };

  BaseDatePicker.prototype.doHide = function() {
    BaseDatePicker.__super__.doHide.apply(this, arguments);
    if (this.keyListener) {
      this.keyListener.pause();
    }
  };

  BaseDatePicker.prototype.doDestroy = function() {
    if (this.keyListener) {
      this.keyListener.destroy();
    }
    return BaseDatePicker.__super__.doDestroy.apply(this, arguments);
  };

  return BaseDatePicker;

})(Miwo.Component);

module.exports = BaseDatePicker;


},{}],100:[function(require,module,exports){
var Color, ColorPicker,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Color = require('../utils/Color');

ColorPicker = (function(_super) {
  __extends(ColorPicker, _super);

  function ColorPicker() {
    return ColorPicker.__super__.constructor.apply(this, arguments);
  }

  ColorPicker.prototype.xtype = "colorpicker";

  ColorPicker.prototype.color = "FFFFFF";

  ColorPicker.prototype.mapColor = null;

  ColorPicker.prototype.colorRe = /^[0-9A-F]{6}$/;

  ColorPicker.prototype.baseCls = 'colorpicker';

  ColorPicker.prototype.beforeInit = function() {
    ColorPicker.__super__.beforeInit.call(this);
    this.template = '<div miwo-reference="map" class="{baseCls map}">' + '<div class="{baseCls panel}"></div>' + '<div miwo-reference="point" class="{baseCls point}"></div>' + '</div>' + '<div class="{baseCls bar}">' + '<div miwo-reference="bar" class="bar"></div>' + '</div>' + '<div class="{baseCls utils}">' + '<div miwo-reference="preview" class="{baseCls preview}"></div>' + '<input miwo-reference="hexinput" type="text" class="{baseCls hex} form-control" maxlength="7" value="FFFFFF"/>' + '<button miwo-events="click:onBtnClick" class="btn btn-default">Select</button>' + '</div>';
  };

  ColorPicker.prototype.afterInit = function() {
    ColorPicker.__super__.afterInit.call(this);
    this.color = Color.fromHex(this.color);
    this.mapColor = Color.fromHsv(this.color.hue, 100, 100);
  };

  ColorPicker.prototype.afterRender = function() {
    ColorPicker.__super__.afterRender.call(this);
    this.hexinput.on("keyup", (function(_this) {
      return function() {
        _this.setColor(_this.hexinput.get("value"));
      };
    })(this));
    this.map.on("mousedown", (function(_this) {
      return function(event) {
        event.stop();
        document.on("mousemove", _this.bound("onMapMouseMove"));
        document.on("mouseup", _this.bound("onMapMouseUp"));
      };
    })(this));
    this.map.on("click", (function(_this) {
      return function(event) {
        event.stop();
        _this.updateMapOnMouseEvent(event);
      };
    })(this));
    this.bar.on("mousedown", (function(_this) {
      return function(event) {
        event.stop();
        document.on("mousemove", _this.bound("onBarMouseMove"));
        document.on("mouseup", _this.bound("onBarMouseUp"));
      };
    })(this));
    this.bar.on("click", (function(_this) {
      return function(event) {
        event.stop();
        _this.updateBarOnMouseEvent(event);
      };
    })(this));
    this.setColor(this.color.hex, true, true);
  };

  ColorPicker.prototype.setColor = function(color, update, silent) {
    color = color.toUpperCase();
    color = color.replace("#", "");
    if (this.isColorValid(color) && (this.color.hex !== color || update)) {
      this.color.setHex(color);
      this.mapColor = Color.fromHsv(this.color.hue, 100, 100);
      this.doSetHue(this.color.h);
      this.doSetSaturationAndValue(this.color.s, this.color.v);
      this.color.setHex(color);
      this.onColorChanged(silent);
    }
  };

  ColorPicker.prototype.getColor = function() {
    return this.color.hex;
  };

  ColorPicker.prototype.isColorValid = function(hex) {
    return this.colorRe.test(hex);
  };

  ColorPicker.prototype.onBarMouseUp = function(event) {
    event.stop();
    document.un("mousemove", this.bound("onBarMouseMove"));
    document.un("mouseup", this.bound("onBarMouseUp"));
  };

  ColorPicker.prototype.onBarMouseMove = function(event) {
    event.stop();
    this.updateBarOnMouseEvent(event);
  };

  ColorPicker.prototype.updateBarOnMouseEvent = function(e) {
    var pos, yValue;
    pos = this.bar.getPosition();
    yValue = Math.min(Math.max(0, e.page.y - pos.y), 256);
    this.setHue(360 - Math.round((360 / 256) * yValue));
  };

  ColorPicker.prototype.setHue = function(hue) {
    if (this.color.hue !== hue) {
      this.doSetHue(hue);
      this.onColorChanged();
    }
  };

  ColorPicker.prototype.doSetHue = function(hue) {
    this.color.setHsv(hue, null, null);
    this.mapColor.setHsv(hue, 100, 100);
    this.map.setStyle("background-color", "#" + this.mapColor.hex);
  };

  ColorPicker.prototype.onMapMouseUp = function(event) {
    event.stop();
    document.un("mousemove", this.bound("onMapMouseMove"));
    document.un("mouseup", this.bound("onMapMouseUp"));
  };

  ColorPicker.prototype.onMapMouseMove = function(event) {
    event.stop();
    this.updateMapOnMouseEvent(event);
  };

  ColorPicker.prototype.updateMapOnMouseEvent = function(event) {
    var pos, s, v, xValue, yValue;
    pos = this.map.getPosition();
    xValue = Math.min(Math.max(0, event.page.x - pos.x), 256);
    yValue = Math.min(Math.max(0, event.page.y - pos.y), 256);
    s = Math.round((100 / 256) * xValue);
    v = 100 - Math.round((100 / 256) * yValue);
    this.setSaturationAndValue(s, v);
  };

  ColorPicker.prototype.setSaturationAndValue = function(s, v) {
    if (this.color.s !== s || this.color.v !== v) {
      this.doSetSaturationAndValue(s, v);
      this.onColorChanged();
    }
  };

  ColorPicker.prototype.doSetSaturationAndValue = function(s, v) {
    this.color.setHsv(null, s, v);
    this.point.setPosition({
      x: (s / 100) * 256 - 8,
      y: 256 - (v / 100) * 256 - 8
    });
  };

  ColorPicker.prototype.onColorChanged = function(silent) {
    this.preview.setStyle("background-color", "#" + this.color.hex);
    this.hexinput.set("value", this.color.hex);
    if (!silent) {
      this.emit("changed", this, this.color.hex);
    }
  };

  ColorPicker.prototype.onBtnClick = function() {
    this.emit("selected", this, this.color.hex);
  };

  return ColorPicker;

})(Miwo.Component);

module.exports = ColorPicker;


},{"../utils/Color":129}],101:[function(require,module,exports){
var DatePicker, DayPicker, MonthPicker, YearPicker,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

DayPicker = require('./Day');

MonthPicker = require('./Month');

YearPicker = require('./Year');

DatePicker = (function(_super) {
  __extends(DatePicker, _super);

  function DatePicker() {
    return DatePicker.__super__.constructor.apply(this, arguments);
  }

  DatePicker.prototype.startDate = null;

  DatePicker.prototype.endDate = null;

  DatePicker.prototype.selectedDate = null;

  DatePicker.prototype.rangeStart = null;

  DatePicker.prototype.rangeEnd = null;

  DatePicker.prototype.rangeSelector = 'end';

  DatePicker.prototype.todayBtn = false;

  DatePicker.prototype.clearBtn = false;

  DatePicker.prototype.doInit = function() {
    DatePicker.__super__.doInit.apply(this, arguments);
    this.componentCls = 'datepicker';
    this.activeDate = new Date();
    this.activeDate.setDate(1);
    this.add('day', this.createComponentDay());
    this.add('month', this.createComponentMonth());
    this.add('year', this.createComponentYear());
  };

  DatePicker.prototype.createComponentDay = function() {
    var picker;
    picker = new DayPicker({
      visible: false,
      activeDate: this.activeDate,
      startDate: this.startDate,
      endDate: this.endDate,
      selectedDate: this.selectedDate,
      rangeStart: this.rangeStart,
      rangeEnd: this.rangeEnd,
      rangeSelector: this.rangeSelector
    });
    picker.on('switch', (function(_this) {
      return function() {
        picker.hide();
        _this.get('month').activate(picker.activeDate);
        _this.get('month').select(picker.selectedDate, true);
        _this.get('month').show();
        _this.emit('switch', _this, 'month');
      };
    })(this));
    picker.on('selected', (function(_this) {
      return function(picker, date) {
        _this.emit('selected', _this, date);
      };
    })(this));
    return picker;
  };

  DatePicker.prototype.createComponentMonth = function() {
    var picker;
    picker = new MonthPicker({
      visible: false,
      activeDate: this.activeDate,
      startDate: this.startDate,
      endDate: this.endDate,
      selectedDate: this.selectedDate
    });
    picker.on('switch', (function(_this) {
      return function() {
        picker.hide();
        _this.get('year').show();
        _this.emit('switch', _this, 'year');
      };
    })(this));
    picker.on('selected', (function(_this) {
      return function() {
        picker.hide();
        _this.get('day').activate(picker.selectedDate);
        _this.get('day').show();
        _this.emit('switch', _this, 'day');
      };
    })(this));
    return picker;
  };

  DatePicker.prototype.createComponentYear = function() {
    var picker;
    picker = new YearPicker({
      visible: false,
      activeDate: this.activeDate,
      startDate: this.startDate,
      endDate: this.endDate,
      selectedDate: this.selectedDate
    });
    picker.on('selected', (function(_this) {
      return function() {
        picker.hide();
        _this.get('month').activate(picker.selectedDate);
        _this.get('month').show();
        _this.emit('switch', _this, 'month');
      };
    })(this));
    return picker;
  };

  DatePicker.prototype.activate = function(year, month) {
    this.get('day').activate(year, month);
  };

  DatePicker.prototype.select = function(date, silent) {
    this.get('day').select(date, silent);
  };

  DatePicker.prototype.setDate = function(date, silent) {
    this.get('day').setDate(date, silent);
  };

  DatePicker.prototype.setStartDate = function(date) {
    this.getComponents().each(function(picker) {
      return picker.setStartDate(date);
    });
  };

  DatePicker.prototype.setEndDate = function(date) {
    this.getComponents().each(function(picker) {
      return picker.setEndDate(date);
    });
  };

  DatePicker.prototype.setRange = function(rangeStart, rangeEnd, silent) {
    this.get('day').setRange(rangeStart, rangeEnd, silent);
  };

  DatePicker.prototype.setTodayBtn = function(todayBtn) {
    this.todayBtn = todayBtn;
    if (this.rendered) {
      this.getElement('.todayBtn').setVisible(this.todayBtn);
    }
  };

  DatePicker.prototype.setClearBtn = function(clearBtn) {
    this.clearBtn = clearBtn;
    if (this.rendered) {
      this.getElement('.clearBtn').setVisible(this.clearBtn);
    }
  };

  DatePicker.prototype.getDate = function() {
    return this.get('day').getDate();
  };

  DatePicker.prototype.setType = function(type) {
    if (type == null) {
      type = 'date';
    }
    this.type = type;
  };

  DatePicker.prototype.setFocus = function() {
    this.get('day').setFocus();
  };

  DatePicker.prototype.doRender = function() {
    var table, tbody, td, tr;
    DatePicker.__super__.doRender.apply(this, arguments);
    table = new Element('table', {
      parent: this.el,
      cls: 'table-condensed datepicker-footer'
    });
    tbody = new Element('tbody', {
      parent: table
    });
    tr = new Element('tr', {
      parent: tbody
    });
    td = new Element('td', {
      html: miwo.tr('miwo.picker.today'),
      cls: 'todayBtn',
      parent: tr
    });
    td.setVisible(this.todayBtn);
    td = new Element('td', {
      html: miwo.tr('miwo.picker.clear'),
      cls: 'clearBtn',
      parent: tr
    });
    td.setVisible(this.clearBtn);
  };

  DatePicker.prototype.afterRender = function() {
    DatePicker.__super__.afterRender.apply(this, arguments);
    this.get('day').show();
    this.getElement('.todayBtn').on('click', (function(_this) {
      return function() {
        return _this.setDate(new Date());
      };
    })(this));
    this.getElement('.clearBtn').on('click', (function(_this) {
      return function() {
        return _this.setDate(null);
      };
    })(this));
  };

  return DatePicker;

})(Miwo.Container);

module.exports = DatePicker;


},{"./Day":102,"./Month":103,"./Year":106}],102:[function(require,module,exports){
var BaseDatePicker, DayPicker,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseDatePicker = require('./BaseDate');

DayPicker = (function(_super) {
  __extends(DayPicker, _super);

  function DayPicker() {
    return DayPicker.__super__.constructor.apply(this, arguments);
  }

  DayPicker.prototype.xtype = "daypicker";

  DayPicker.prototype.baseCls = 'daypicker';

  DayPicker.prototype.rangeStart = null;

  DayPicker.prototype.rangeEnd = null;

  DayPicker.prototype.rangeSelector = null;

  DayPicker.prototype.beforeInit = function() {
    DayPicker.__super__.beforeInit.apply(this, arguments);
    this.moveIndex = {
      'up': -7,
      'down': 7,
      'right': 1,
      'left': -1
    };
  };

  DayPicker.prototype.setRange = function(rangeStart, rangeEnd, silent) {
    this.rangeStart = rangeStart === false ? null : rangeStart || this.rangeStart;
    this.rangeEnd = rangeEnd === false ? null : rangeEnd || this.rangeEnd;
    if (!silent) {
      this.emit('range', this, this.rangeStart, this.rangeEnd);
    }
    this.onRangeChanged(silent);
    if (this.rendered) {
      this.updateCalendar();
    }
  };

  DayPicker.prototype.setStartDate = function(startDate) {
    this.startDate = new Date(startDate.getTime());
  };

  DayPicker.prototype.setEndDate = function(endDate) {
    this.endDate = new Date(endDate.getTime());
  };

  DayPicker.prototype.onRangeChanged = function(silent) {};

  DayPicker.prototype.activateNext = function() {
    this.activate(null, this.activeDate.getMonth() + 1);
  };

  DayPicker.prototype.activatePrev = function() {
    this.activate(null, this.activeDate.getMonth() - 1);
  };

  DayPicker.prototype.onSelected = function(silent) {
    if (this.rangeSelector === 'end') {
      this.setRange(null, this.selectedDate, silent);
    } else if (this.rangeSelector === 'start') {
      this.setRange(this.selectedDate, null, silent);
    }
  };

  DayPicker.prototype.renderHeader = function() {
    var tr;
    tr = new Element('tr', {
      html: '<tr>' + '<th class="prev">«</th>' + '<th class="switch" colspan="5"></th>' + '<th class="next">»</th>' + '</tr>'
    });
    tr.inject(this.getElement('thead'));
    tr = new Element('tr', {
      html: '<tr>' + '<th class="dow">Su</th>' + '<th class="dow">Mo</th>' + '<th class="dow">Tu</th>' + '<th class="dow">We</th>' + '<th class="dow">Th</th>' + '<th class="dow">Fr</th>' + '<th class="dow">Sa</th>' + '</tr>'
    });
    tr.inject(this.getElement('thead'));
  };

  DayPicker.prototype.renderCalendar = function() {
    var body, date, enabledNextFirstDay, enabledPrevLastDay, first, firstDay, i, index, item, j, lastDay, length, nextFirstDay, prevLastDay, td, toDay, toDayDate, toDayIndex, tr, _i, _j, _k, _l, _m, _ref;
    date = this.activeDate;
    firstDay = new Date(date.getFullYear(), date.getMonth(), 1);
    lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);
    prevLastDay = new Date(date.getFullYear(), date.getMonth(), 0);
    nextFirstDay = new Date(date.getFullYear(), date.getMonth() + 1, 1);
    toDay = new Date().toDateString();
    this.focusedIndex = null;
    this.items = [];
    first = firstDay.getDay() - 1;
    if (first <= 0) {
      first = 6;
    }
    for (i = _i = first; _i >= 0; i = _i += -1) {
      this.items.push({
        foreign: true,
        date: new Date(date.getFullYear(), date.getMonth(), -i)
      });
    }
    for (i = _j = 1, _ref = lastDay.getDate(); 1 <= _ref ? _j <= _ref : _j >= _ref; i = 1 <= _ref ? ++_j : --_j) {
      this.items.push({
        foreign: false,
        date: new Date(date.getFullYear(), date.getMonth(), i)
      });
    }
    length = this.items.length;
    for (i = _k = length; length <= 42 ? _k <= 42 : _k >= 42; i = length <= 42 ? ++_k : --_k) {
      this.items.push({
        foreign: true,
        date: new Date(date.getFullYear(), date.getMonth() + 1, i - length + 1)
      });
    }
    body = this.panel.getElement('tbody');
    body.empty();
    for (i = _l = 0; _l <= 5; i = ++_l) {
      tr = new Element('tr', {
        parent: body
      });
      for (j = _m = 0; _m <= 6; j = ++_m) {
        index = i * 7 + j;
        item = this.items[index];
        td = new Element('td', {
          parent: tr,
          html: item.date.getDate(),
          'data-index': index
        });
        if (this.isFocused(item.date)) {
          this.focusedIndex = index;
          this.focusedDate = item.date;
        }
        if (toDay === item.date.toDateString()) {
          td.addClass('today');
          toDayIndex = index;
          toDayDate = item.date;
        }
        item.index = index;
        item.cell = td;
      }
    }
    this.updateCalendar();
    if (!this.focusedDate && toDayDate) {
      this.focusedDate = toDayDate;
      this.focusedIndex = toDayIndex;
    }
    enabledPrevLastDay = this.isDayEnabled(prevLastDay);
    enabledNextFirstDay = this.isDayEnabled(nextFirstDay);
    this.panel.getElement('.prev').toggleClass('invisible', !enabledPrevLastDay);
    this.panel.getElement('.next').toggleClass('invisible', !enabledNextFirstDay);
    this.panel.getElement('.switch').toggleClass('disabled', !enabledNextFirstDay && !enabledPrevLastDay);
    this.panel.getElement('.switch').set('html', this.formatMonth(date) + ' ' + this.formatYear(date));
  };

  DayPicker.prototype.updateCalendar = function() {
    var i, item, _i;
    for (i = _i = 0; _i <= 41; i = ++_i) {
      item = this.items[i];
      item.cell.toggleClass('inactive', item.foreign).toggleClass('disabled', !this.isDayEnabled(item.date)).toggleClass('selected', this.isSelected(item.date)).toggleClass('focus', this.isFocused(item.date)).toggleClass('range-item', this.isDayInRange(item.date)).toggleClass('range-start', this.isSameDates(this.rangeStart, item.date)).toggleClass('range-end', this.isSameDates(this.rangeEnd, item.date));
    }
  };

  DayPicker.prototype.isSelected = function(date) {
    return this.selectedDate !== null && this.isSameDates(this.selectedDate, date);
  };

  DayPicker.prototype.isFocused = function(date) {
    return this.focusedDate !== null && this.isSameDates(this.focusedDate, date);
  };

  DayPicker.prototype.isDayInRange = function(date) {
    return this.rangeStart !== null && this.rangeEnd !== null && this.rangeStart <= date && this.rangeEnd >= date;
  };

  DayPicker.prototype.isSameDates = function(dateA, dateB) {
    return dateA !== null && dateB !== null && dateA.toDateString() === dateB.toDateString();
  };

  DayPicker.prototype.tryMoveFocus = function(index) {
    var date, focusedIndex;
    if (!this.focusedDate) {
      return;
    }
    date = this.focusedDate.getDate();
    focusedIndex = this.focusedIndex;
    this.focusedIndex += index;
    this.focusedDate.setDate(date + index);
    if (!this.items[this.focusedIndex]) {
      console.log("In component " + this.name + " was error");
      this.focusedDate.setDate(date);
      this.focusedIndex = focusedIndex;
      return;
    }
    if (this.isDayEnabled(this.focusedDate)) {
      if (this.focusedIndex < 0 || this.items[this.focusedIndex].foreign) {
        if (this.focusedIndex < 15) {
          this.activatePrev();
        } else {
          this.activateNext();
        }
      } else {
        this.updateCalendar();
      }
    } else {
      this.focusedDate.setDate(date);
      this.focusedIndex = focusedIndex;
    }
  };

  return DayPicker;

})(BaseDatePicker);

module.exports = DayPicker;


},{"./BaseDate":99}],103:[function(require,module,exports){
var BaseDatePicker, MonthPicker,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseDatePicker = require('./BaseDate');

MonthPicker = (function(_super) {
  __extends(MonthPicker, _super);

  function MonthPicker() {
    return MonthPicker.__super__.constructor.apply(this, arguments);
  }

  MonthPicker.prototype.xtype = "monthpicker";

  MonthPicker.prototype.baseCls = 'monthpicker';

  MonthPicker.prototype.beforeInit = function() {
    MonthPicker.__super__.beforeInit.apply(this, arguments);
    this.moveIndex = {
      'up': -4,
      'down': 4,
      'right': 1,
      'left': -1
    };
  };

  MonthPicker.prototype.activatePrev = function() {
    this.activate(this.activeDate.getFullYear() - 1);
  };

  MonthPicker.prototype.activateNext = function() {
    this.activate(this.activeDate.getFullYear() + 1);
  };

  MonthPicker.prototype.renderCalendar = function() {
    var body, date, enabledNextYear, enabledPrevYear, i, index, item, j, nextYear, prevYear, tr, _i, _j, _k;
    date = this.activeDate;
    prevYear = new Date(date.getFullYear() - 1, 12, 0);
    nextYear = new Date(date.getFullYear() + 1, 1, 1);
    this.focusedIndex = null;
    this.items = [];
    for (i = _i = 0; _i <= 11; i = ++_i) {
      this.items.push({
        date: new Date(date.getFullYear(), i, 1),
        index: i
      });
    }
    body = this.panel.getElement('tbody');
    body.empty();
    for (i = _j = 0; _j <= 2; i = ++_j) {
      tr = new Element('tr', {
        parent: body
      });
      for (j = _k = 0; _k <= 3; j = ++_k) {
        index = i * 4 + j;
        item = this.items[index];
        item.cell = new Element('td', {
          parent: tr,
          html: this.formatMonth(item.date),
          'data-index': index
        });
        if (!this.isDayEnabled(item.date)) {
          item.cell.addClass('disabled');
        }
        if (this.isSelected(item.date)) {
          item.cell.addClass('selected');
        }
        if (this.isFocused(item.date)) {
          item.cell.addClass('focus');
          this.focusedIndex = index;
        }
      }
    }
    enabledPrevYear = this.isDayEnabled(prevYear);
    enabledNextYear = this.isDayEnabled(nextYear);
    this.panel.getElement('.prev').toggleClass('invisible', !enabledPrevYear);
    this.panel.getElement('.next').toggleClass('invisible', !enabledNextYear);
    this.panel.getElement('.switch').toggleClass('disabled', !enabledPrevYear && !enabledNextYear);
    this.panel.getElement('.switch').set('html', date.getFullYear());
  };

  MonthPicker.prototype.updateCalendar = function() {
    var i, item, _i;
    for (i = _i = 0; _i <= 11; i = ++_i) {
      item = this.items[i];
      item.cell.toggleClass('disabled', !this.isDayEnabled(item.date)).toggleClass('selected', this.isSelected(item.date)).toggleClass('focus', this.isFocused(item.date));
    }
  };

  MonthPicker.prototype.isSelected = function(date) {
    return this.selectedDate !== null && this.selectedDate.getYear() === date.getYear() && this.selectedDate.getMonth() === date.getMonth();
  };

  MonthPicker.prototype.isFocused = function(date) {
    return this.focusedDate !== null && this.focusedDate.getYear() === date.getYear() && this.focusedDate.getMonth() === date.getMonth();
  };

  MonthPicker.prototype.tryMoveFocus = function(index) {
    var focusedIndex, month;
    month = this.focusedDate.getMonth();
    focusedIndex = this.focusedIndex;
    this.focusedIndex += index;
    this.focusedDate.setMonth(month + index);
    if (this.isDayEnabled(this.focusedDate)) {
      this.updateCalendar();
    } else {
      this.focusedDate.setMonth(month);
      this.focusedDateIndex = focusedIndex;
    }
  };

  return MonthPicker;

})(BaseDatePicker);

module.exports = MonthPicker;


},{"./BaseDate":99}],104:[function(require,module,exports){
var ColorPicker, DatePicker, PickerManager, Popover;

Popover = require('../tip/Popover');

ColorPicker = require('./Color');

DatePicker = require('./Date');

PickerManager = (function() {
  function PickerManager() {}

  PickerManager.prototype.createPopoverPicker = function(type, config) {
    var factory;
    factory = 'create' + type.capitalize() + 'Picker';
    if (!this[factory]) {
      throw new Error("Undefined factory function for '" + type + "' picker");
    }
    return this[factory](config);
  };

  PickerManager.prototype.createColorPicker = function(config) {
    var popover;
    popover = new Popover({
      target: config.target,
      placement: config.placement,
      closeMode: config.closeMode || 'close',
      title: miwo.tr('miwo.pickers.selectColor'),
      styles: {
        maxWidth: 500
      }
    });
    popover.add('picker', new ColorPicker(config));
    return popover;
  };

  PickerManager.prototype.createDatePicker = function(config) {
    var picker, popover;
    popover = new Popover({
      target: config.target,
      placement: config.placement,
      closeMode: config.closeMode || 'close',
      title: '',
      styles: {
        width: 260
      }
    });
    picker = new DatePicker(config);
    picker.on('switch', (function(_this) {
      return function() {
        popover.updatePosition();
      };
    })(this));
    popover.add('picker', picker);
    return popover;
  };

  return PickerManager;

})();

module.exports = PickerManager;


},{"../tip/Popover":123,"./Color":100,"./Date":101}],105:[function(require,module,exports){



},{}],106:[function(require,module,exports){
var BaseDatePicker, YearPicker,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseDatePicker = require('./BaseDate');

YearPicker = (function(_super) {
  __extends(YearPicker, _super);

  function YearPicker() {
    return YearPicker.__super__.constructor.apply(this, arguments);
  }

  YearPicker.prototype.xtype = "yearpicker";

  YearPicker.prototype.baseCls = 'yearpicker';

  YearPicker.prototype.beforeInit = function() {
    YearPicker.__super__.beforeInit.apply(this, arguments);
    this.moveIndex = {
      'up': -4,
      'down': 4,
      'right': 1,
      'left': -1
    };
  };

  YearPicker.prototype.activatePrev = function() {
    this.activate(this.activeDate.getFullYear() - 10);
  };

  YearPicker.prototype.activateNext = function() {
    this.activate(this.activeDate.getFullYear() + 10);
  };

  YearPicker.prototype.renderCalendar = function() {
    var body, date, enabledNextYear, enabledPrevYear, firstYear, i, index, item, j, lastYear, nextYear, prevYear, tr, _i, _j, _k;
    date = this.activeDate;
    prevYear = new Date(date.getFullYear() - 1, 0, 1);
    nextYear = new Date(date.getFullYear() + 10, 0, 1);
    this.focusedIndex = null;
    this.items = [];
    for (i = _i = 0; _i <= 11; i = ++_i) {
      this.items.push({
        date: new Date(date.getFullYear() + i - 1, 0, 1),
        index: i,
        foreign: i === 0 && i === 11
      });
    }
    body = this.panel.getElement('tbody');
    body.empty();
    for (i = _j = 0; _j <= 2; i = ++_j) {
      tr = new Element('tr', {
        parent: body
      });
      for (j = _k = 0; _k <= 3; j = ++_k) {
        index = i * 4 + j;
        item = this.items[index];
        item.cell = new Element('td', {
          parent: tr,
          html: this.formatYear(item.date),
          'data-index': index
        });
        if (!this.isDayEnabled(item.date)) {
          item.cell.addClass('disabled');
        }
        if (this.isSelected(item.date)) {
          item.cell.addClass('selected');
        }
        if (this.isFocused(item.date)) {
          item.cell.addClass('focus');
          this.focusedIndex = index;
        }
      }
    }
    firstYear = new Date(date.getFullYear(), 0, 1);
    lastYear = new Date(date.getFullYear() + 9, 0, 1);
    enabledPrevYear = this.isDayEnabled(prevYear);
    enabledNextYear = this.isDayEnabled(nextYear);
    this.panel.getElement('.prev').toggleClass('invisible', !enabledPrevYear);
    this.panel.getElement('.next').toggleClass('invisible', !enabledNextYear);
    this.panel.getElement('.switch').toggleClass('disabled', !enabledPrevYear && !enabledNextYear);
    this.panel.getElement('.switch').set('html', this.formatYear(firstYear) + ' - ' + this.formatYear(lastYear));
  };

  YearPicker.prototype.updateCalendar = function() {
    var i, item, _i;
    for (i = _i = 0; _i <= 11; i = ++_i) {
      item = this.items[i];
      item.cell.toggleClass('disabled', !this.isDayEnabled(item.date)).toggleClass('selected', this.isSelected(item.date)).toggleClass('focus', this.isFocused(item.date));
    }
  };

  YearPicker.prototype.isSelected = function(date) {
    return this.selectedDate !== null && this.selectedDate.getYear() === date.getYear();
  };

  YearPicker.prototype.isFocused = function(date) {
    return this.focusedDate !== null && this.focusedDate.getYear() === date.getYear();
  };

  YearPicker.prototype.tryMoveFocus = function(index) {
    var focusedIndex, year;
    year = this.focusedDate.getFullYear();
    focusedIndex = this.focusedIndex;
    this.focusedIndex += index;
    this.focusedDate.setFullYear(year + index);
    if (this.isDayEnabled(this.focusedDate)) {
      if (this.focusedIndex < 0 || this.items[this.focusedIndex].foreign) {
        if (this.focusedIndex < 6) {
          this.activatePrev();
        } else {
          this.activateNext();
        }
      } else {
        this.updateCalendar();
      }
    } else {
      this.focusedDate.setFullYear(year);
      this.focusedDateIndex = focusedIndex;
    }
  };

  return YearPicker;

})(BaseDatePicker);

module.exports = YearPicker;


},{"./BaseDate":99}],107:[function(require,module,exports){
module.exports = {
  PickerManager: require('./PickerManager'),
  Color: require('./Color'),
  Day: require('./Day'),
  Month: require('./Month'),
  Year: require('./Year'),
  Date: require('./Date'),
  Time: require('./Time')
};


},{"./Color":100,"./Date":101,"./Day":102,"./Month":103,"./PickerManager":104,"./Time":105,"./Year":106}],108:[function(require,module,exports){
var Bar,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Bar = (function(_super) {
  __extends(Bar, _super);

  function Bar() {
    return Bar.__super__.constructor.apply(this, arguments);
  }

  Bar.prototype.value = 50;

  Bar.prototype.minWidth = null;

  Bar.prototype.desc = '';

  Bar.prototype.type = null;

  Bar.prototype.hideValue = false;

  Bar.prototype.striped = false;

  Bar.prototype.active = false;

  Bar.prototype.baseCls = 'progress-bar';

  Bar.prototype.role = 'progressbar';

  Bar.prototype.progressEl = null;

  Bar.prototype.statusEl = null;

  Bar.prototype.valueEl = null;

  Bar.prototype.descEl = null;

  Bar.prototype.setValue = function(value) {
    this.value = value;
    this.emit('change', this, value);
    if (!this.rendered) {
      return;
    }
    this.el.setStyle('width', value + '%');
    this.el.set('aria-valuenow', value);
    this.valueEl.set('text', value + '%');
  };

  Bar.prototype.setDescription = function(desc) {
    this.desc = desc;
    if (!this.rendered) {
      return;
    }
    this.descEl.set('html', desc);
  };

  Bar.prototype.setType = function(type) {
    if (this.type) {
      this.el.removeClass('progress-bar-' + this.type);
    }
    if (type) {
      this.el.addClass('progress-bar-' + type);
    }
    this.type = type;
    this.emit('type', this, type);
  };

  Bar.prototype.setActive = function(active) {
    if (active == null) {
      active = true;
    }
    this.active = active;
    this.emit('active', this, active);
    if (!this.rendered) {
      return;
    }
    this.progressEl.toggleClass('progress-bar-active', active);
  };

  Bar.prototype.setHideValue = function(hideValue) {
    this.hideValue = hideValue;
    if (!this.rendered) {
      return;
    }
    this.valueEl.setVisible(!this.hideValue);
  };

  Bar.prototype.getValue = function() {
    return this.value;
  };

  Bar.prototype.doRender = function() {
    this.el.set('html', '<span miwo-reference="labelEl" class="progress-bar-label">' + '<span miwo-reference="valueEl" class="progress-bar-value">' + this.value + '%</span> ' + '<span miwo-reference="descEl" class="progress-bar-desc">' + this.desc + '</span>' + '</span>');
  };

  Bar.prototype.afterRender = function() {
    Bar.__super__.afterRender.apply(this, arguments);
    this.valueEl.setVisible(!this.hideValue);
    if (this.type) {
      this.el.addClass('progress-bar-' + this.type);
    }
    if (this.striped) {
      this.el.addClass('progress-bar-striped');
    }
    if (this.active) {
      this.el.addClass('active');
    }
    if (this.minWidth) {
      this.el.setStyle('min-width', this.minWidth + 'em');
    }
    this.el.setStyle('width', this.value + '%');
    this.el.set('aria-valuenow', this.value);
    this.el.set('aria-valuemin', 0);
    this.el.set('aria-valuemax', 100);
  };

  return Bar;

})(Miwo.Component);

module.exports = Bar;


},{}],109:[function(require,module,exports){
var Bar, ProgressBar,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Bar = require('./Bar');

ProgressBar = (function(_super) {
  __extends(ProgressBar, _super);

  ProgressBar.prototype.bar = null;

  ProgressBar.prototype.baseCls = 'progress';

  function ProgressBar(config) {
    this.bar = new Bar(config);
    ProgressBar.__super__.constructor.call(this, config);
    return;
  }

  ProgressBar.prototype.doInit = function() {
    ProgressBar.__super__.doInit.apply(this, arguments);
    this.add('bar', this.bar);
  };

  ProgressBar.prototype.setValue = function(value) {
    return this.bar.setValue(value);
  };

  ProgressBar.prototype.setDescription = function(desc) {
    return this.bar.setDescription(desc);
  };

  ProgressBar.prototype.setType = function(type) {
    return this.bar.setType(type);
  };

  ProgressBar.prototype.setActive = function(active) {
    return this.bar.setActive(active);
  };

  ProgressBar.prototype.setHideValue = function(hideValue) {
    return this.bar.setHideValue(hideValue);
  };

  ProgressBar.prototype.getValue = function() {
    return this.bar.getValue();
  };

  return ProgressBar;

})(Miwo.Container);

module.exports = ProgressBar;


},{"./Bar":108}],110:[function(require,module,exports){
var Bar, StackedBar,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Bar = require('./Bar');

StackedBar = (function(_super) {
  __extends(StackedBar, _super);

  function StackedBar() {
    return StackedBar.__super__.constructor.apply(this, arguments);
  }

  StackedBar.prototype.baseCls = 'progress';

  StackedBar.prototype.addBar = function(name, config) {
    return this.add(name, new Bar(config));
  };

  return StackedBar;

})(Miwo.Container);

module.exports = StackedBar;


},{"./Bar":108}],111:[function(require,module,exports){
module.exports = {
  Bar: require('./Bar'),
  ProgressBar: require('./ProgressBar'),
  StackedBar: require('./StackedBar')
};


},{"./Bar":108,"./ProgressBar":109,"./StackedBar":110}],112:[function(require,module,exports){
var BaseSelector,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseSelector = (function(_super) {
  __extends(BaseSelector, _super);

  function BaseSelector() {
    return BaseSelector.__super__.constructor.apply(this, arguments);
  }

  BaseSelector.prototype.isSelector = true;

  BaseSelector.prototype.checkerRequired = false;

  BaseSelector.prototype.grid = null;

  BaseSelector.prototype.selection = null;

  BaseSelector.prototype.setGrid = function(grid) {
    this.grid = grid;
    this.mon(grid, 'render', 'gridRender');
    this.mon(grid, 'refresh', 'gridRefresh');
  };

  BaseSelector.prototype.setSelectionModel = function(selection) {
    this.selection = selection;
    this.mon(selection, 'select', 'modelSelect');
    this.mon(selection, 'deselect', 'modelDeselect');
    this.mon(selection, 'change', 'modelChange');
  };

  BaseSelector.prototype.gridRefresh = function(grid) {};

  BaseSelector.prototype.gridRender = function(grid) {
    grid.el.addClass('grid-select-' + this.type);
  };

  BaseSelector.prototype.modelSelect = function(selection, record, rowIndex) {};

  BaseSelector.prototype.modelDeselect = function(selection, record, rowIndex) {};

  BaseSelector.prototype.modelChange = function(selection, rs) {};

  BaseSelector.prototype.doDestroy = function() {
    this.grid = null;
    this.selection = null;
    return BaseSelector.__super__.doDestroy.apply(this, arguments);
  };

  return BaseSelector;

})(Miwo.Object);

module.exports = BaseSelector;


},{}],113:[function(require,module,exports){
var CheckSelector, RowSelector,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

RowSelector = require('./RowSelector');

CheckSelector = (function(_super) {
  __extends(CheckSelector, _super);

  function CheckSelector() {
    return CheckSelector.__super__.constructor.apply(this, arguments);
  }

  CheckSelector.prototype.type = 'check';

  CheckSelector.prototype.selectOnRowClick = false;

  CheckSelector.prototype.checkerRequired = true;

  CheckSelector.prototype.setCheckColumn = function(column) {
    this.column = column;
    this.mon(column, 'rowcheck', 'onRowCheck');
    this.mon(column, 'headercheck', 'onHeaderCheck');
  };

  CheckSelector.prototype.onRowCheck = function(column, row, checked) {
    var rec;
    rec = row.retrieve('record');
    this.selection.setSelected(rec, checked);
  };

  CheckSelector.prototype.onHeaderCheck = function(column, checked) {
    this.selection.setSelectedAll(checked);
  };

  CheckSelector.prototype.modelSelect = function(selection, record) {
    this.column.setCheckedRow(record, true);
  };

  CheckSelector.prototype.modelDeselect = function(selection, record) {
    this.column.setCheckedRow(record, false);
  };

  CheckSelector.prototype.modelChange = function(selection, rs) {
    var selectedAll;
    CheckSelector.__super__.modelChange.call(this, selection, rs);
    selectedAll = selection.getTotalSelectableCount() === selection.getCount();
    this.column.setCheckedHeader(selectedAll && selection.hasSelection());
  };

  CheckSelector.prototype.gridRender = function(grid) {
    CheckSelector.__super__.gridRender.call(this, grid);
    this.setCheckColumn(grid.checker);
  };

  CheckSelector.prototype.gridRefresh = function(grid) {
    var sm;
    if (!this.column) {
      throw new Error("Check selector is not binded with column. You should call setCheckColumn(). Maybe grid is not rendered");
    }
    sm = grid.getSelectionModel();
    grid.getRecords().each((function(_this) {
      return function(rec) {
        if (!sm.isSelectable(rec)) {
          _this.column.setDisabledRow(rec, true);
        }
      };
    })(this));
    sm.getSelection().each((function(_this) {
      return function(rec) {
        _this.modelSelect(sm, rec);
      };
    })(this));
  };

  CheckSelector.prototype.doDestroy = function() {
    this.column = null;
    return CheckSelector.__super__.doDestroy.apply(this, arguments);
  };

  return CheckSelector;

})(RowSelector);

module.exports = CheckSelector;


},{"./RowSelector":114}],114:[function(require,module,exports){
var BaseSelector, RowSelector,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseSelector = require('./BaseSelector');

RowSelector = (function(_super) {
  __extends(RowSelector, _super);

  function RowSelector() {
    return RowSelector.__super__.constructor.apply(this, arguments);
  }

  RowSelector.prototype.type = 'row';

  RowSelector.prototype.selectOnRowClick = true;

  RowSelector.prototype.gridRender = function(grid) {
    RowSelector.__super__.gridRender.call(this, grid);
    if (this.selectOnRowClick) {
      this.mon(grid.bodyEl, "click:relay(tr)", (function(_this) {
        return function(event, target) {
          _this.onRowClick(target, event);
        };
      })(this));
    }
  };

  RowSelector.prototype.onRowClick = function(tr, event) {
    var record;
    if (!event.control && !event.meta) {
      this.selection.deselectAll();
    }
    if ((record = tr.retrieve("record"))) {
      this.selection.toggle(record);
    }
  };

  RowSelector.prototype.getRowByRecord = function(record) {
    var tr, _i, _len, _ref;
    _ref = this.grid.bodyEl.getElements('tr');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tr = _ref[_i];
      if (tr.retrieve('record') && tr.retrieve('record').id === record.id) {
        return tr;
      }
    }
    return null;
  };

  RowSelector.prototype.modelSelect = function(selection, record) {
    var row;
    row = this.getRowByRecord(record);
    if (row) {
      row.addClass("grid-selected");
    }
  };

  RowSelector.prototype.modelDeselect = function(selection, record) {
    var row;
    row = this.getRowByRecord(record);
    if (row) {
      row.removeClass("grid-selected");
    }
  };

  return RowSelector;

})(BaseSelector);

module.exports = RowSelector;


},{"./BaseSelector":112}],115:[function(require,module,exports){
var SelectionModel,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SelectionModel = (function(_super) {
  __extends(SelectionModel, _super);

  SelectionModel.prototype.type = "single";

  SelectionModel.prototype.pruneRemoved = true;

  SelectionModel.prototype.locked = false;

  SelectionModel.prototype.selected = [];

  SelectionModel.prototype.lastSelected = null;

  SelectionModel.prototype.store = null;

  SelectionModel.prototype.selectionChanged = false;

  SelectionModel.prototype.emitEvents = true;

  SelectionModel.prototype.selectableIndex = null;

  SelectionModel.prototype.selectableHandler = null;

  function SelectionModel(config) {
    SelectionModel.__super__.constructor.call(this, config);
    this.selected = [];
  }

  SelectionModel.prototype.setStore = function(store) {
    this.store = store;
    this.mon(store, 'datachanged', 'onStoreDataChanged');
    this.mon(store, 'clear', 'onStoreClear');
    this.mon(store, 'remove', 'onStoreRemove');
  };

  SelectionModel.prototype.getStore = function() {
    return this.store;
  };

  SelectionModel.prototype.onStoreDataChanged = function() {
    this.refresh();
  };

  SelectionModel.prototype.onStoreClear = function() {
    if (this.getCount() > 0) {
      this.clearSelections();
      this.selectionChanged = true;
      this.checkSelectionChanged();
    }
  };

  SelectionModel.prototype.onStoreRemove = function(store, rec, index) {
    if (this.lastSelected === rec) {
      this.lastSelected = null;
    }
    if (this.isSelected(rec)) {
      this.selected.erase(rec);
      this.selectionChanged = true;
      this.checkSelectionChanged();
    }
  };

  SelectionModel.prototype.clearSelections = function() {
    this.selected.empty();
    this.lastSelected = null;
  };

  SelectionModel.prototype.isLocked = function() {
    return this.locked;
  };

  SelectionModel.prototype.setLocked = function(locked) {
    this.locked = !!locked;
  };

  SelectionModel.prototype.isSelected = function(record) {
    record = (Type.isNumber(record) ? this.store.getAt(record) : record);
    return this.selected.indexOf(record) !== -1;
  };

  SelectionModel.prototype.isSelectable = function(record) {
    if (!this.selectableIndex && !this.selectableHandler) {
      return true;
    } else {
      record = (Type.isNumber(record) ? this.store.getAt(record) : record);
      if (this.selectableHandler) {
        return this.selectableHandler(record);
      } else {
        return !!record.get(this.selectableIndex);
      }
    }
  };

  SelectionModel.prototype.getSelection = function() {
    return this.selected;
  };

  SelectionModel.prototype.getRecords = function() {
    var rec, rs, _i, _len, _ref;
    rs = [];
    _ref = this.selected;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      rec = _ref[_i];
      rs.push(rec);
    }
    return rs;
  };

  SelectionModel.prototype.hasSelection = function() {
    return this.getCount() > 0;
  };

  SelectionModel.prototype.getFirstSelected = function() {
    return (this.hasSelection() ? this.records[0] : null);
  };

  SelectionModel.prototype.getLastSelected = function() {
    return (this.hasSelection() ? this.records.getLast() : null);
  };

  SelectionModel.prototype.getCount = function() {
    return this.selected.length;
  };

  SelectionModel.prototype.getTotalCount = function() {
    return this.getStore().getCount();
  };

  SelectionModel.prototype.getTotalSelectableCount = function() {
    var count;
    count = 0;
    this.getStore().each((function(_this) {
      return function(r) {
        if (_this.isSelectable(r)) {
          count++;
        }
      };
    })(this));
    return count;
  };

  SelectionModel.prototype.selectAll = function(silent) {
    var records;
    records = this.store.getRecords();
    this.doSelect(records, silent);
  };

  SelectionModel.prototype.deselectAll = function(silent) {
    var records;
    records = [];
    this.getSelection().each(function(record) {
      records.push(record);
    });
    this.doDeselect(records, silent);
  };

  SelectionModel.prototype.select = function(records, silent) {
    if (this.type === "single" && this.hasSelection()) {
      this.deselectAll();
    }
    this.doSelect(records, silent);
  };

  SelectionModel.prototype.deselect = function(records, silent) {
    this.doDeselect(records, silent);
  };

  SelectionModel.prototype.toggle = function(records, silent) {
    var record, toDeselect, toSelect, _i, _len, _ref;
    toSelect = [];
    toDeselect = [];
    _ref = Array.from(records);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      record = _ref[_i];
      if (this.isSelected(record)) {
        toDeselect.push(record);
      } else {
        toSelect.push(record);
      }
    }
    if (toSelect.length > 0) {
      this.select(toSelect, silent);
    }
    if (toDeselect.length > 0) {
      this.deselect(toDeselect, silent);
    }
  };

  SelectionModel.prototype.setSelected = function(records, select, silent) {
    this[(select ? "select" : "deselect")](records, silent);
  };

  SelectionModel.prototype.setSelectedAll = function(select, silent) {
    this[(select ? "selectAll" : "deselectAll")](silent);
  };

  SelectionModel.prototype.doSelect = function(records, silent) {
    if (this.locked || !this.store) {
      return;
    }
    if (typeof records === "number") {
      records = [this.store.getAt(records)];
    }
    this.selectionChanged = false;
    Array.from(records).each((function(_this) {
      return function(record) {
        if (_this.isSelectable(record)) {
          if (!_this.isSelected(record)) {
            _this.selectionChanged = true;
            _this.selected.include(record);
            if (_this.emitEvents) {
              _this.emit('select', _this, record, _this.store.indexOf(record));
            }
          }
          _this.lastSelected = record;
        }
      };
    })(this));
    if (!silent) {
      this.checkSelectionChanged();
    }
  };

  SelectionModel.prototype.doDeselect = function(records, silent) {
    if (this.locked || !this.store) {
      return;
    }
    if (typeof records === "number") {
      records = [this.store.getAt(records)];
    }
    this.selectionChanged = false;
    Array.from(records).each((function(_this) {
      return function(record) {
        if (_this.isSelectable(record)) {
          if (_this.isSelected(record)) {
            _this.selectionChanged = true;
            _this.selected.erase(record);
            if (_this.emitEvents) {
              _this.emit('deselect', _this, record, _this.store.indexOf(record));
            }
          }
        }
      };
    })(this));
    if (!silent) {
      this.checkSelectionChanged();
    }
  };

  SelectionModel.prototype.checkSelectionChanged = function() {
    if (this.emitEvents && this.selectionChanged) {
      this.emit('change', this, this.getSelection());
    }
  };

  SelectionModel.prototype.refresh = function() {
    var rec, selection, toBeReAdded, toBeSelected, _i, _len, _ref;
    rec = void 0;
    toBeSelected = [];
    toBeReAdded = [];
    if (!this.store) {
      return;
    }
    _ref = this.selected;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      selection = _ref[_i];
      if (this.store.indexOf(selection) !== -1) {
        rec = this.store.getById(selection.getId());
        if (rec) {
          toBeSelected.push(rec);
        }
      } else if (!this.pruneRemoved) {
        rec = this.store.getById(selection.getId());
        if (rec) {
          toBeSelected.push(rec);
        } else {
          toBeReAdded.push(selection);
        }
      }
    }
    this.emitEvents = false;
    this.clearSelections();
    if (toBeSelected.length) {
      this.doSelect(toBeSelected, true);
    }
    if (toBeReAdded.length) {
      this.selection.append(toBeReAdded);
      if (!this.lastSelected) {
        this.lastSelected = toBeReAdded[toBeReAdded.length - 1];
      }
    }
    this.emitEvents = true;
    this.checkSelectionChanged();
  };

  SelectionModel.prototype.doDestroy = function() {
    this.store = null;
    SelectionModel.__super__.doDestroy.call(this);
  };

  return SelectionModel;

})(Miwo.Object);

module.exports = SelectionModel;


},{}],116:[function(require,module,exports){
var SelectorFactory;

SelectorFactory = (function() {
  SelectorFactory.prototype.defines = null;

  function SelectorFactory() {
    this.defines = {};
  }

  SelectorFactory.prototype.register = function(name, klass) {
    this.defines[name] = klass;
  };

  SelectorFactory.prototype.create = function(name, config) {
    if (!this.defines[name]) {
      throw new Error("Selector with name " + name + " is not defined");
    }
    return new this.defines[name](config);
  };

  return SelectorFactory;

})();

module.exports = SelectorFactory;


},{}],117:[function(require,module,exports){
module.exports = {
  SelectorFactory: require('./SelectorFactory'),
  BaseSelector: require('./BaseSelector'),
  RowSelector: require('./RowSelector'),
  CheckSelector: require('./CheckSelector'),
  SelectionModel: require('./SelectionModel')
};


},{"./BaseSelector":112,"./CheckSelector":113,"./RowSelector":114,"./SelectionModel":115,"./SelectorFactory":116}],118:[function(require,module,exports){
var Pane, TabPanel,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Pane = require('../panel/Pane');

TabPanel = (function(_super) {
  __extends(TabPanel, _super);

  function TabPanel() {
    return TabPanel.__super__.constructor.apply(this, arguments);
  }

  TabPanel.prototype.tab = null;

  TabPanel.prototype.baseCls = 'tab-pane';

  TabPanel.prototype.visible = false;

  TabPanel.prototype.role = 'tabpanel';

  TabPanel.prototype.doInit = function() {
    TabPanel.__super__.doInit.call(this);
    this.tab = new Element('li', {
      role: 'presentation'
    });
  };

  TabPanel.prototype.doRender = function() {
    var link;
    TabPanel.__super__.doRender.call(this);
    link = new Element('a', {
      'aria-controls': this.id,
      href: '#' + this.name,
      role: 'tab',
      html: this.title
    });
    link.inject(this.tab);
  };

  TabPanel.prototype.setTitle = function(title) {
    this.title = title;
    this.tab.set('html', title);
  };

  TabPanel.prototype.markActive = function(active) {
    this.setVisible(active);
    this.el.toggleClass('active', active);
    this.tab.toggleClass('active', active);
    this.emit('active', this, active);
  };

  TabPanel.prototype.setActive = function() {
    this.getParent().setActive(this.name);
  };

  TabPanel.prototype.doDestroy = function() {
    this.tab.destroy();
    return TabPanel.__super__.doDestroy.call(this);
  };

  return TabPanel;

})(Pane);

module.exports = TabPanel;


},{"../panel/Pane":96}],119:[function(require,module,exports){
var TabPanel, Tabs,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

TabPanel = require('./TabPanel');

Tabs = (function(_super) {
  __extends(Tabs, _super);

  function Tabs() {
    return Tabs.__super__.constructor.apply(this, arguments);
  }

  Tabs.prototype.xtype = 'tabs';

  Tabs.prototype.align = 'vertical';

  Tabs.prototype.active = null;

  Tabs.prototype.tabsEl = null;

  Tabs.prototype.scrollable = false;

  Tabs.prototype.doInit = function() {
    Tabs.__super__.doInit.call(this);
    if (this.align === 'vertical') {
      this.html = '<ul miwo-reference="tabsEl" class="nav nav-tabs" role="tablist"></ul>' + '<div miwo-reference="contentEl" class="tab-content"></div>';
    } else if (this.align === 'horizontal') {
      this.html = '<div class="row">' + '<div class="col-sm-3">' + '<ul miwo-reference="tabsEl" class="nav nav-tabs" role="tablist"></ul>' + '</div>' + '<div class="col-sm-9">' + '<div miwo-reference="contentEl" class="tab-content"></div>' + '</div>' + '</div>';
    }
  };

  Tabs.prototype.setActive = function(name) {
    var next, previous;
    if (!name && this.firstChild()) {
      name = this.firstChild().name;
    }
    previous = Type.isString(this.active) ? null : this.active;
    next = name ? this.get(name) : null;
    if (previous !== next) {
      if (previous) {
        previous.markActive(false);
      }
      if (next) {
        next.markActive(true);
      }
      this.emit('active', this, next, previous);
      this.active = next;
    }
  };

  Tabs.prototype.getActive = function() {
    return this.active;
  };

  Tabs.prototype.addPanel = function(name, config) {
    return this.add(name, new TabPanel(config));
  };

  Tabs.prototype.addedComponent = function(component) {
    if (!component.scrollable && this.scrollable) {
      component.setScrollable(true);
    }
  };

  Tabs.prototype.doRender = function() {
    Tabs.__super__.doRender.apply(this, arguments);
    this.el.addClass('tabs-' + this.align);
  };

  Tabs.prototype.afterRender = function() {
    Tabs.__super__.afterRender.apply(this, arguments);
    this.setActive(this.active);
    this.mon(this.el, 'click:relay(.nav a)', 'onTabClick');
    this.tabsEl.set('role', 'tablist');
  };

  Tabs.prototype.renderComponent = function(component) {
    Tabs.__super__.renderComponent.call(this, component);
    component.tab.inject(this.tabsEl);
  };

  Tabs.prototype.removedComponent = function(component) {
    if (this.active === component.name) {
      this.setActive();
    }
  };

  Tabs.prototype.onTabClick = function(event, target) {
    event.stop();
    this.setActive(target.get('href').replace('#', ''));
  };

  return Tabs;

})(Miwo.Container);

module.exports = Tabs;


},{"./TabPanel":118}],120:[function(require,module,exports){
module.exports = {
  Tabs: require('./Tabs'),
  Panel: require('./TabPanel'),
  TabPanel: require('./TabPanel')
};


},{"./TabPanel":118,"./Tabs":119}],121:[function(require,module,exports){
var BaseTip,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseTip = (function(_super) {
  __extends(BaseTip, _super);

  function BaseTip() {
    return BaseTip.__super__.constructor.apply(this, arguments);
  }

  BaseTip.prototype.xtype = 'tip';

  BaseTip.prototype.placement = 'top';

  BaseTip.prototype.distance = 0;

  BaseTip.prototype.target = null;

  BaseTip.prototype.type = 'default';

  BaseTip.prototype.delay = null;

  BaseTip.prototype.visible = false;

  BaseTip.prototype.afterInit = function() {
    BaseTip.__super__.afterInit.call(this);
    this.renderTo = this.renderTo ? $(this.renderTo) : miwo.body;
  };

  BaseTip.prototype.afterRender = function() {
    BaseTip.__super__.afterRender.call(this);
    this.el.on("mouseenter", (function(_this) {
      return function() {
        _this.el.addClass("hover");
        _this.emit('mouseenter', _this);
      };
    })(this));
    this.el.on("mouseleave", (function(_this) {
      return function() {
        _this.el.removeClass("hover");
        _this.emit('mouseleave', _this);
      };
    })(this));
  };

  BaseTip.prototype.show = function() {
    if (this.visible) {
      return;
    }
    this.visible = true;
    if (!this.rendered) {
      this.render();
    }
    if (this.delay) {
      this.doShow.delay(this.delay, this);
    } else {
      this.doShow();
    }
    return this;
  };

  BaseTip.prototype.doShow = function() {
    this.el.show();
    this.updatePosition();
    this.emit('show', this);
  };

  BaseTip.prototype.hide = function() {
    if (!this.visible) {
      return;
    }
    this.visible = false;
    this.emit('hide', this);
    this.el.hide();
    return this;
  };

  BaseTip.prototype.close = function() {
    if (!this.visible) {
      return;
    }
    this.hide();
    this.emit('close', this);
    this.destroy();
    return this;
  };

  BaseTip.prototype.isHover = function() {
    return this.el.hasClass("hover");
  };

  BaseTip.prototype.isVisible = function() {
    return this.el.isVisible();
  };

  BaseTip.prototype.updatePosition = function() {
    var distance, pos, size, sizeTarget;
    pos = this.target.getPosition();
    sizeTarget = this.target.getSize();
    size = this.el.getSize();
    distance = this.distance;
    switch (this.placement) {
      case "top":
        this.el.setPosition({
          x: pos.x - size.x / 2 + sizeTarget.x / 2,
          y: pos.y - size.y - distance
        });
        break;
      case "bottom":
        this.el.setPosition({
          x: pos.x - size.x / 2 + sizeTarget.x / 2,
          y: pos.y + sizeTarget.y + distance
        });
        break;
      case "left":
        this.el.setPosition({
          x: pos.x - size.x - distance,
          y: pos.y + sizeTarget.y / 2 - size.y / 2
        });
        break;
      case "right":
        this.el.setPosition({
          x: pos.x + sizeTarget.x + distance,
          y: pos.y + sizeTarget.y / 2 - size.y / 2
        });
    }
  };

  return BaseTip;

})(Miwo.Container);

module.exports = BaseTip;


},{}],122:[function(require,module,exports){
var BaseTipManager,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseTipManager = (function(_super) {
  __extends(BaseTipManager, _super);

  function BaseTipManager() {
    return BaseTipManager.__super__.constructor.apply(this, arguments);
  }

  BaseTipManager.prototype.placement = 'top';

  BaseTipManager.prototype.distance = 3;

  BaseTipManager.prototype.delay = 500;

  BaseTipManager.prototype.tip = null;

  BaseTipManager.prototype.target = null;

  BaseTipManager.prototype.show = function(target, config) {
    var tip;
    if (this.target === target) {
      return;
    }
    if (this.tip === this.tipToHide) {
      this.tipToHide = null;
    }
    if (this.tip) {
      this.hide();
    }
    tip = this.create(target, config);
    if (!tip) {
      return;
    }
    this.target = target;
    this.tip = tip;
    this.tip.show();
    this.tip.on('mouseleave', (function(_this) {
      return function() {
        return _this.hide();
      };
    })(this));
    if (target.get("title")) {
      target.set("data-title", target.get("title"));
      target.set("title", null);
    }
    target.on("mouseleave", this.bound('onTargetLeave'));
    target.on("mousedown", this.bound('onTargetClick'));
  };

  BaseTipManager.prototype.toggle = function(target) {
    if (this.tip) {
      this.hide();
    } else {
      this.show(target);
    }
  };

  BaseTipManager.prototype.hide = function() {
    if (!this.tip) {
      return;
    }
    this.tip.destroy();
    this.tip = null;
    this.target.un("mouseleave", this.bound('onTargetLeave'));
    this.target.un("click", this.bound('onTargetClick'));
    this.target = null;
  };

  BaseTipManager.prototype.onTargetLeave = function() {
    this.tipToHide = this.tip;
    this.target.un("mouseleave", this.bound('onTargetLeave'));
    setTimeout(((function(_this) {
      return function() {
        if (_this.tipToHide && !_this.tipToHide.isHover()) {
          _this.hide();
        }
      };
    })(this)), 200);
  };

  BaseTipManager.prototype.onTargetClick = function() {
    this.toggle(this.target);
  };

  return BaseTipManager;

})(Miwo.Object);

module.exports = BaseTipManager;


},{}],123:[function(require,module,exports){
var BaseTip, Popover, ScreenMask,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseTip = require('./BaseTip');

ScreenMask = require('../utils/ScreenMask');

Popover = (function(_super) {
  __extends(Popover, _super);

  function Popover() {
    return Popover.__super__.constructor.apply(this, arguments);
  }

  Popover.prototype.xtype = 'popover';

  Popover.prototype.title = '';

  Popover.prototype.content = '';

  Popover.prototype.baseCls = 'popover';

  Popover.prototype.screenMask = null;

  Popover.prototype.closeMode = 'close';

  Popover.prototype.role = 'tooltip';

  Popover.prototype.afterInit = function() {
    Popover.__super__.afterInit.call(this);
    this.screenMask = new ScreenMask((function(_this) {
      return function() {
        _this.sleep();
      };
    })(this));
  };

  Popover.prototype.beforeRender = function() {
    Popover.__super__.beforeRender.apply(this, arguments);
    this.el.addClass("in " + this.placement + " popover-" + this.type);
    this.el.set('html', '<div class="arrow"></div>' + '<h3 miwo-reference="titleEl" class="popover-title" style="display:none"></h3>' + '<div miwo-reference="contentEl" class="popover-content"></div>');
  };

  Popover.prototype.show = function() {
    this.screenMask.show();
    miwo.body.on('keydown', this.bound('onKeyDown'));
    Popover.__super__.show.call(this);
  };

  Popover.prototype.hide = function() {
    miwo.body.un('keydown', this.bound('onKeyDown'));
    this.screenMask.hide();
    Popover.__super__.hide.call(this);
  };

  Popover.prototype.sleep = function() {
    if (this.closeMode === 'hide') {
      this.hide();
    } else {
      this.close();
    }
  };

  Popover.prototype.afterRender = function() {
    Popover.__super__.afterRender.apply(this, arguments);
    if (this.title) {
      this.setTitle(this.title);
    }
    if (this.content) {
      this.setContent(this.content);
    }
  };

  Popover.prototype.onKeyDown = function(e) {
    if (e.key === 'esc') {
      this.sleep();
    }
  };

  Popover.prototype.setTitle = function(title) {
    this.title = title;
    if (this.rendered) {
      this.titleEl.set("html", title);
      this.titleEl.setVisible(title);
      this.updatePosition();
    }
  };

  Popover.prototype.setContent = function(content) {
    this.content = content;
    if (this.rendered) {
      this.contentEl.set("html", content);
      this.updatePosition();
    }
  };

  Popover.prototype.addedComponent = function(component) {
    if (this.rendered) {
      this.updatePosition();
    }
  };

  Popover.prototype.removedComponent = function(component) {
    if (this.rendered) {
      this.updatePosition();
    }
  };

  Popover.prototype.doDestroy = function() {
    this.screenMask.destroy();
    Popover.__super__.doDestroy.call(this);
  };

  return Popover;

})(BaseTip);

module.exports = Popover;


},{"../utils/ScreenMask":131,"./BaseTip":121}],124:[function(require,module,exports){
var BaseTipManager, Popover, PopoverManager,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseTipManager = require('./BaseTipManager');

Popover = require('./Popover');

PopoverManager = (function(_super) {
  __extends(PopoverManager, _super);

  function PopoverManager() {
    return PopoverManager.__super__.constructor.apply(this, arguments);
  }

  PopoverManager.prototype.selector = '[data-toggle="popover"]';

  PopoverManager.prototype.create = function(target, config) {
    var container, content, delay, distance, placement, popover, title;
    if (config == null) {
      config = {};
    }
    if (!target) {
      throw new Error("Target is not defined");
    }
    title = config.title || target.get("data-title") || target.get("title");
    content = config.content || target.get("data-content") || '';
    container = config.container || target.get("data-container");
    placement = config.placement || target.get("data-placement") || this.placement;
    distance = config.distance || target.get("data-distance") || this.distance;
    delay = config.delay || target.get("data-delay") || this.delay;
    if (!title) {
      return;
    }
    popover = new Popover({
      target: target,
      title: title,
      content: content,
      container: container,
      placement: placement,
      distance: distance
    });
    return popover;
  };

  return PopoverManager;

})(BaseTipManager);

module.exports = PopoverManager;


},{"./BaseTipManager":122,"./Popover":123}],125:[function(require,module,exports){
var BaseTip, Tooltip,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseTip = require('./BaseTip');

Tooltip = (function(_super) {
  __extends(Tooltip, _super);

  function Tooltip() {
    return Tooltip.__super__.constructor.apply(this, arguments);
  }

  Tooltip.prototype.text = null;

  Tooltip.prototype.baseCls = 'tooltip';

  Tooltip.prototype.role = 'tooltip';

  Tooltip.prototype.setText = function(text) {
    this.text = text;
    if (this.rendered) {
      this.contentEl.set('html', this.text);
      this.updatePosition();
    }
    return this;
  };

  Tooltip.prototype.beforeRender = function() {
    Tooltip.__super__.beforeRender.call(this);
    this.el.addClass("in " + this.placement + " tooltip-" + this.type);
    this.el.set('html', '<div class="tooltip-arrow"></div><div miwo-reference="contentEl" class="tooltip-inner"></div>');
  };

  Tooltip.prototype.afterRender = function() {
    Tooltip.__super__.afterRender.call(this);
    if (this.text) {
      this.setText(this.text);
    }
  };

  return Tooltip;

})(BaseTip);

module.exports = Tooltip;


},{"./BaseTip":121}],126:[function(require,module,exports){
var BaseTipManager, Tooltip, TooltipManager,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseTipManager = require('./BaseTipManager');

Tooltip = require('./Tooltip');

TooltipManager = (function(_super) {
  __extends(TooltipManager, _super);

  function TooltipManager() {
    return TooltipManager.__super__.constructor.apply(this, arguments);
  }

  TooltipManager.prototype.create = function(target, config) {
    var item, selector, tooltip;
    if (config == null) {
      config = {};
    }
    config.target = target;
    if (!config.text) {
      config.text = target.get("data-title") || target.get("title");
    }
    if (!config.placement) {
      config.placement = target.get("data-placement") || this.placement;
    }
    if (!config.distance) {
      config.distance = target.get("data-distance") || this.distance;
    }
    if (!config.hasOwnProperty('delay')) {
      config.delay = target.get("data-delay") || this.delay;
    }
    if (!config.text && (selector = target.get('data-title-el')) && (item = target.getElement(selector))) {
      config.text = item.get('html');
    }
    tooltip = new Tooltip(config);
    return tooltip;
  };

  return TooltipManager;

})(BaseTipManager);

module.exports = TooltipManager;


},{"./BaseTipManager":122,"./Tooltip":125}],127:[function(require,module,exports){
module.exports = {
  BaseTip: require('./BaseTip'),
  Popover: require('./Popover'),
  Tooltip: require('./Tooltip')
};


},{"./BaseTip":121,"./Popover":123,"./Tooltip":125}],128:[function(require,module,exports){
module.exports = {
  nav: {
    prev: 'Previous',
    next: 'Next',
    current: 'Current'
  },
  grid: {
    execute: 'Do',
    confirm: 'Confirm'
  },
  dialog: {
    ok: 'Ok',
    cancel: 'Cancel'
  },
  window: {
    close: 'Close window',
    hide: 'Hide window'
  },
  picker: {
    selectColor: 'Select color',
    today: 'Today',
    clear: 'Clear'
  },
  inputs: {
    dateTo: 'to',
    switchOn: 'ON',
    switchOff: 'OFF'
  },
  pagination: {
    pageInfo: 'Visible: {visible} Total: {total}'
  },
  rules: {
    filled: "Please enter all required values.",
    protection: "Please submit this form again (security token has expired).",
    equal: "Please enter {param}.",
    minLength: "Please enter at least {param} characters.",
    maxLength: "Enter more than {param} characters.",
    length: "Enter a value between {param0} and {param1} characters long.",
    email: "Enter a valid email.",
    date: "Enter a valid date in format YYYY-MM-DD",
    url: "Please enter a valid URL.",
    number: "Please enter a numeric value.",
    integer: "Please enter a numeric value.",
    float: "Please enter a numeric value.",
    range: "Please enter a value between {param0} and {param1}.",
    min: "Please enter a value greater or equal to {param}.",
    max: "Please enter a value lower or equal to {param}.",
    color: "Bad color format. Use format e.g.: #ff00ff",
    maxFileSize: "The size of the uploaded file can be up to %d bytes.",
    image: "The uploaded file must be a JPEG, GIF or PNG."
  }
};


},{}],129:[function(require,module,exports){
var Color;

Color = (function() {
  function Color() {}

  Color.prototype.r = 0;

  Color.prototype.g = 0;

  Color.prototype.b = 0;

  Color.prototype.h = 0;

  Color.prototype.s = 0;

  Color.prototype.v = 0;

  Color.prototype.hex = "";

  Color.prototype.setRgb = function(r, g, b) {
    var hsv;
    if (r !== null) {
      this.r = r;
    }
    if (g !== null) {
      this.g = g;
    }
    if (b !== null) {
      this.b = b;
    }
    hsv = Color.rgbToHsv(this);
    this.h = hsv.h;
    this.s = hsv.s;
    this.v = hsv.v;
    this.hex = Color.rgbToHex(this);
  };

  Color.prototype.setHsv = function(h, s, v) {
    var rgb;
    if (h !== null) {
      this.h = h;
    }
    if (s !== null) {
      this.s = s;
    }
    if (v !== null) {
      this.v = v;
    }
    rgb = Color.hsvToRgb(this);
    this.r = rgb.r;
    this.g = rgb.g;
    this.b = rgb.b;
    this.hex = Color.rgbToHex(rgb);
  };

  Color.prototype.setHex = function(hex) {
    var hsv, rgb;
    this.hex = hex;
    rgb = Color.hexToRgb(this.hex);
    this.r = rgb.r;
    this.g = rgb.g;
    this.b = rgb.b;
    hsv = Color.rgbToHsv(rgb);
    this.h = hsv.h;
    this.s = hsv.s;
    this.v = hsv.v;
  };

  return Color;

})();

Color.fromRgb = function(r, g, b) {
  var object;
  object = new Color();
  object.setRgb(r, g, b);
  return object;
};

Color.fromHsv = function(h, s, v) {
  var object;
  object = new Color();
  object.setHsv(h, s, v);
  return object;
};

Color.fromHex = function(hex) {
  var object;
  object = new Color();
  object.setHex(hex);
  return object;
};

Color.rgbToHex = function(rgb) {
  return this.intToHex(rgb.r) + this.intToHex(rgb.g) + this.intToHex(rgb.b);
};

Color.hexToRgb = function(hex) {
  var b, g, r;
  r = "00";
  g = "00";
  b = "00";
  if (hex.length === 6) {
    r = hex.substring(0, 2);
    g = hex.substring(2, 4);
    b = hex.substring(4, 6);
  } else {
    if (hex.length > 4) {
      r = hex.substring(4, hex.length);
      hex = hex.substring(0, 4);
    }
    if (hex.length > 2) {
      g = hex.substring(2, hex.length);
      hex = hex.substring(0, 2);
    }
    if (hex.length > 0) {
      b = hex.substring(0, hex.length);
    }
  }
  return {
    r: this.hexToInt(r),
    g: this.hexToInt(g),
    b: this.hexToInt(b)
  };
};

Color.hsvToRgb = function(hsv) {
  var f, h, i, p, q, rgb, s, t, v;
  rgb = {
    r: 0,
    g: 0,
    b: 0
  };
  h = hsv.h;
  s = hsv.s;
  v = hsv.v;
  if (s === 0) {
    if (v === 0) {
      rgb.r = rgb.g = rgb.b = 0;
    } else {
      rgb.r = rgb.g = rgb.b = parseInt(v * 255 / 100, 10);
    }
  } else {
    if (h === 360) {
      h = 0;
    }
    h /= 60;
    s = s / 100;
    v = v / 100;
    i = parseInt(h, 10);
    f = h - i;
    p = v * (1 - s);
    q = v * (1 - (s * f));
    t = v * (1 - (s * (1 - f)));
    switch (i) {
      case 0:
        rgb.r = v;
        rgb.g = t;
        rgb.b = p;
        break;
      case 1:
        rgb.r = q;
        rgb.g = v;
        rgb.b = p;
        break;
      case 2:
        rgb.r = p;
        rgb.g = v;
        rgb.b = t;
        break;
      case 3:
        rgb.r = p;
        rgb.g = q;
        rgb.b = v;
        break;
      case 4:
        rgb.r = t;
        rgb.g = p;
        rgb.b = v;
        break;
      case 5:
        rgb.r = v;
        rgb.g = p;
        rgb.b = q;
    }
    rgb.r = parseInt(rgb.r * 255, 10);
    rgb.g = parseInt(rgb.g * 255, 10);
    rgb.b = parseInt(rgb.b * 255, 10);
  }
  return rgb;
};

Color.rgbToHsv = function(rgb) {
  var b, delta, g, hsv, max, min, r;
  r = rgb.r / 255;
  g = rgb.g / 255;
  b = rgb.b / 255;
  hsv = {
    h: 0,
    s: 0,
    v: 0
  };
  min = 0;
  max = 0;
  if (r >= g && r >= b) {
    max = r;
    min = (g > b ? b : g);
  } else if (g >= b && g >= r) {
    max = g;
    min = (r > b ? b : r);
  } else {
    max = b;
    min = (g > r ? r : g);
  }
  hsv.v = max;
  hsv.s = (max ? (max - min) / max : 0);
  if (!hsv.s) {
    hsv.h = 0;
  } else {
    delta = max - min;
    if (r === max) {
      hsv.h = (g - b) / delta;
    } else if (g === max) {
      hsv.h = 2 + (b - r) / delta;
    } else {
      hsv.h = 4 + (r - g) / delta;
    }
    hsv.h = parseInt(hsv.h * 60, 10);
    if (hsv.h < 0) {
      hsv.h += 360;
    }
  }
  hsv.s = parseInt(hsv.s * 100, 10);
  hsv.v = parseInt(hsv.v * 100, 10);
  return hsv;
};

Color.hexToInt = function(hex) {
  return parseInt(hex, 16);
};

Color.intToHex = function(dec) {
  var result;
  result = parseInt(dec, 10).toString(16);
  if (result.length === 1) {
    result = "0" + result;
  }
  return result.toUpperCase();
};

module.exports = Color;


},{}],130:[function(require,module,exports){
var Paginator,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Paginator = (function(_super) {
  __extends(Paginator, _super);

  function Paginator() {
    return Paginator.__super__.constructor.apply(this, arguments);
  }

  Paginator.prototype.base = 1;

  Paginator.prototype.itemsPerPage = 1;

  Paginator.prototype.page = null;

  Paginator.prototype.itemCount = null;

  Paginator.prototype.getFirstPage = function() {
    return this.base;
  };

  Paginator.prototype.getLastPage = function() {
    if (this.itemCount === null) {
      return null;
    } else {
      return this.base + Math.max(0, this.getPageCount() - 1);
    }
  };

  Paginator.prototype.isFirst = function() {
    return this.page === 1 || this.page === null;
  };

  Paginator.prototype.isLast = function() {
    if (this.itemCount === null) {
      return true;
    } else {
      return this.page === this.getLastPage();
    }
  };

  Paginator.prototype.getPageCount = function() {
    if (this.itemCount === null) {
      return null;
    } else {
      return Math.ceil(this.itemCount / this.itemsPerPage);
    }
  };

  Paginator.prototype.setItemsPerPage = function(itemsPerPage) {
    this.itemsPerPage = Math.max(1, parseInt(itemsPerPage));
    this.emit('itemsperpage', this, this.itemsPerPage);
    return this;
  };

  Paginator.prototype.setItemCount = function(itemCount) {
    this.itemCount = Math.max(0, parseInt(itemCount));
    this.emit('itemcount', this, this.itemCount);
    return this;
  };

  Paginator.prototype.setPage = function(page) {
    page = parseInt(page);
    if (page !== this.page) {
      this.page = page;
      this.emit('page', this, this.page);
    }
    return this;
  };

  return Paginator;

})(Miwo.Object);

module.exports = Paginator;


},{}],131:[function(require,module,exports){
var ScreenMask;

ScreenMask = (function() {
  function ScreenMask(handler) {
    this.el = new Element('div', {
      cls: 'screen-mask'
    });
    this.el.on('click', (function(_this) {
      return function(event) {
        event.stop();
        handler();
      };
    })(this));
    return;
  }

  ScreenMask.prototype.show = function() {
    this.el.inject(miwo.body);
  };

  ScreenMask.prototype.hide = function() {
    this.el.dispose();
  };

  ScreenMask.prototype.destroy = function() {
    this.hide();
    this.el.destroy();
  };

  return ScreenMask;

})();

module.exports = ScreenMask;


},{}],132:[function(require,module,exports){
module.exports = {
  ScreenMask: require('./ScreenMask'),
  Color: require('./Color')
};


},{"./Color":129,"./ScreenMask":131}],133:[function(require,module,exports){
var Dialog, Window,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Window = require('./Window');

Dialog = (function(_super) {
  __extends(Dialog, _super);

  function Dialog() {
    return Dialog.__super__.constructor.apply(this, arguments);
  }

  Dialog.prototype.xtype = 'dialog';

  Dialog.prototype.role = 'dialog';

  Dialog.prototype.beforeInit = function() {
    Dialog.__super__.beforeInit.call(this);
    this.closeOnClickOut = true;
    this.closeMode = "close";
    this.componentCls = "miwo-dialog";
  };

  Dialog.prototype.afterRender = function() {
    Dialog.__super__.afterRender.call(this);
    this.keyListener.on('enter', (function(_this) {
      return function() {
        var button, _i, _len, _ref;
        _ref = _this.buttons;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          button = _ref[_i];
          if (button.type === 'primary') {
            button.click();
            break;
          }
        }
      };
    })(this));
  };

  return Dialog;

})(Window);

module.exports = Dialog;


},{"./Window":136}],134:[function(require,module,exports){
var Button, Dialog, DialogFactory;

Dialog = require('./Dialog');

Button = require('../buttons/Button');

DialogFactory = (function() {
  function DialogFactory() {}

  DialogFactory.prototype.createDialog = function(title, message, buttons) {
    var dialog;
    dialog = new Dialog();
    dialog.render(miwo.body);
    dialog.setTitle(title);
    dialog.setContent("<p class='text-center'>" + message + "</p>");
    dialog.setButtons(buttons);
    dialog.show();
    return dialog;
  };

  DialogFactory.prototype.alert = function(title, message, cb, btnText) {
    var dialog, okBtn;
    okBtn = new Button({
      name: 'ok',
      type: "primary",
      text: (btnText ? btnText : miwo.tr("miwo.dialog.ok")),
      handler: function() {
        if (cb) {
          cb(true);
        }
        dialog.close();
      }
    });
    dialog = this.createDialog(title, message, [okBtn]);
    return dialog;
  };

  DialogFactory.prototype.prompt = function(title, message, cb, okBtnText, noBtnText) {
    var cancelBtn, dialog, okBtn;
    okBtn = new Button({
      name: 'ok',
      type: "primary",
      text: (okBtnText ? okBtnText : miwo.tr("miwo.dialog.ok")),
      handler: function() {
        if (cb) {
          cb(true);
        }
        dialog.close();
      }
    });
    cancelBtn = new Button({
      name: 'cancel',
      type: 'default',
      text: (noBtnText ? noBtnText : miwo.tr("miwo.dialog.cancel")),
      handler: function() {
        if (cb) {
          cb(false);
        }
        dialog.close();
      }
    });
    dialog = this.createDialog(title, message, [okBtn, cancelBtn]);
    return dialog;
  };

  DialogFactory.prototype.promptIf = function(title, message, cb, okBtnText, noBtnText) {
    var dialog;
    dialog = this.prompt(title, message, (function(state) {
      if (cb && state) {
        cb();
      }
    }), okBtnText, noBtnText);
    return dialog;
  };

  return DialogFactory;

})();

module.exports = DialogFactory;


},{"../buttons/Button":6,"./Dialog":133}],135:[function(require,module,exports){
var Form, FormWindow, Window,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Window = require('./Window');

Form = require('../form/container/Form');

FormWindow = (function(_super) {
  __extends(FormWindow, _super);

  function FormWindow() {
    return FormWindow.__super__.constructor.apply(this, arguments);
  }

  FormWindow.getter('form', function() {
    return this.getForm();
  });

  FormWindow.prototype.doInit = function() {
    var form;
    FormWindow.__super__.doInit.apply(this, arguments);
    form = this.add('form', new Form);
    form.on('submit', (function(_this) {
      return function(form, isValid) {
        return _this.emit('submit', _this, form, isValid);
      };
    })(this));
    form.on('success', (function(_this) {
      return function(form) {
        return _this.emit('success', _this, form);
      };
    })(this));
    form.on('failure', (function(_this) {
      return function(form) {
        return _this.emit('failure', _this, form);
      };
    })(this));
  };

  FormWindow.prototype.getForm = function() {
    return this.get('form');
  };

  FormWindow.prototype.setFocus = function() {
    FormWindow.__super__.setFocus.call(this);
    this.getForm().getFocusControl().setFocus();
  };

  FormWindow.prototype.addSubmitButton = function(text) {
    return this.addButton('submit', {
      text: text,
      type: 'primary',
      handler: (function(_this) {
        return function() {
          return _this.getForm().submit();
        };
      })(this)
    });
  };

  return FormWindow;

})(Window);

module.exports = FormWindow;


},{"../form/container/Form":24,"./Window":136}],136:[function(require,module,exports){
var Button, ToolButton, Window,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Button = require('../buttons/Button');

ToolButton = require('../buttons/ToolButton');

Window = (function(_super) {
  __extends(Window, _super);

  function Window() {
    return Window.__super__.constructor.apply(this, arguments);
  }

  Window.prototype.isWindow = true;

  Window.prototype.xtype = 'window';

  Window.prototype.baseCls = 'window';

  Window.prototype.closeMode = 'hide';

  Window.prototype.closeOnClickOut = true;

  Window.prototype.closeOnEsc = true;

  Window.prototype.closeable = true;

  Window.prototype.minimizable = false;

  Window.prototype.title = '';

  Window.prototype.autoCenter = true;

  Window.prototype.preventAutoRender = true;

  Window.prototype.width = 600;

  Window.prototype.top = 30;

  Window.prototype.modal = true;

  Window.prototype.zIndexManage = true;

  Window.prototype.visible = false;

  Window.prototype.buttons = null;

  Window.prototype.titleEl = null;

  Window.prototype.contentEl = null;

  Window.prototype.footerEl = null;

  Window.prototype.toolsEl = null;

  Window.prototype.keyListener = null;

  Window.prototype.tools = null;

  Window.prototype.beforeInit = function() {
    Window.__super__.beforeInit.call(this);
    this.renderTo = miwo.body;
    this.buttons = new Miwo.utils.Collection();
    this.tools = new Miwo.utils.Collection();
  };

  Window.prototype.afterInit = function() {
    Window.__super__.afterInit.call(this);
    miwo.windowMgr.register(this);
    this.contentHeight = this.height;
    this.height = null;
    this.keyListener = new Miwo.utils.KeyListener(this.el);
    this.keyListener.on('esc', (function(_this) {
      return function() {
        if (_this.closeOnEsc) {
          _this.close();
        }
      };
    })(this));
  };

  Window.prototype.open = function() {
    this.show();
  };

  Window.prototype.close = function(destroy, silent) {
    if (destroy == null) {
      destroy = false;
    }
    if (!destroy && this.closeMode === 'hide') {
      this.doHide();
    } else {
      this.preventClose = false;
      if (!silent) {
        this.emit('beforeclose', this);
      }
      if (this.preventClose) {
        return;
      }
      this.doClose();
      this.emit('close', this);
      this.destroy();
    }
  };

  Window.prototype.setTitle = function(title) {
    this.title = title;
    if (this.titleEl) {
      this.titleEl.set("html", title);
    }
  };

  Window.prototype.doShow = function() {
    Window.__super__.doShow.apply(this, arguments);
    this.toFront();
  };

  Window.prototype.doHide = function() {
    Window.__super__.doHide.apply(this, arguments);
    this.toBack();
  };

  Window.prototype.doClose = function() {
    this.hide();
  };

  Window.prototype.beforeRender = function() {
    Window.__super__.beforeRender.call(this);
    this.el.addClass('modal-dialog');
    this.el.set('html', "<div class=\"window-content modal-content\">\n	<div miwo-reference=\"headerEl\" class=\"window-header modal-header\">\n		<div miwo-reference=\"toolsEl\" class='window-tools'></div>\n		<h4 miwo-reference=\"titleEl\" class='window-title modal-title'>" + this.title + "</h4>\n	</div>\n	<div miwo-reference=\"contentEl\" class=\"window-body modal-body\"></div>\n	<div miwo-reference=\"footerEl\" class=\"window-footer modal-footer\"></div>\n</div>");
  };

  Window.prototype.afterRender = function() {
    var button, name, _ref;
    Window.__super__.afterRender.call(this);
    if (this.wasRendered) {
      return;
    }
    this.el.set('aria-labelledby', this.id + 'Label');
    this.titleEl.set('id', this.id + 'Label');
    if (this.contentHeight) {
      this.contentEl.setStyle('height', this.contentHeight);
    }
    if (this.closeable) {
      this.addTool('close', {
        icon: 'remove',
        text: miwo.tr('miwo.window.close'),
        handler: (function(_this) {
          return function() {
            return _this.close();
          };
        })(this)
      });
    }
    if (this.minimizable) {
      this.addTool('hide', {
        icon: 'minus',
        text: miwo.tr('miwo.window.hide'),
        handler: (function(_this) {
          return function() {
            return _this.hide();
          };
        })(this)
      });
    }
    _ref = this.buttons.items;
    for (name in _ref) {
      button = _ref[name];
      if (!button.rendered) {
        button.render(this.footerEl);
      }
    }
    if (!this.modal) {
      miwo.body.on('click', this.bound('onBodyClick'));
    }
  };

  Window.prototype.onBodyClick = function(e) {
    if (this.isVisible() && e.target === this.el) {
      return;
    }
    if (e.target.getParent('.window') === this.el) {
      return;
    }
    if (this.closeOnClickOut) {
      this.close();
    }
  };

  Window.prototype.onOverlayClick = function() {
    if (this.closeOnClickOut) {
      this.close();
    }
  };

  Window.prototype.setContent = function(string) {
    this.contentEl.set("html", string);
  };

  Window.prototype.setButtons = function(buttons) {
    var button, _i, _j, _len, _len1, _ref;
    _ref = this.buttons;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      button = _ref[_i];
      button.destroy();
    }
    this.buttons.empty();
    for (_j = 0, _len1 = buttons.length; _j < _len1; _j++) {
      button = buttons[_j];
      this.addButton(button.name, button);
    }
  };

  Window.prototype.addButton = function(name, button) {
    if (!Type.isInstance(button)) {
      button = new Button(button);
    }
    this.buttons.set(name, button);
    button.on('click', (function(_this) {
      return function() {
        _this.emit('action', _this, name);
      };
    })(this));
    if (this.footerEl) {
      button.render(this.footerEl);
    }
    return button;
  };

  Window.prototype.addCloseButton = function(text) {
    return this.addButton('close', {
      text: text,
      handler: (function(_this) {
        return function() {
          return _this.close();
        };
      })(this)
    });
  };

  Window.prototype.getButton = function(name) {
    return this.buttons.get(name);
  };

  Window.prototype.addTool = function(name, button) {
    if (!Type.isInstance(button)) {
      button = new ToolButton(button);
    }
    this.tools.set(name, button);
    button.render(this.toolsEl);
    return button;
  };

  Window.prototype.getTool = function(name) {
    return this.tools.get(name);
  };

  Window.prototype.doDestroy = function() {
    miwo.windowMgr.unregister(this);
    miwo.body.un('click', this.bound('onBodyClick'));
    if (this.keyListener) {
      this.keyListener.destroy();
    }
    this.buttons.destroy();
    this.tools.destroy();
    Window.__super__.doDestroy.call(this);
  };

  return Window;

})(Miwo.Container);

module.exports = Window;


},{"../buttons/Button":6,"../buttons/ToolButton":10}],137:[function(require,module,exports){
var WindowManager;

WindowManager = (function() {
  WindowManager.prototype.list = null;

  function WindowManager() {
    this.list = new Miwo.utils.Collection();
    return;
  }

  WindowManager.prototype.register = function(comp) {
    if (comp.windowMgr) {
      comp.windowMgr.unregister(comp);
    }
    comp.windowMgr = this;
    this.list.set(comp.id, comp);
  };

  WindowManager.prototype.unregister = function(comp) {
    if (this.list.has(comp.id)) {
      this.list.remove(comp.id);
      delete comp.windowMgr;
    }
  };

  WindowManager.prototype.get = function(id) {
    return this.list.get(id);
  };

  WindowManager.prototype.getBy = function(name, value) {
    return this.list.getBy(name, value);
  };

  return WindowManager;

})();

module.exports = WindowManager;


},{}],138:[function(require,module,exports){
module.exports = {
  Window: require('./Window'),
  FormWindow: require('./FormWindow'),
  Dialog: require('./Dialog')
};


},{"./Dialog":133,"./FormWindow":135,"./Window":136}]},{},[65])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi91c3IvbG9jYWwvbGliL25vZGVfbW9kdWxlcy9ndWxwLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9EaUV4dGVuc2lvbi5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvYmVoYXZpb3JzL0JlaGF2aW9yTWFuYWdlci5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvYmVoYXZpb3JzL1BvcG92ZXIuY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL2JlaGF2aW9ycy9UYWJzLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9iZWhhdmlvcnMvVG9vbHRpcC5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvYnV0dG9ucy9CdXR0b24uY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL2J1dHRvbnMvQnV0dG9uR3JvdXAuY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL2J1dHRvbnMvQ2xvc2VCdXR0b24uY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL2J1dHRvbnMvRHJvcGRvd25CdXR0b24uY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL2J1dHRvbnMvVG9vbEJ1dHRvbi5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvYnV0dG9ucy9pbmRleC5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvZHJhZy9EcmFnLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9kcmFnL1NsaWRlci5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvZHJhZy9pbmRleC5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvZHJvcGRvd24vRGl2aWRlci5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvZHJvcGRvd24vRHJvcGRvd25NYW5hZ2VyLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9kcm9wZG93bi9JdGVtLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9kcm9wZG93bi9MaXN0LmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9kcm9wZG93bi9pbmRleC5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvZm9ybS9SdWxlcy5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvZm9ybS9WYWxpZGF0b3JzLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9mb3JtL2NvbnRhaW5lci9CYXNlQ29udGFpbmVyLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9mb3JtL2NvbnRhaW5lci9GaWVsZHNldC5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvZm9ybS9jb250YWluZXIvRm9ybS5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvZm9ybS9jb250cm9sL0Jhc2VDb250cm9sLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9mb3JtL2NvbnRyb2wvQmFzZUlucHV0Q29udHJvbC5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvZm9ybS9jb250cm9sL0Jhc2VTZWxlY3RDb250cm9sLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9mb3JtL2NvbnRyb2wvQmFzZVRleHRDb250cm9sLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9mb3JtL2NvbnRyb2wvQnV0dG9uR3JvdXAuY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL2Zvcm0vY29udHJvbC9CdXR0b25zLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9mb3JtL2NvbnRyb2wvQ2hlY2tib3guY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL2Zvcm0vY29udHJvbC9DaGVja2JveExpc3QuY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL2Zvcm0vY29udHJvbC9Db2xvci5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvZm9ybS9jb250cm9sL0NvbWJvLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9mb3JtL2NvbnRyb2wvRGF0ZS5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvZm9ybS9jb250cm9sL0RhdGVSYW5nZS5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvZm9ybS9jb250cm9sL0Ryb3BTZWxlY3QuY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL2Zvcm0vY29udHJvbC9IZWxwZXJzLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9mb3JtL2NvbnRyb2wvTnVtYmVyLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9mb3JtL2NvbnRyb2wvUmFkaW9MaXN0LmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9mb3JtL2NvbnRyb2wvU2VsZWN0LmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9mb3JtL2NvbnRyb2wvU2xpZGVyLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9mb3JtL2NvbnRyb2wvVGV4dC5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvZm9ybS9jb250cm9sL1RleHRBcmVhLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9mb3JtL2NvbnRyb2wvVG9nZ2xlLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9mb3JtL2luZGV4LmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9mb3JtL3JlbmRlci9EZWZhdWx0UmVuZGVyZXIuY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL2Zvcm0vcmVuZGVyL0Zvcm1SZW5kZXJlckZhY3RvcnkuY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL2Zvcm0vcmVuZGVyL0lubGluZVJlbmRlcmVyLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9ncmlkL0FjdGlvbi5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvZ3JpZC9HcmlkLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9ncmlkL09wZXJhdGlvbnMuY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL2dyaWQvY29sdW1uL0FjdGlvbkNvbHVtbi5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvZ3JpZC9jb2x1bW4vQ2hlY2tDb2x1bW4uY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL2dyaWQvY29sdW1uL0NoZWNrZXJDb2x1bW4uY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL2dyaWQvY29sdW1uL0NvbHVtbi5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvZ3JpZC9jb2x1bW4vRGF0ZUNvbHVtbi5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvZ3JpZC9jb2x1bW4vTnVtYmVyQ29sdW1uLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9ncmlkL2NvbHVtbi9UZXh0Q29sdW1uLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9ncmlkL2NvbHVtbi9Ub2dnbGVDb2x1bW4uY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL2dyaWQvaW5kZXguY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL2dyaWQvcmVuZGVyZXIvR3JpZFJlbmRlcmVyLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9ncmlkL3JlbmRlcmVyL1dpZHRoTWFuYWdlci5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvZ3JpZC91dGlscy9Qb3BvdmVyU3VibWl0LmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9pbmRleC5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvaW5wdXQvQmFzZUlucHV0LmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9pbnB1dC9CYXNlVGV4dElucHV0LmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9pbnB1dC9DaGVja2JveC5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvaW5wdXQvQ2hlY2tib3hMaXN0LmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9pbnB1dC9Db2xvci5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvaW5wdXQvQ29tYm8uY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL2lucHV0L0NvbXBvc2l0ZS5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvaW5wdXQvRGF0ZS5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvaW5wdXQvRGF0ZVJhbmdlLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9pbnB1dC9Ecm9wU2VsZWN0LmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9pbnB1dC9SYWRpby5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvaW5wdXQvUmFkaW9MaXN0LmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9pbnB1dC9TZWxlY3QuY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL2lucHV0L1NsaWRlci5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvaW5wdXQvVGV4dC5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvaW5wdXQvVGV4dEFyZWEuY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL2lucHV0L1RvZ2dsZS5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvaW5wdXQvaW5kZXguY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL21hc2svTG9hZGluZ01hc2suY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL21hc2svTG9hZGluZ01hc2tGYWN0b3J5LmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9tYXNrL2luZGV4LmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9uYXZiYXIvRHJvcGRvd25JdGVtLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9uYXZiYXIvSXRlbS5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvbmF2YmFyL2luZGV4LmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9ub3RpZnkvTm90aWZpY2F0b3IuY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL25vdGlmeS9pbmRleC5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvcGFnaW5hdGlvbi9QYWdlci5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvcGFnaW5hdGlvbi9QYWdlckluZm8uY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL3BhZ2luYXRpb24vUGFnaW5hdG9yLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9wYWdpbmF0aW9uL2luZGV4LmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9wYW5lbC9QYW5lLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9wYW5lbC9TY3JvbGxhYmxlLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9wYW5lbC9pbmRleC5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvcGlja2VyL0Jhc2VEYXRlLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9waWNrZXIvQ29sb3IuY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL3BpY2tlci9EYXRlLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9waWNrZXIvRGF5LmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9waWNrZXIvTW9udGguY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL3BpY2tlci9QaWNrZXJNYW5hZ2VyLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9waWNrZXIvVGltZS5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvcGlja2VyL1llYXIuY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL3BpY2tlci9pbmRleC5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvcHJvZ3Jlc3MvQmFyLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9wcm9ncmVzcy9Qcm9ncmVzc0Jhci5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvcHJvZ3Jlc3MvU3RhY2tlZEJhci5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvcHJvZ3Jlc3MvaW5kZXguY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL3NlbGVjdGlvbi9CYXNlU2VsZWN0b3IuY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL3NlbGVjdGlvbi9DaGVja1NlbGVjdG9yLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy9zZWxlY3Rpb24vUm93U2VsZWN0b3IuY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL3NlbGVjdGlvbi9TZWxlY3Rpb25Nb2RlbC5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvc2VsZWN0aW9uL1NlbGVjdG9yRmFjdG9yeS5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvc2VsZWN0aW9uL2luZGV4LmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy90YWJzL1RhYlBhbmVsLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy90YWJzL1RhYnMuY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL3RhYnMvaW5kZXguY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL3RpcC9CYXNlVGlwLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy90aXAvQmFzZVRpcE1hbmFnZXIuY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL3RpcC9Qb3BvdmVyLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy90aXAvUG9wb3Zlck1hbmFnZXIuY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL3RpcC9Ub29sdGlwLmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy90aXAvVG9vbHRpcE1hbmFnZXIuY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL3RpcC9pbmRleC5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvdHJhbnNsYXRlcy5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvdXRpbHMvQ29sb3IuY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL3V0aWxzL1BhZ2luYXRvci5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvdXRpbHMvU2NyZWVuTWFzay5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvdXRpbHMvaW5kZXguY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL3dpbmRvdy9EaWFsb2cuY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL3dpbmRvdy9EaWFsb2dGYWN0b3J5LmNvZmZlZSIsIi93d3cvdmhvc3RzL21pd29qcy9taXdvLXVpL3NyYy93aW5kb3cvRm9ybVdpbmRvdy5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvd2luZG93L1dpbmRvdy5jb2ZmZWUiLCIvd3d3L3Zob3N0cy9taXdvanMvbWl3by11aS9zcmMvd2luZG93L1dpbmRvd01hbmFnZXIuY29mZmVlIiwiL3d3dy92aG9zdHMvbWl3b2pzL21pd28tdWkvc3JjL3dpbmRvdy9pbmRleC5j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WSxPQUFBLENBQVEsY0FBUixDQURaO0FBQUEsRUFFQSxNQUFBLEVBQVEsT0FBQSxDQUFRLFVBQVIsQ0FGUjtDQUZELENBQUEiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKX12YXIgZj1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwoZi5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxmLGYuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiIyB3aW5kb3dzXG5EaWFsb2dGYWN0b3J5ID0gcmVxdWlyZSAnLi93aW5kb3cvRGlhbG9nRmFjdG9yeSdcbldpbmRvd01hbmFnZXIgPSByZXF1aXJlICcuL3dpbmRvdy9XaW5kb3dNYW5hZ2VyJ1xuXG4jIGZvcm1zXG5Gb3JtUmVuZGVyZXJGYWN0b3J5ID0gcmVxdWlyZSAnLi9mb3JtL3JlbmRlci9Gb3JtUmVuZGVyZXJGYWN0b3J5J1xuRGVmYXVsdFJlbmRlcmVyID0gcmVxdWlyZSAnLi9mb3JtL3JlbmRlci9EZWZhdWx0UmVuZGVyZXInXG5JbmxpbmVSZW5kZXJlciA9IHJlcXVpcmUgJy4vZm9ybS9yZW5kZXIvSW5saW5lUmVuZGVyZXInXG5cbiMgYmVoYXZpb3JzXG5Ub29sdGlwTWFuYWdlciA9IHJlcXVpcmUgJy4vdGlwL1Rvb2x0aXBNYW5hZ2VyJ1xuUG9wb3Zlck1hbmFnZXIgPSByZXF1aXJlICcuL3RpcC9Qb3BvdmVyTWFuYWdlcidcbkJlaGF2aW9yTWFuYWdlciA9IHJlcXVpcmUgJy4vYmVoYXZpb3JzL0JlaGF2aW9yTWFuYWdlcidcblRvb2x0aXBCZWhhdmlvciA9IHJlcXVpcmUgJy4vYmVoYXZpb3JzL1Rvb2x0aXAnXG5Qb3BvdmVyQmVoYXZpb3IgPSByZXF1aXJlICcuL2JlaGF2aW9ycy9Qb3BvdmVyJ1xuVGFic0JlaGF2aW9yID0gcmVxdWlyZSAnLi9iZWhhdmlvcnMvVGFicydcblxuIyBzZWxlY3Rpb25zXG5TZWxlY3RvckZhY3RvcnkgPSByZXF1aXJlICcuL3NlbGVjdGlvbi9TZWxlY3RvckZhY3RvcnknXG5DaGVja1NlbGVjdG9yID0gcmVxdWlyZSAnLi9zZWxlY3Rpb24vQ2hlY2tTZWxlY3RvcidcblJvd1NlbGVjdG9yID0gcmVxdWlyZSAnLi9zZWxlY3Rpb24vUm93U2VsZWN0b3InXG5cbiMgdXRpbHNcbk5vdGlmaWNhdG9yID0gcmVxdWlyZSAnLi9ub3RpZnkvTm90aWZpY2F0b3InXG5cbiMgbWFza3NcbkxvYWRpbmdNYXNrRmFjdG9yeSA9IHJlcXVpcmUgJy4vbWFzay9Mb2FkaW5nTWFza0ZhY3RvcnknXG5Mb2FkaW5nTWFzayA9IHJlcXVpcmUgJy4vbWFzay9Mb2FkaW5nTWFzaydcblxuIyBwaWNrZXJzXG5QaWNrZXJNYW5hZ2VyID0gcmVxdWlyZSAnLi9waWNrZXIvUGlja2VyTWFuYWdlcidcblxuIyBkcm9wZG93blxuRHJvcGRvd25NYW5hZ2VyID0gcmVxdWlyZSAnLi9kcm9wZG93bi9Ecm9wZG93bk1hbmFnZXInXG5cblxuY2xhc3MgTWl3b1VpRXh0ZW5zaW9uIGV4dGVuZHMgTWl3by5kaS5JbmplY3RvckV4dGVuc2lvblxuXG5cblx0aW5pdDogLT5cblx0XHRAc2V0Q29uZmlnXG5cdFx0XHRiZWhhdmlvcnM6XG5cdFx0XHRcdHRvb2x0aXA6IFRvb2x0aXBCZWhhdmlvcixcblx0XHRcdFx0cG9wb3ZlcjogUG9wb3ZlckJlaGF2aW9yXG5cdFx0XHRcdHRhYnM6IFRhYnNCZWhhdmlvclxuXHRcdFx0c2VsZWN0b3JzOlxuXHRcdFx0XHRyb3c6IFJvd1NlbGVjdG9yXG5cdFx0XHRcdGNoZWNrOiBDaGVja1NlbGVjdG9yXG5cdFx0XHRtYXNrOlxuXHRcdFx0XHRpbnN0YW5jZUNsczogTG9hZGluZ01hc2tcblx0XHRyZXR1cm5cblxuXG5cdGJ1aWxkOiAoaW5qZWN0b3IpIC0+XG5cdFx0IyB3aW5kb3dzXG5cdFx0aW5qZWN0b3IuZGVmaW5lKCdkaWFsb2dGYWN0b3J5JywgRGlhbG9nRmFjdG9yeSlcblx0XHRcdC5zZXRHbG9iYWwoJ2RpYWxvZycpXG5cdFx0aW5qZWN0b3IuZGVmaW5lKCd3aW5kb3dNZ3InLCBXaW5kb3dNYW5hZ2VyKVxuXHRcdFx0LnNldEdsb2JhbCgpXG5cblx0XHQjIGZvcm1zXG5cdFx0aW5qZWN0b3IuZGVmaW5lICdmb3JtUmVuZGVyZXJGYWN0b3J5JywgRm9ybVJlbmRlcmVyRmFjdG9yeSwgKHNlcnZpY2UpPT5cblx0XHRcdHNlcnZpY2UucmVnaXN0ZXIoJ2RlZmF1bHQnLCBEZWZhdWx0UmVuZGVyZXIpXG5cdFx0XHRzZXJ2aWNlLnJlZ2lzdGVyKCdpbmxpbmUnLCBJbmxpbmVSZW5kZXJlcilcblx0XHRcdHJldHVyblxuXG5cdFx0IyBkcm9wZG93blxuXHRcdGluamVjdG9yLmRlZmluZSgnZHJvcGRvd25NZ3InLCBEcm9wZG93bk1hbmFnZXIpXG5cdFx0XHQuc2V0R2xvYmFsKClcblxuXHRcdCMgdG9vbHRpcHNcblx0XHRpbmplY3Rvci5kZWZpbmUgJ3Rvb2x0aXAnLCBUb29sdGlwTWFuYWdlclxuXHRcdFx0LnNldEdsb2JhbCgpXG5cdFx0aW5qZWN0b3IuZGVmaW5lICdwb3BvdmVyJywgUG9wb3Zlck1hbmFnZXJcblx0XHRcdC5zZXRHbG9iYWwoKVxuXG5cdFx0IyBiZWhhdmlvcnMgJiB0b29sdGlwc1xuXHRcdGluamVjdG9yLmRlZmluZSAnYmVoYXZpb3InLCBCZWhhdmlvck1hbmFnZXJcblx0XHRcdC5zZXRHbG9iYWwoKVxuXHRcdFx0LnNldHVwIChzZXJ2aWNlKT0+XG5cdFx0XHRcdGZvciBuYW1lLHZhbHVlIG9mIEBjb25maWcuYmVoYXZpb3JzXG5cdFx0XHRcdFx0aWYgVHlwZS5pc0Z1bmN0aW9uKHZhbHVlKVxuXHRcdFx0XHRcdFx0c2VydmljZS5pbnN0YWxsKG5hbWUsIGluamVjdG9yLmNyZWF0ZUluc3RhbmNlKHZhbHVlKSlcblx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJCZWhhdmlvciBtdXN0IGJlIGZ1bmN0aW9uIChjb25zdHJ1Y3RvcikuXCIpXG5cdFx0XHRcdHJldHVyblxuXG5cdFx0IyBzZWxlY3Rpb25zXG5cdFx0aW5qZWN0b3IuZGVmaW5lICdzZWxlY3RvckZhY3RvcnknLCBTZWxlY3RvckZhY3RvcnksIChzZXJ2aWNlKT0+XG5cdFx0XHRmb3IgbmFtZSxrbGFzcyBvZiBAY29uZmlnLnNlbGVjdG9yc1xuXHRcdFx0XHRzZXJ2aWNlLnJlZ2lzdGVyKG5hbWUsa2xhc3MpXG5cdFx0XHRyZXR1cm5cblxuXHRcdCMgdXRpbHNcblx0XHRpbmplY3Rvci5kZWZpbmUgJ25vdGlmaWNhdG9yJywgTm90aWZpY2F0b3Jcblx0XHRcdC5zZXRHbG9iYWwoKVxuXG5cdFx0IyBtYXNrc1xuXHRcdGluamVjdG9yLmRlZmluZSAnbWFzaycsIExvYWRpbmdNYXNrRmFjdG9yeVxuXHRcdFx0LnNldEdsb2JhbCgpXG5cdFx0XHQuc2V0dXAgKHNlcnZpY2UpPT5cblx0XHRcdFx0c2VydmljZS5pbnN0YW5jZUNscyA9IEBjb25maWcubWFzay5pbnN0YW5jZUNsc1xuXHRcdFx0XHRyZXR1cm5cblxuXHRcdCMgcGlja2Vyc1xuXHRcdGluamVjdG9yLmRlZmluZSAncGlja2VycycsIFBpY2tlck1hbmFnZXJcblx0XHRcdC5zZXRHbG9iYWwoKVxuXHRcdHJldHVyblxuXG5cblx0dXBkYXRlOiAoaW5qZWN0b3IpIC0+XG5cdFx0IyBjb25uZWN0IGNvbXBvbmVudHMgd2l0aCBiZWhhdmlvcnNcblx0XHRpbmplY3Rvci51cGRhdGUoJ2NvbXBvbmVudE1ncicpLnNldHVwIChzZXJ2aWNlKT0+XG5cdFx0XHRiZWhhdmlvciA9IGluamVjdG9yLmdldCgnYmVoYXZpb3InKVxuXHRcdFx0c2VydmljZS5vbiAnYWZ0ZXJyZW5kZXInLCAoY29tcG9uZW50KT0+XG5cdFx0XHRcdGJlaGF2aW9yLmFwcGx5KGNvbXBvbmVudC5lbClcblx0XHRcdFx0cmV0dXJuXG5cdFx0XHRyZXR1cm5cblx0XHRyZXR1cm5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IE1pd29VaUV4dGVuc2lvbiIsImNsYXNzIEJlaGF2aW9yTWFuYWdlclxuXG5cdGJlaGF2aW9yczogbnVsbFxuXG5cblx0Y29uc3RydWN0b3I6IC0+XG5cdFx0QGJlaGF2aW9ycyA9IHt9XG5cblxuXHRpbnN0YWxsOiAobmFtZSwgcGx1Z2luKSAtPlxuXHRcdEBiZWhhdmlvcnNbbmFtZV0gPSBwbHVnaW5cblx0XHR0aGlzW25hbWVdID0gcGx1Z2luXG5cdFx0bWl3by5yZWFkeSA9PlxuXHRcdFx0aWYgcGx1Z2luLmluaXRcblx0XHRcdFx0cGx1Z2luLmluaXQobWl3by5ib2R5KVxuXHRcdFx0cmV0dXJuXG5cdFx0cmV0dXJuXG5cblxuXHRnZXQ6IChuYW1lKSAtPlxuXHRcdHJldHVybiBAYmVoYXZpb3JzW25hbWVdXG5cblxuXHRhcHBseTogKGVsZW1lbnQpIC0+XG5cdFx0Zm9yIG5hbWUsYmVoYXZpb3Igb2YgQGJlaGF2aW9yc1xuXHRcdFx0aWYgYmVoYXZpb3IuYXBwbHlcblx0XHRcdFx0YmVoYXZpb3IuYXBwbHkoZWxlbWVudClcblx0XHRyZXR1cm5cblxuXG5cbm1vZHVsZS5leHBvcnRzID0gQmVoYXZpb3JNYW5hZ2VyIiwiY2xhc3MgUG9wb3ZlciBleHRlbmRzIE1pd28uT2JqZWN0XG5cblx0c2VsZWN0b3I6ICdbZGF0YS10b2dnbGU9XCJwb3BvdmVyXCJdJ1xuXHRwb3BvdmVyOiBAaW5qZWN0KCdwb3BvdmVyJylcblxuXG5cdGluaXQ6IChib2R5KSAtPlxuXHRcdGJvZHkub24gXCJtb3VzZWVudGVyOnJlbGF5KCN7QHNlbGVjdG9yfSlcIiwgKGUsIHRhcmdldCkgPT5cblx0XHRcdEBwb3BvdmVyLnNob3codGFyZ2V0KVxuXHRcdFx0cmV0dXJuXG5cdFx0cmV0dXJuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBQb3BvdmVyIiwiY2xhc3MgVGFicyBleHRlbmRzIE1pd28uT2JqZWN0XG5cblx0c2VsZWN0b3I6ICdbZGF0YS10b2dnbGU9XCJ0YWJcIl0nXG5cblxuXHRpbml0OiAoYm9keSkgLT5cblx0XHQjIG5vdCBzdXBwb3J0ZWQgeWV0XG5cdFx0cmV0dXJuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBUYWJzIiwiY2xhc3MgVG9vbHRpcCBleHRlbmRzIE1pd28uT2JqZWN0XG5cblx0c2VsZWN0b3I6ICdbZGF0YS10b2dnbGU9XCJ0b29sdGlwXCJdJ1xuXHR0b29sdGlwOiBAaW5qZWN0KCd0b29sdGlwJylcblxuXG5cdGluaXQ6IChib2R5KSAtPlxuXHRcdGJvZHkub24gXCJtb3VzZWVudGVyOnJlbGF5KCN7QHNlbGVjdG9yfSlcIiwgKGUsIHRhcmdldCkgPT5cblx0XHRcdEB0b29sdGlwLnNob3codGFyZ2V0KVxuXHRcdFx0cmV0dXJuXG5cdFx0cmV0dXJuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBUb29sdGlwIiwiY2xhc3MgQnV0dG9uIGV4dGVuZHMgTWl3by5Db21wb25lbnRcblxuXHRAZGVmYXVsdEljb25DbHNQcmVmaXg6ICdnbHlwaGljb24tJ1xuXHRAZGVmYXVsdEljb25DbHNCYXNlOiAnZ2x5cGhpY29uJ1xuXG5cdGlzQnV0dG9uOiB0cnVlXG5cdHh0eXBlOiBcImJ1dHRvblwiXG5cdGVsOiAnYnV0dG9uJ1xuXHRiYXNlQ2xzOiAnYnRuJ1xuXHRoYW5kbGVyOiBudWxsXG5cdHRleHQ6ICcnXG5cdHNpemU6ICcnXG5cdHR5cGU6ICdkZWZhdWx0J1xuXHRkaXNhYmxlZDogZmFsc2Vcblx0YWN0aXZlOiBmYWxzZVxuXHR0b2dnbGVkOiBmYWxzZVxuXHR0b2dnbGVIYW5kbGVyOiBudWxsXG5cdHRvb2x0aXA6IG51bGxcblx0dGl0bGU6IG51bGxcblx0aWNvbjogbnVsbFxuXG5cdHRleHRFbDogbnVsbFxuXHRpY29uRWw6IG51bGxcblxuXG5cdHNldERpc2FibGVkOiAoZGlzYWJsZWQsIHNpbGVudCkgLT5cblx0XHRAZWwudG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJywgZGlzYWJsZWQpXG5cdFx0QGVsLnNldCgndGFiaW5kZXgnLCAtZGlzYWJsZWQpXG5cdFx0QGRpc2FibGVkID0gZGlzYWJsZWRcblx0XHQoaWYgZGlzYWJsZWQgdGhlbiBAZW1pdCgnZGlzYWJsZWQnLCB0aGlzKSBlbHNlIEBlbWl0KCdlbmFibGVkJywgdGhpcykpIHVubGVzcyBzaWxlbnRcblx0XHRyZXR1cm5cblxuXG5cdHNldFRleHQ6ICh0ZXh0KSAtPlxuXHRcdEB0ZXh0ID0gdGV4dFxuXHRcdGlmIEB0ZXh0RWxcblx0XHRcdEB0ZXh0RWwuc2V0KFwiaHRtbFwiLCAoaWYgQGljb24gdGhlbiAnICcrQHRleHQgZWxzZSBAdGV4dCkpXG5cdFx0cmV0dXJuXG5cblxuXHRzZXRJY29uOiAoY2xzLCBzaWxlbnQpIC0+XG5cdFx0aWYgQGljb25FbCAmJiBAaWNvblxuXHRcdFx0QGljb25FbC5yZW1vdmVDbGFzcyhCdXR0b24uZGVmYXVsdEljb25DbHNQcmVmaXgrQGljb24pXG5cdFx0QGljb24gPSBjbHNcblx0XHRpZiBAaWNvbkVsXG5cdFx0XHRpZiBjbHNcblx0XHRcdFx0QGljb25FbC5hZGRDbGFzcyhCdXR0b24uZGVmYXVsdEljb25DbHNQcmVmaXgrY2xzKVxuXHRcdFx0XHRAaWNvbkVsLnNob3coXCJpbmxpbmUtYmxvY2tcIilcblx0XHRcdGVsc2Vcblx0XHRcdFx0QGljb25FbC5oaWRlKClcblx0XHRyZXR1cm5cblxuXG5cdHNldFNpemU6IChzaXplKSAtPlxuXHRcdEBlbC5yZW1vdmVDbGFzcyhAZ2V0QmFzZUNscyhAc2l6ZSkpIGlmIEBzaXplXG5cdFx0QGVsLmFkZENsYXNzKEBnZXRCYXNlQ2xzKHNpemUpKSBpZiBzaXplXG5cdFx0QHNpemUgPSBzaXplXG5cdFx0cmV0dXJuXG5cblxuXHRzZXRUeXBlOiAodHlwZSkgLT5cblx0XHRAZWwucmVtb3ZlQ2xhc3MoQGdldEJhc2VDbHMoQHR5cGUpKSBpZiBAdHlwZVxuXHRcdEBlbC5hZGRDbGFzcyhAZ2V0QmFzZUNscyh0eXBlKSkgaWYgdHlwZVxuXHRcdEB0eXBlID0gdHlwZVxuXHRcdHJldHVyblxuXG5cblx0c2V0QWN0aXZlOiAoYWN0aXZlLCBzaWxlbnQpIC0+XG5cdFx0QGVsLnRvZ2dsZUNsYXNzKCdhY3RpdmUnLCBhY3RpdmUpXG5cdFx0QGFjdGl2ZSA9IGFjdGl2ZVxuXHRcdEBlbWl0KCdhY3RpdmUnLCB0aGlzLCBhY3RpdmUpIGlmICFzaWxlbnQgJiYgYWN0aXZlXG5cdFx0cmV0dXJuXG5cblxuXHRpc0FjdGl2ZTogLT5cblx0XHRyZXR1cm4gQGFjdGl2ZSBhbmQgbm90IEBkaXNhYmxlZFxuXG5cblx0c2V0VG9nZ2xlZDogKHRvZ2dsZWQpIC0+XG5cdFx0QHRvZ2dsZWQgPSB0b2dnbGVkXG5cdFx0cmV0dXJuXG5cblxuXHR0b2dnbGU6IChzaWxlbnQpIC0+XG5cdFx0QHNldEFjdGl2ZSghQGFjdGl2ZSlcblx0XHRpZiAhc2lsZW50XG5cdFx0XHRAZW1pdCgndG9nZ2xlJywgdGhpcywgQGFjdGl2ZSlcblx0XHRcdGlmIEB0b2dnbGVIYW5kbGVyIHRoZW4gQHRvZ2dsZUhhbmRsZXIodGhpcywgQGFjdGl2ZSlcblx0XHRyZXR1cm5cblxuXG5cdGNsaWNrOiAoZSkgLT5cblx0XHRpZiBUeXBlLmlzRnVuY3Rpb24oQGhhbmRsZXIpXG5cdFx0XHRAaGFuZGxlcih0aGlzLCBlKVxuXHRcdGVsc2UgaWYgVHlwZS5pc1N0cmluZyhAaGFuZGxlcilcblx0XHRcdGlmIEBoYW5kbGVyLmluZGV4T2YoJyMnKSBpcyAwXG5cdFx0XHRcdG1pd28ucmVkaXJlY3QoQGhhbmRsZXIpXG5cdFx0XHRlbHNlXG5cdFx0XHRcdGRvY3VtZW50LmxvY2F0aW9uID0gQGhhbmRsZXJcblx0XHRyZXR1cm5cblxuXG5cdGRvUmVuZGVyOiAtPlxuXHRcdEBlbC5hZGRDbGFzcyhAZ2V0QmFzZUNscyhAdHlwZSkpICBpZiBAdHlwZVxuXHRcdEBlbC5hZGRDbGFzcyhAZ2V0QmFzZUNscyhAc2l6ZSkpICBpZiBAc2l6ZVxuXHRcdEBlbC5hZGRDbGFzcygnYWN0aXZlJykgIGlmIEBhY3RpdmVcblx0XHRAZWwuYWRkQ2xhc3MoJ2Rpc2FibGVkJykgIGlmIEBkaXNhYmxlZFxuXHRcdEBlbC5zZXQoJ3RhYmluZGV4JywgLTEpICBpZiBAZGlzYWJsZWRcblx0XHRAZWwuc2V0KFwidGl0bGVcIiwgQHRvb2x0aXAgfHwgQHRpdGxlKSAgaWYgQHRvb2x0aXAgfHwgQHRpdGxlXG5cdFx0QGVsLm9uKFwiY2xpY2tcIiwgQGJvdW5kKFwib25DbGlja1wiKSlcblx0XHRAZWwub24oXCJrZXl1cFwiLCBAYm91bmQoXCJvbktleXVwXCIpKVxuXG5cdFx0QGljb25FbCA9IG5ldyBFbGVtZW50IFwiaVwiLFxuXHRcdFx0cGFyZW50OiBAZWxcblx0XHRcdGNsczogQnV0dG9uLmRlZmF1bHRJY29uQ2xzQmFzZVxuXG5cdFx0QHRleHRFbCA9IG5ldyBFbGVtZW50IFwic3BhblwiLFxuXHRcdFx0cGFyZW50OiBAZWxcblx0XHRcdGh0bWw6IChpZiBAaWNvbiB0aGVuICcgJytAdGV4dCBlbHNlIEB0ZXh0KVxuXG5cdFx0QGljb25FbC5hZGRDbGFzcyhCdXR0b24uZGVmYXVsdEljb25DbHNQcmVmaXgrQGljb24pXG5cdFx0aWYgIUBpY29uIHRoZW4gQGljb25FbC5oaWRlKClcblx0XHRyZXR1cm5cblxuXG5cdG9uQ2xpY2s6IChlKSAtPlxuXHRcdGUuc3RvcCgpXG5cdFx0aWYgQGRpc2FibGVkIHRoZW4gcmV0dXJuXG5cblx0XHRAcHJldmVudENsaWNrID0gZmFsc2Vcblx0XHRAZW1pdCgnYmVmb3JlY2xpY2snLCB0aGlzLCBlKVxuXHRcdGlmIEBwcmV2ZW50Q2xpY2sgdGhlbiByZXR1cm5cblxuXHRcdGlmIEB0b2dnbGVkIHRoZW4gQHRvZ2dsZSgpXG5cdFx0QGVtaXQoJ2NsaWNrJywgdGhpcywgZSlcblx0XHRAY2xpY2soZSlcblx0XHRyZXR1cm5cblxuXG5cdG9uS2V5dXA6IChlKSAtPlxuXHRcdGlmIGUua2V5IGlzICdlbnRlcicgdGhlbiBAb25DbGljayhlKVxuXHRcdHJldHVyblxuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBCdXR0b24iLCJCdXR0b24gPSByZXF1aXJlICcuL0J1dHRvbidcbkRyb3Bkb3duQnV0dG9uID0gcmVxdWlyZSAnLi9Ecm9wZG93bkJ1dHRvbidcblxuXG5jbGFzcyBCdXR0b25Hcm91cCBleHRlbmRzIE1pd28uQ29udGFpbmVyXG5cblx0eHR5cGU6IFwiYnV0dG9uZ3JvdXBcIlxuXHR0b2dnbGU6IG51bGwgIyBjaGVja2JveCwgcmFkaW9cblx0c2l6ZTogbnVsbFxuXHRsYWJlbDogbnVsbFxuXHRyb2xlOiAnZ3JvdXAnXG5cdGxheW91dDogJ2F1dG8nXG5cdGJhc2VDbHM6ICdidG4tZ3JvdXAnXG5cblxuXHR2YWxpZGF0ZUNoaWxkQ29tcG9uZW50OiAoY29tcG9uZW50KSAtPlxuXHRcdGlmICFjb21wb25lbnQuaXNCdXR0b25cblx0XHRcdHRocm93IG5ldyBFcnJvcihcIkNoaWxkIGNvbXBvbmVudCBtdXN0IGJ5IGluc3RhbmNlIG9mIE1pd28uYnV0dG9uLkJ1dHRvblwiKVxuXHRcdHJldHVyblxuXG5cblx0YWRkZWRDb21wb25lbnQ6IChjb21wb25lbnQpIC0+XG5cdFx0Y29tcG9uZW50LnNldFRvZ2dsZWQoISFAdG9nZ2xlKVxuXHRcdEBtb24oY29tcG9uZW50LCBcImFjdGl2ZVwiLCBcIm9uQnV0dG9uQWN0aXZlXCIpXG5cdFx0cmV0dXJuXG5cblxuXHRyZW1vdmVkQ29tcG9uZW50OiAoY29tcG9uZW50KSAtPlxuXHRcdEBtdW4oY29tcG9uZW50KVxuXHRcdHJldHVyblxuXG5cblx0b25CdXR0b25BY3RpdmU6IChidG4pIC0+XG5cdFx0aWYgQHRvZ2dsZSBpcyBcInJhZGlvXCJcblx0XHRcdEBnZXRBY3RpdmVCdXR0b25zKCkuZWFjaCAocGJ0bikgLT5cblx0XHRcdFx0cGJ0bi5zZXRBY3RpdmUoZmFsc2UsIHRydWUpICBpZiBwYnRuIGlzbnQgYnRuXG5cdFx0XHRcdHJldHVyblxuXHRcdEBlbWl0KCdhY3RpdmUnLCB0aGlzLCBidG4pXG5cdFx0cmV0dXJuXG5cblxuXHRzZXREaXNhYmxlZDogKGRpc2FibGVkLCBzaWxlbnQpIC0+XG5cdFx0QGdldENvbXBvbmVudHMoKS5lYWNoIChjb21wb25lbnQpIC0+XG5cdFx0XHRjb21wb25lbnQuc2V0RGlzYWJsZWQoZGlzYWJsZWQsIHNpbGVudClcblx0XHRcdHJldHVyblxuXHRcdHJldHVyblxuXG5cblx0c2V0QWN0aXZlOiAobmFtZSwgYWN0aXZlLCBzaWxlbnQpIC0+XG5cdFx0QGdldChuYW1lKS5zZXRBY3RpdmUoYWN0aXZlLCBzaWxlbnQpXG5cdFx0cmV0dXJuXG5cblxuXHRzZXRBY3RpdmVBbGw6IChhY3RpdmUpIC0+XG5cdFx0QGdldENvbXBvbmVudHMoKS5lYWNoIChjb21wb25lbnQpIC0+XG5cdFx0XHRjb21wb25lbnQuc2V0QWN0aXZlKGFjdGl2ZSwgdHJ1ZSlcblx0XHRcdHJldHVyblxuXHRcdHJldHVyblxuXG5cblx0Z2V0QWN0aXZlQnV0dG9uczogLT5cblx0XHRhY3RpdmUgPSBbXVxuXHRcdEBnZXRDb21wb25lbnRzKCkuZWFjaCAoY29tcG9uZW50KSAtPlxuXHRcdFx0YWN0aXZlLnB1c2goY29tcG9uZW50KSAgaWYgY29tcG9uZW50LmlzQWN0aXZlKClcblx0XHRcdHJldHVyblxuXHRcdHJldHVybiBhY3RpdmVcblxuXG5cdGdldEFjdGl2ZUJ1dHRvbjogLT5cblx0XHRhY3RpdmUgPSBudWxsXG5cdFx0QGdldENvbXBvbmVudHMoKS5lYWNoIChjb21wb25lbnQpIC0+XG5cdFx0XHRpZiBjb21wb25lbnQuaXNBY3RpdmUoKVxuXHRcdFx0XHRhY3RpdmUgPSBjb21wb25lbnRcblx0XHRcdFx0cmV0dXJuIGZhbHNlXG5cdFx0cmV0dXJuIGFjdGl2ZVxuXG5cblx0YWRkQnV0dG9uOiAobmFtZSwgY29uZmlnKSAtPlxuXHRcdHJldHVybiBAYWRkKG5hbWUsIG5ldyBCdXR0b24oY29uZmlnKSlcblxuXG5cdGFkZERyb3Bkb3duQnV0dG9uOiAobmFtZSwgY29uZmlnKSAtPlxuXHRcdHJldHVybiBAYWRkKG5hbWUsIG5ldyBEcm9wZG93bkJ1dHRvbihjb25maWcpKVxuXG5cblx0YWZ0ZXJSZW5kZXI6IC0+XG5cdFx0c3VwZXJcblx0XHRAZWwuc2V0KCdhcmlhLWxhYmVsJywgQGxhYmVsKSBpZiBAbGFiZWxcblx0XHRAZWwuYWRkQ2xhc3MoJ2J0bi1ncm91cC0nK0BzaXplKSBpZiBAc2l6ZVxuXHRcdHJldHVyblxuXG5cbm1vZHVsZS5leHBvcnRzID0gQnV0dG9uR3JvdXAiLCJCdXR0b24gPSByZXF1aXJlICcuL0J1dHRvbidcblxuXG5jbGFzcyBDbG9zZUJ1dHRvbiBleHRlbmRzIEJ1dHRvblxuXG5cdGJhc2VDbHM6ICdjbG9zZSdcblx0dGV4dDogJzxzcGFuIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPsOXPC9zcGFuPidcblxuXG5tb2R1bGUuZXhwb3J0cyA9IENsb3NlQnV0dG9uIiwiQnV0dG9uID0gcmVxdWlyZSAnLi9CdXR0b24nXG5Ecm9wZG93bkxpc3QgPSByZXF1aXJlICcuLi9kcm9wZG93bi9MaXN0J1xuXG5cbmNsYXNzIERyb3Bkb3duQnV0dG9uIGV4dGVuZHMgQnV0dG9uXG5cblx0ZHJvcGRvd246IG51bGxcblxuXG5cdGFmdGVyUmVuZGVyOiAtPlxuXHRcdHN1cGVyXG5cdFx0QGVsLnNldCgnYXJpYS1oYXNwb3B1cCcsIHRydWUpXG5cdFx0QGVsLnNldCgnYXJpYS1leHBhbmRlZCcsIGZhbHNlKVxuXHRcdHJldHVyblxuXG5cblx0Z2V0RHJvcGRvd246IC0+XG5cdFx0aWYgIUBkcm9wZG93blxuXHRcdFx0QGRyb3Bkb3duID0gbmV3IERyb3Bkb3duTGlzdCh7dGFyZ2V0OiBAZWx9KVxuXHRcdFx0QGRyb3Bkb3duLmVsLnNldCgnYXJpYS1sYWJlbGxlZGJ5JywgQGlkKVxuXHRcdHJldHVybiBAZHJvcGRvd25cblxuXG5cdGRvUmVuZGVyOiAtPlxuXHRcdHN1cGVyXG5cdFx0Y2FyZXQgPSBuZXcgRWxlbWVudCgnc3BhbicsIHtjbHM6ICdjYXJldCd9KVxuXHRcdGNhcmV0LmluamVjdChAZ2V0Q29udGVudEVsKCkpXG5cdFx0cmV0dXJuXG5cblxuXHRjbGljazogLT5cblx0XHRAZ2V0RHJvcGRvd24oKS50b2dnbGUoKVxuXHRcdHJldHVyblxuXG5cblx0ZG9EZXN0cm95OiAtPlxuXHRcdEBkcm9wZG93bi5kZXN0cm95KCkgaWYgQGRyb3Bkb3duXG5cdFx0c3VwZXJcblxuXG5tb2R1bGUuZXhwb3J0cyA9IERyb3Bkb3duQnV0dG9uIiwiQnV0dG9uID0gcmVxdWlyZSAnLi9CdXR0b24nXG5cblxuY2xhc3MgVG9vbEJ1dHRvbiBleHRlbmRzIE1pd28uQ29tcG9uZW50XG5cblx0aXNUb29sOiB0cnVlXG5cdHh0eXBlOiBcInRvb2xidXR0b25cIlxuXHRoYW5kbGVyOiBudWxsXG5cdGljb246IG51bGxcblx0dGV4dDogXCJcIlxuXHR0b29sdGlwOiBudWxsXG5cdGVsOiAnYnV0dG9uJ1xuXG5cdHRleHRFbDogbnVsbFxuXHRpY29uRWw6IG51bGxcblxuXG5cblx0c2V0RGlzYWJsZWQ6IChkaXNhYmxlZCwgc2lsZW50KSAtPlxuXHRcdEBlbC50b2dnbGVDbGFzcygnZGlzYWJsZWQnLCBkaXNhYmxlZClcblx0XHRAZGlzYWJsZWQgPSBkaXNhYmxlZFxuXHRcdChpZiBkaXNhYmxlZCB0aGVuIEBlbWl0KCdkaXNhYmxlZCcsIHRoaXMpIGVsc2UgQGVtaXQoJ2VuYWJsZWQnLCB0aGlzKSkgdW5sZXNzIHNpbGVudFxuXHRcdHJldHVyblxuXG5cblx0c2V0VGV4dDogKHRleHQpIC0+XG5cdFx0QHRleHQgPSB0ZXh0XG5cdFx0QHRleHRFbC5zZXQoXCJodG1sXCIsIHRleHQpIGlmIEB0ZXh0RWxcblx0XHRyZXR1cm5cblxuXG5cdHNldEljb246IChjbHMsIHNpbGVudCkgLT5cblx0XHRpZiBAaWNvbkVsXG5cdFx0XHRpZiBAaWNvblxuXHRcdFx0XHRAaWNvbkVsLnJlbW92ZUNsYXNzKEJ1dHRvbi5kZWZhdWx0SWNvbkNsc1ByZWZpeCtAaWNvbilcblx0XHRAaWNvbiA9IGNsc1xuXHRcdGlmIEBpY29uRWxcblx0XHRcdGlmIGNsc1xuXHRcdFx0XHRAaWNvbkVsLmFkZENsYXNzKEJ1dHRvbi5kZWZhdWx0SWNvbkNsc1ByZWZpeCtjbHMpXG5cdFx0XHRcdEBpY29uRWwuc2hvdyhcImlubGluZS1ibG9ja1wiKVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHRAaWNvbkVsLmhpZGUoKVxuXHRcdHJldHVyblxuXG5cblx0Y2xpY2s6IChlKSAtPlxuXHRcdEBoYW5kbGVyKHRoaXMsIGUpIGlmIEBoYW5kbGVyXG5cdFx0cmV0dXJuXG5cblxuXHRkb1JlbmRlcjogLT5cblx0XHRAZWwuYWRkQ2xhc3MoJ2J0bi10b29sJylcblx0XHRAZWwuYWRkQ2xhc3MoJ2Rpc2FibGVkJykgIGlmIEBkaXNhYmxlZFxuXHRcdEBlbC5zZXQoXCJ0aXRsZVwiLCBAdG9vbHRpcCkgIGlmIEB0b29sdGlwXG5cdFx0QGVsLm9uKFwiY2xpY2tcIiwgQGJvdW5kKFwib25DbGlja1wiKSlcblxuXHRcdEBpY29uRWwgPSBuZXcgRWxlbWVudCBcImlcIixcblx0XHRcdHBhcmVudDogQGVsXG5cdFx0XHRjbHM6IEJ1dHRvbi5kZWZhdWx0SWNvbkNsc0Jhc2UrJyAnK0J1dHRvbi5kZWZhdWx0SWNvbkNsc1ByZWZpeCtAaWNvblxuXG5cdFx0QHRleHRFbCA9IG5ldyBFbGVtZW50IFwic3BhblwiLFxuXHRcdFx0cGFyZW50OiBAZWxcblx0XHRcdGNsczogJ3NyLW9ubHknXG5cdFx0XHRodG1sOiBAdGV4dFxuXHRcdHJldHVyblxuXG5cblx0b25DbGljazogKGUpIC0+XG5cdFx0ZS5zdG9wKClcblx0XHRpZiBAZGlzYWJsZWQgdGhlbiByZXR1cm5cblxuXHRcdEBwcmV2ZW50Q2xpY2sgPSBmYWxzZVxuXHRcdEBlbWl0KCdiZWZvcmVjbGljaycsIHRoaXMsIGUpXG5cdFx0aWYgQHByZXZlbnRDbGljayB0aGVuIHJldHVyblxuXG5cdFx0QGVtaXQoJ2NsaWNrJywgdGhpcywgZSlcblx0XHRAY2xpY2soZSlcblx0XHRyZXR1cm5cblxuXG5cbm1vZHVsZS5leHBvcnRzID0gVG9vbEJ1dHRvbiIsIm1vZHVsZS5leHBvcnRzID1cblxuXHRCdXR0b25Hcm91cDogcmVxdWlyZSAnLi9CdXR0b25Hcm91cCdcblx0QnV0dG9uOiByZXF1aXJlICcuL0J1dHRvbidcblx0VG9vbEJ1dHRvbjogcmVxdWlyZSAnLi9Ub29sQnV0dG9uJ1xuXHREcm9wZG93bkJ1dHRvbjogcmVxdWlyZSAnLi9Ecm9wZG93bkJ1dHRvbidcblx0Q2xvc2VCdXR0b246IHJlcXVpcmUgJy4vQ2xvc2VCdXR0b24nIiwiY2xhc3MgRHJhZyBleHRlbmRzIE1pd28uT2JqZWN0XG5cblx0IyBAY29uZmlnIHtpbnR9XG5cdHNuYXA6IDZcblx0IyBAY29uZmlnIHtzdHJpbmd9XG5cdHVuaXQ6ICdweCdcblx0IyBAY29uZmlnIHtudW1iZXJ8Ym9vbGVhbn1cblx0Z3JpZDogbnVsbFxuXHQjIEBjb25maWcge2Jvb2xlYW59XG5cdHN0eWxlOiB0cnVlXG5cdCMgQGNvbmZpZyB7Ym9vbGVhbn1cblx0bGltaXRzOiBudWxsXG5cdCMgQGNvbmZpZyB7Ym9vbGVhbn1cblx0aGFuZGxlOiBmYWxzZVxuXHQjIEBjb25maWcge2Jvb2xlYW59XG5cdGludmVydDogZmFsc2Vcblx0IyBAY29uZmlnIHtib29sZWFufVxuXHRwcmV2ZW50RGVmYXVsdDogZmFsc2Vcblx0IyBAY29uZmlnIHtib29sZWFufVxuXHRzdG9wUHJvcGFnYXRpb246IGZhbHNlXG5cdCMgQGNvbmZpZyB7b2JqZWN0fSB7eDonbGVmdCcsIHk6J3RvcCd9XG5cdG1vZGlmaWVyczogbnVsbFxuXG5cdCMgQGV2ZW50IGJlZm9yZXN0YXJ0ICAoZWwpXG5cdCMgQGV2ZW50IHN0YXJ0IChlbCwgZXZlbnQpXG5cdCMgQGV2ZW50IHNuYXAgKGVsKVxuXHQjIEBldmVudCBkcmFnIChlbCwgZXZlbnQpXG5cdCMgQGV2ZW50IGNhbmNlbCAoZWwpXG5cdCMgQGV2ZW50IGNvbXBsZXRlIChlbCwgZXZlbnQpXG5cblx0bW91c2U6IG51bGxcblx0dmFsdWU6IG51bGxcblx0aGFuZGxlczogbnVsbFxuXHRkb2N1bWVudDogbnVsbFxuXHRlbGVtZW50OiBudWxsXG5cblx0Y29uc3RydWN0b3I6IChAZWxlbWVudCwgY29uZmlnKSAtPlxuXHRcdHN1cGVyKGNvbmZpZylcblxuXHRcdEBlbGVtZW50ID0gZG9jdW1lbnQuaWQoQGVsZW1lbnQpXG5cdFx0QGRvY3VtZW50ID0gQGVsZW1lbnQuZ2V0RG9jdW1lbnQoKVxuXHRcdEBtb2RpZmllcnMgPSB7eDonbGVmdCcsIHk6J3RvcCd9IGlmICFAbW9kaWZpZXJzXG5cblx0XHR0eXBlID0gdHlwZU9mKEBoYW5kbGUpXG5cdFx0QGhhbmRsZXMgPSAoaWYgdHlwZSA9PSAnYXJyYXknIG9yIHR5cGUgPT0gJ2NvbGxlY3Rpb24nIHRoZW4gJCQoQGhhbmRsZSkgZWxzZSBkb2N1bWVudC5pZChAaGFuZGxlKSkgb3IgQGVsZW1lbnRcblxuXHRcdEBsaW1pdHMgPSB7eDogW10sIHk6IFtdfSAgaWYgIUBsaW1pdHNcblx0XHRAbW91c2UgPSB7J25vdyc6IHt9LCAncG9zJzoge319XG5cdFx0QHZhbHVlID0geydzdGFydCc6IHt9LCAnbm93Jzoge319XG5cblx0XHRpZiAnb25kcmFnc3RhcnQnIGluIGRvY3VtZW50IGFuZCAhKCdGaWxlUmVhZGVyJyBpbiB3aW5kb3cpIGFuZCAhRHJhZy5vbmRyYWdzdGFydEZpeGVkXG5cdFx0XHRkb2N1bWVudC5vbmRyYWdzdGFydCA9IEZ1bmN0aW9uLmZyb20oZmFsc2UpXG5cdFx0XHREcmFnLm9uZHJhZ3N0YXJ0Rml4ZWQgPSB0cnVlXG5cblx0XHRpZiBAZ3JpZCBpcyBudWxsIHx8IHR5cGVPZihAZ3JpZCkgPT0gJ251bWJlcidcblx0XHRcdEBncmlkID0ge3g6IEBncmlkLCB5OiBAZ3JpZH1cblxuXHRcdEBhdHRhY2goKVxuXHRcdHJldHVyblxuXG5cblx0YXR0YWNoOiAtPlxuXHRcdEBoYW5kbGVzLm9uKCdtb3VzZWRvd24nLCBAYm91bmQoJ3N0YXJ0JykpXG5cdFx0cmV0dXJuIHRoaXNcblxuXG5cdGRldGFjaDogLT5cblx0XHRAaGFuZGxlcy51bignbW91c2Vkb3duJywgQGJvdW5kKCdzdGFydCcpKVxuXHRcdHJldHVybiB0aGlzXG5cblxuXHRzdGFydDogKGV2ZW50KSAtPlxuXHRcdGlmIGV2ZW50LnJpZ2h0Q2xpY2sgdGhlbiByZXR1cm5cblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpICBpZiBAcHJldmVudERlZmF1bHRcblx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKSAgaWYgQHN0b3BQcm9wYWdhdGlvblxuXG5cdFx0QG1vdXNlLnN0YXJ0ID0gZXZlbnQucGFnZVxuXHRcdEBlbWl0KCdiZWZvcmVzdGFydCcsIEBlbGVtZW50KVxuXG5cdFx0Zm9yIG5hbWUscHJvcGVydHkgb2YgQG1vZGlmaWVyc1xuXHRcdFx0aWYgIXByb3BlcnR5IHRoZW4gY29udGludWVcblx0XHRcdHN0eWxlID0gQGVsZW1lbnQuZ2V0U3R5bGUocHJvcGVydHkpXG5cdFx0XHQjIFNvbWUgYnJvd3NlcnMgKElFIGFuZCBPcGVyYSkgZG9uJ3QgYWx3YXlzIHJldHVybiBwaXhlbHMuXG5cdFx0XHRpZiBzdHlsZSBhbmQgIXN0eWxlLm1hdGNoKC9weCQvKVxuXHRcdFx0XHRjb29yZGluYXRlcyA9IEBlbGVtZW50LmdldENvb3JkaW5hdGVzKEBlbGVtZW50LmdldE9mZnNldFBhcmVudCgpKSBpZiAhY29vcmRpbmF0ZXNcblx0XHRcdFx0c3R5bGUgPSBjb29yZGluYXRlc1twcm9wZXJ0eV1cblx0XHRcdGlmIEBzdHlsZVxuXHRcdFx0XHRAdmFsdWUubm93W25hbWVdID0gKHN0eWxlIG9yIDApLnRvSW50KClcblx0XHRcdGVsc2Vcblx0XHRcdFx0QHZhbHVlLm5vd1tuYW1lXSA9IEBlbGVtZW50W3Byb3BlcnR5XVxuXHRcdFx0aWYgQGludmVydFxuXHRcdFx0XHRAdmFsdWUubm93W25hbWVdICo9IC0xXG5cdFx0XHRAbW91c2UucG9zW25hbWVdID0gZXZlbnQucGFnZVtuYW1lXSAtIEB2YWx1ZS5ub3dbbmFtZV1cblxuXHRcdEBkb2N1bWVudC5vbignbW91c2Vtb3ZlJywgQGJvdW5kKCdjaGVjaycpKVxuXHRcdEBkb2N1bWVudC5vbignbW91c2V1cCcsIEBib3VuZCgnY2FuY2VsJykpXG5cdFx0cmV0dXJuXG5cblxuXHRjaGVjazogKGV2ZW50KSAtPlxuXHRcdGlmIEBwcmV2ZW50RGVmYXVsdFxuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKVxuXHRcdGRpc3RhbmNlID0gTWF0aC5yb3VuZChNYXRoLnNxcnQoKGV2ZW50LnBhZ2UueCAtIEBtb3VzZS5zdGFydC54KSAqKiAyICsgKGV2ZW50LnBhZ2UueSAtIEBtb3VzZS5zdGFydC55KSAqKiAyKSlcblx0XHRpZiBkaXN0YW5jZSA+IEBzbmFwXG5cdFx0XHRAY2FuY2VsKClcblx0XHRcdEBkb2N1bWVudC5vbignbW91c2Vtb3ZlJywgQGJvdW5kKCdkcmFnJykpXG5cdFx0XHRAZG9jdW1lbnQub24oJ21vdXNldXAnLCBAYm91bmQoJ3N0b3AnKSlcblx0XHRcdEBlbWl0KCdzdGFydCcsIEBlbGVtZW50LCBldmVudClcblx0XHRcdEBlbWl0KCdzbmFwJywgQGVsZW1lbnQpXG5cdFx0cmV0dXJuXG5cblxuXHRkcmFnOiAoZXZlbnQpIC0+XG5cdFx0aWYgQHByZXZlbnREZWZhdWx0XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpXG5cdFx0QG1vdXNlLm5vdyA9IGV2ZW50LnBhZ2Vcblx0XHRmb3IgbmFtZSxwcm9wZXJ0eSBvZiBAbW9kaWZpZXJzXG5cdFx0XHRpZiAhcHJvcGVydHkgdGhlbiBjb250aW51ZVxuXHRcdFx0QHZhbHVlLm5vd1tuYW1lXSA9IEBtb3VzZS5ub3dbbmFtZV0gLSBAbW91c2UucG9zW25hbWVdXG5cdFx0XHRpZiBAaW52ZXJ0XG5cdFx0XHRcdEB2YWx1ZS5ub3dbbmFtZV0gKj0gLTFcblx0XHRcdGlmIEBsaW1pdHNbbmFtZV1cblx0XHRcdFx0aWYgKEBsaW1pdHNbbmFtZV1bMV0gb3IgQGxpbWl0c1tuYW1lXVsxXSA9PSAwKSBhbmQgQHZhbHVlLm5vd1tuYW1lXSA+IEBsaW1pdHNbbmFtZV1bMV1cblx0XHRcdFx0XHRAdmFsdWUubm93W25hbWVdID0gQGxpbWl0c1tuYW1lXVsxXVxuXHRcdFx0XHRlbHNlIGlmIChAbGltaXRzW25hbWVdWzBdIG9yIEBsaW1pdHNbbmFtZV1bMF0gPT0gMCkgYW5kIEB2YWx1ZS5ub3dbbmFtZV0gPCBAbGltaXRzW25hbWVdWzBdXG5cdFx0XHRcdFx0QHZhbHVlLm5vd1tuYW1lXSA9IEBsaW1pdHNbbmFtZV1bMF1cblx0XHRcdGlmIEBncmlkICYmIEBncmlkW25hbWVdXG5cdFx0XHRcdEB2YWx1ZS5ub3dbbmFtZV0gLT0gKEB2YWx1ZS5ub3dbbmFtZV0gLSAoQGxpbWl0c1tuYW1lXVswXSBvciAwKSkgJSBAZ3JpZFtuYW1lXVxuXHRcdFx0aWYgQHN0eWxlXG5cdFx0XHRcdEBlbGVtZW50LnNldFN0eWxlKHByb3BlcnR5LCBAdmFsdWUubm93W25hbWVdICsgQHVuaXQpXG5cdFx0XHRlbHNlXG5cdFx0XHRcdEBlbGVtZW50W3Byb3BlcnR5XSA9IEB2YWx1ZS5ub3dbbmFtZV1cblx0XHRAZW1pdCgnZHJhZycsIEBlbGVtZW50LCBldmVudClcblx0XHRyZXR1cm5cblxuXG5cdGNhbmNlbDogKGV2ZW50KSAtPlxuXHRcdEBkb2N1bWVudC51bignbW91c2Vtb3ZlJywgQGJvdW5kKCdjaGVjaycpKVxuXHRcdEBkb2N1bWVudC51bignbW91c2V1cCcsIEBib3VuZCgnY2FuY2VsJykpXG5cdFx0QGVtaXQoJ2NhbmNlbCcsIEBlbGVtZW50KSBpZiBldmVudFxuXHRcdHJldHVyblxuXG5cblx0c3RvcDogKGV2ZW50KSAtPlxuXHRcdEBkb2N1bWVudC51bignbW91c2Vtb3ZlJywgQGJvdW5kKCdkcmFnJykpXG5cdFx0QGRvY3VtZW50LnVuKCdtb3VzZXVwJywgQGJvdW5kKCdzdG9wJykpXG5cdFx0QGVtaXQoJ2NvbXBsZXRlJywgQGVsZW1lbnQsIGV2ZW50KSBpZiBldmVudFxuXHRcdHJldHVyblxuXG5cbm1vZHVsZS5leHBvcnRzID0gRHJhZyIsIkRyYWcgPSByZXF1aXJlICcuL0RyYWcnXG5cbmNsYXNzIFNsaWRlciBleHRlbmRzIE1pd28uT2JqZWN0XG5cblx0aW5pdGlhbFN0ZXA6IDBcblx0c25hcDogZmFsc2Vcblx0b2Zmc2V0OiAwXG5cdHJhbmdlOiBmYWxzZVxuXHR3aGVlbDogZmFsc2Vcblx0c3RlcHM6IDEwMFxuXHRtb2RlOiAnaG9yaXpvbnRhbCdcblxuXHRheGlzOiBudWxsXG5cdHByb3BlcnR5OiBudWxsXG5cdG9mZnNldFByb3BlcnR5OiBudWxsXG5cdGZ1bGw6IDBcblxuXHRjb25zdHJ1Y3RvcjogKGVsZW1lbnQsIGtub2IsIGNvbmZpZykgLT5cblx0XHRzdXBlcihjb25maWcpXG5cdFx0QGVsZW1lbnQgPSBkb2N1bWVudC5pZChlbGVtZW50KVxuXHRcdEBrbm9iID0gZG9jdW1lbnQuaWQoa25vYilcblx0XHRAc3RlcCA9IGlmIEBpbml0aWFsU3RlcCB0aGVuIEBpbml0aWFsU3RlcCBlbHNlIChpZiBAcmFuZ2UgdGhlbiBAcmFuZ2VbMF0gZWxzZSAwKVxuXHRcdEBwcmV2aW91c0NoYW5nZSA9IEBwcmV2aW91c0VuZCA9IEBzdGVwXG5cblx0XHRzd2l0Y2ggQG1vZGVcblx0XHRcdHdoZW4gJ3ZlcnRpY2FsJ1xuXHRcdFx0XHRAYXhpcyA9ICd5J1xuXHRcdFx0XHRAcHJvcGVydHkgPSAndG9wJ1xuXHRcdFx0XHRAb2Zmc2V0UHJvcGVydHkgPSAnb2Zmc2V0SGVpZ2h0J1xuXHRcdFx0XHRsaW1pdHMgPSB7eDpbMCwwXSwgeTpbXX1cblx0XHRcdFx0bW9kaWZpZXJzID0ge3g6IGZhbHNlLCB5OiAndG9wJ31cblx0XHRcdHdoZW4gJ2hvcml6b250YWwnXG5cdFx0XHRcdEBheGlzID0gJ3gnXG5cdFx0XHRcdEBwcm9wZXJ0eSA9ICdsZWZ0J1xuXHRcdFx0XHRAb2Zmc2V0UHJvcGVydHkgPSAnb2Zmc2V0V2lkdGgnXG5cdFx0XHRcdGxpbWl0cyA9IHt4OltdLCB5OlswLDBdfVxuXHRcdFx0XHRtb2RpZmllcnMgPSB7eDogJ2xlZnQnLCB5OiBmYWxzZX1cblxuXHRcdEBkcmFnID0gbmV3IERyYWcgQGtub2IsXG5cdFx0XHRzbmFwOiAwXG5cdFx0XHRsaW1pdHM6IGxpbWl0c1xuXHRcdFx0bW9kaWZpZXJzOiBtb2RpZmllcnNcblx0XHRAZHJhZy5vbiAnZHJhZycsID0+XG5cdFx0XHRAZHJhZ2dlZEtub2IoKVxuXHRcdFx0cmV0dXJuXG5cdFx0QGRyYWcub24gJ3N0YXJ0JywgPT5cblx0XHRcdEBkcmFnZ2VkS25vYigpXG5cdFx0XHRyZXR1cm5cblx0XHRAZHJhZy5vbiAnYmVmb3Jlc3RhcnQnLCA9PlxuXHRcdFx0QGlzRHJhZ2dpbmcgPSB0cnVlXG5cdFx0XHRyZXR1cm5cblx0XHRAZHJhZy5vbiAnY2FuY2VsJywgPT5cblx0XHRcdEBpc0RyYWdnaW5nID0gZmFsc2Vcblx0XHRcdHJldHVyblxuXHRcdEBkcmFnLm9uICdjb21wbGV0ZScsID0+XG5cdFx0XHRAaXNEcmFnZ2luZyA9IGZhbHNlXG5cdFx0XHRAZHJhZ2dlZEtub2IoKVxuXHRcdFx0QGVuZCgpXG5cdFx0XHRyZXR1cm5cblxuXHRcdEBrbm9iLnNldFN0eWxlKEBwcm9wZXJ0eSwgLUBvZmZzZXQpXG5cdFx0QHNldFNsaWRlckRpbWVuc2lvbnMoKVxuXHRcdEBzZXRSYW5nZShAcmFuZ2UsIG51bGwsIHRydWUpXG5cdFx0QHNldFNuYXAoKSBpZiBAc25hcFxuXHRcdEBzZXRTdGVwKEBpbml0aWFsU3RlcCwgdHJ1ZSkgIGlmIEBpbml0aWFsU3RlcCBpc250IG51bGxcblx0XHRAYXR0YWNoKClcblx0XHRyZXR1cm5cblxuXG5cdG9uVGljazogKHBvc2l0aW9uKSAtPlxuXHRcdEBzZXRLbm9iUG9zaXRpb24ocG9zaXRpb24pXG5cdFx0cmV0dXJuXG5cblxuXHRhdHRhY2g6IC0+XG5cdFx0QGVsZW1lbnQub24oJ21vdXNlZG93bicsIEBib3VuZCgnY2xpY2tlZEVsZW1lbnQnKSlcblx0XHRAZWxlbWVudC5vbiggJ21vdXNld2hlZWwnLCBAYm91bmQoJ3Njcm9sbGVkRWxlbWVudCcpKSBpZiBAd2hlZWxcblx0XHRAZHJhZy5hdHRhY2goKVxuXHRcdHJldHVybiB0aGlzXG5cblxuXHRkZXRhY2g6IC0+XG5cdFx0QGVsZW1lbnQudW4oJ21vdXNlZG93bicsIEBib3VuZCgnY2xpY2tlZEVsZW1lbnQnKSlcblx0XHRAZWxlbWVudC51bignbW91c2V3aGVlbCcsIEBib3VuZCgnc2Nyb2xsZWRFbGVtZW50JykpXG5cdFx0QGRyYWcuZGV0YWNoKClcblx0XHRyZXR1cm4gdGhpc1xuXG5cblx0dXBkYXRlU2l6ZTogLT5cblx0XHRAc2V0U2xpZGVyRGltZW5zaW9ucygpXG5cdFx0QHNldEtub2JQb3NpdGlvbihAdG9Qb3NpdGlvbihAc3RlcCkpXG5cdFx0QGRyYWcubGltaXRzW0BheGlzXSA9IFstQG9mZnNldCwgQGZ1bGwgLSBAb2Zmc2V0XVxuXHRcdEBzZXRTbmFwKCkgaWYgQHNuYXBcblx0XHRyZXR1cm4gdGhpc1xuXG5cblx0c2V0U25hcDogLT5cblx0XHRAZHJhZy5ncmlkW0BheGlzXSA9IE1hdGguY2VpbChAc3RlcFdpZHRoKVxuXHRcdEBkcmFnLmxpbWl0c1tAYXhpc11bMV0gPSBAZWxlbWVudFtAb2Zmc2V0UHJvcGVydHldXG5cdFx0cmV0dXJuIHRoaXNcblxuXG5cdHNldEtub2JQb3NpdGlvbjogKHBvc2l0aW9uKSAtPlxuXHRcdHBvc2l0aW9uID0gQHRvUG9zaXRpb24oQHN0ZXApIGlmIEBzbmFwXG5cdFx0QGtub2Iuc2V0U3R5bGUoQHByb3BlcnR5LCBwb3NpdGlvbilcblx0XHRyZXR1cm4gdGhpc1xuXG5cblx0c2V0U2xpZGVyRGltZW5zaW9uczogLT5cblx0XHRAZnVsbCA9IEBlbGVtZW50W0BvZmZzZXRQcm9wZXJ0eV0gLSBAa25vYltAb2Zmc2V0UHJvcGVydHldICsgQG9mZnNldCAqIDJcblx0XHRAaGFsZiA9IEBrbm9iW0BvZmZzZXRQcm9wZXJ0eV0gLyAyXG5cdFx0cmV0dXJuIHRoaXNcblxuXG5cdHNldFN0ZXA6IChzdGVwLCBzaWxlbnRseSkgLT5cblx0XHRpZiAhKEByYW5nZSA+IDAgXiBzdGVwIDwgQG1pbilcblx0XHRcdHN0ZXAgPSBAbWluXG5cdFx0aWYgIShAcmFuZ2UgPiAwIF4gc3RlcCA+IEBtYXgpXG5cdFx0XHRzdGVwID0gQG1heFxuXHRcdEBzdGVwID0gc3RlcC5yb3VuZChAbW9kdWx1cy5kZWNpbWFsTGVuZ3RoKVxuXHRcdGlmIHNpbGVudGx5XG5cdFx0XHRAY2hlY2tTdGVwKClcblx0XHRcdEBzZXRLbm9iUG9zaXRpb24oQHRvUG9zaXRpb24oQHN0ZXApKVxuXHRcdGVsc2Vcblx0XHRcdEBjaGVja1N0ZXAoKVxuXHRcdFx0QGVtaXQoJ3RpY2snLCBAdG9Qb3NpdGlvbihAc3RlcCkpXG5cdFx0XHRAZW1pdCgnbW92ZScpXG5cdFx0XHRAZW5kKClcblx0XHRyZXR1cm4gdGhpc1xuXG5cblx0c2V0UmFuZ2U6IChyYW5nZSwgcG9zLCBzaWxlbnRseSkgLT5cblx0XHRAbWluID0gaWYgcmFuZ2UgdGhlbiByYW5nZVswXSBlbHNlIDBcblx0XHRAbWF4ID0gaWYgcmFuZ2UgdGhlbiByYW5nZVsxXSBlbHNlIEBzdGVwc1xuXHRcdEByYW5nZSA9IEBtYXggLSBAbWluXG5cdFx0QHN0ZXBzID0gQHN0ZXBzIG9yIEBmdWxsXG5cdFx0QHN0ZXBTaXplID0gTWF0aC5hYnMoQHJhbmdlKSAvIEBzdGVwc1xuXHRcdEBzdGVwV2lkdGggPSBAc3RlcFNpemUgKiBAZnVsbCAvIE1hdGguYWJzKEByYW5nZSlcblx0XHRAc2V0TW9kdWx1cygpXG5cdFx0QHNldFN0ZXAoQXJyYXkucGljayhbcG9zLCBAc3RlcF0pLmxpbWl0KEBtaW4sIEBtYXgpLCBzaWxlbnRseSkgIGlmIHJhbmdlXG5cdFx0cmV0dXJuIHRoaXNcblxuXG5cdHNldE1vZHVsdXM6IC0+XG5cdFx0ZGVjaW1hbHMgPSAoKEBzdGVwU2l6ZSArICcnKS5zcGxpdCgnLicpWzFdIG9yIFtdKS5sZW5ndGhcblx0XHRtb2R1bHVzID0gMSArICcnXG5cdFx0d2hpbGUgZGVjaW1hbHMtLVxuXHRcdFx0bW9kdWx1cyArPSAnMCdcblx0XHRAbW9kdWx1cyA9XG5cdFx0XHRtdWx0aXBsaWVyOiBtb2R1bHVzLnRvSW50KDEwKVxuXHRcdFx0ZGVjaW1hbExlbmd0aDogbW9kdWx1cy5sZW5ndGggLSAxXG5cdFx0cmV0dXJuXG5cblxuXHRjbGlja2VkRWxlbWVudDogKGV2ZW50KSAtPlxuXHRcdGlmIEBpc0RyYWdnaW5nIG9yIGV2ZW50LnRhcmdldCBpcyBAa25vYiB0aGVuIHJldHVyblxuXHRcdGRpciA9IGlmIEByYW5nZSA8IDAgdGhlbiAtMSBlbHNlIDFcblx0XHRwb3NpdGlvbiA9IGV2ZW50LnBhZ2VbQGF4aXNdIC0gQGVsZW1lbnQuZ2V0UG9zaXRpb24oKVtAYXhpc10gLSBAaGFsZlxuXHRcdHBvc2l0aW9uID0gcG9zaXRpb24ubGltaXQoLUBvZmZzZXQsIEBmdWxsIC0gQG9mZnNldClcblx0XHRAc3RlcCA9IChAbWluICsgZGlyICogQHRvU3RlcChwb3NpdGlvbikpLnJvdW5kKEBtb2R1bHVzLmRlY2ltYWxMZW5ndGgpXG5cdFx0QHNldEtub2JQb3NpdGlvbihAdG9Qb3NpdGlvbihAc3RlcCkpXG5cdFx0QGNoZWNrU3RlcCgpXG5cdFx0QGVtaXQoJ3RpY2snLCBwb3NpdGlvbilcblx0XHRAZW1pdCgnbW92ZScpXG5cdFx0QGVuZCgpXG5cdFx0cmV0dXJuXG5cblxuXHRzY3JvbGxlZEVsZW1lbnQ6IChldmVudCkgLT5cblx0XHRtb2RlID0gaWYgQG1vZGUgPT0gJ2hvcml6b250YWwnIHRoZW4gZXZlbnQud2hlZWwgPCAwIGVsc2UgZXZlbnQud2hlZWwgPiAwXG5cdFx0QHNldFN0ZXAoQHN0ZXAgKyAoaWYgbW9kZSB0aGVuIC0xIGVsc2UgMSkgKiBAc3RlcFNpemUpXG5cdFx0ZXZlbnQuc3RvcCgpXG5cdFx0cmV0dXJuXG5cblxuXHRkcmFnZ2VkS25vYjogLT5cblx0XHRkaXIgPSBpZiBAcmFuZ2UgPCAwIHRoZW4gLTEgZWxzZSAxXG5cdFx0cG9zaXRpb24gPSBAZHJhZy52YWx1ZS5ub3dbQGF4aXNdXG5cdFx0cG9zaXRpb24gPSBwb3NpdGlvbi5saW1pdCgtQG9mZnNldCwgQGZ1bGwgLSBAb2Zmc2V0KVxuXHRcdEBzdGVwID0gKEBtaW4gKyBkaXIgKiBAdG9TdGVwKHBvc2l0aW9uKSkucm91bmQoQG1vZHVsdXMuZGVjaW1hbExlbmd0aClcblx0XHRAY2hlY2tTdGVwKClcblx0XHRAZW1pdCgnbW92ZScpXG5cdFx0cmV0dXJuXG5cblxuXHRjaGVja1N0ZXA6IC0+XG5cdFx0c3RlcCA9IEBzdGVwXG5cdFx0aWYgQHByZXZpb3VzQ2hhbmdlICE9IHN0ZXBcblx0XHRcdEBwcmV2aW91c0NoYW5nZSA9IHN0ZXBcblx0XHRcdEBlbWl0KCdjaGFuZ2UnLCBzdGVwKVxuXHRcdHJldHVybiB0aGlzXG5cblx0ZW5kOiAtPlxuXHRcdHN0ZXAgPSBAc3RlcFxuXHRcdGlmIEBwcmV2aW91c0VuZCAhPSBzdGVwXG5cdFx0XHRAcHJldmlvdXNFbmQgPSBzdGVwXG5cdFx0XHRAZW1pdCgnY29tcGxldGUnLCBzdGVwICsgJycpXG5cdFx0cmV0dXJuIHRoaXNcblxuXG5cdHRvU3RlcDogKHBvc2l0aW9uKSAtPlxuXHRcdHN0ZXAgPSAocG9zaXRpb24gKyBAb2Zmc2V0KSAqIEBzdGVwU2l6ZSAvIEBmdWxsICogQHN0ZXBzXG5cdFx0aWYgQHN0ZXBzXG5cdFx0XHRyZXR1cm4gKHN0ZXAgLSAoc3RlcCAqIEBtb2R1bHVzLm11bHRpcGxpZXIgJSBAc3RlcFNpemUgKiBAbW9kdWx1cy5tdWx0aXBsaWVyIC8gQG1vZHVsdXMubXVsdGlwbGllcikpLnJvdW5kKEBtb2R1bHVzLmRlY2ltYWxMZW5ndGgpXG5cdFx0ZWxzZVxuXHRcdFx0cmV0dXJuIHN0ZXBcblxuXG5cdHRvUG9zaXRpb246IChzdGVwKSAtPlxuXHRcdHJldHVybiBAZnVsbCAqIE1hdGguYWJzKEBtaW4gLSBzdGVwKSAvIEBzdGVwcyAqIEBzdGVwU2l6ZSAtIEBvZmZzZXQgb3IgMFxuXG5cbm1vZHVsZS5leHBvcnRzID0gU2xpZGVyIiwibW9kdWxlLmV4cG9ydHMgPVxuXHREcmFnOiByZXF1aXJlICcuL0RyYWcnXG5cdFNsaWRlcjogcmVxdWlyZSAnLi9TbGlkZXInIiwiY2xhc3MgRHJvcGRvd25EaXZpZGVyIGV4dGVuZHMgTWl3by5Db21wb25lbnRcblxuXHR4dHlwZTogXCJkcm9wZG93bmRpdmlkZXJcIlxuXHRlbDogJ2xpJ1xuXHRiYXNlQ2xzOiAnZHJvcGRvd24tZGl2aWRlcidcblx0Y29tcG9uZW50Q2xzOiAnZGl2aWRlcidcblxuXG5tb2R1bGUuZXhwb3J0cyA9IERyb3Bkb3duRGl2aWRlciIsImNsYXNzIERyb3Bkb3duTWFuYWdlciBleHRlbmRzIE1pd28uT2JqZWN0XG5cblx0YWN0aXZlOiBudWxsXG5cblxuXHRjb25zdHJ1Y3RvcjogLT5cblx0XHRzdXBlclxuXHRcdGRvY3VtZW50Lm9uKCdtb3VzZWRvd24nLCBAYm91bmQoJ29uQm9keUNsaWNrJykpXG5cdFx0ZG9jdW1lbnQub24oJ2tleXVwJywgQGJvdW5kKCdvbkJvZHlLZXl1cCcpKVxuXHRcdHJldHVyblxuXG5cblx0cmVnaXN0ZXI6IChjb21wb25lbnQpIC0+XG5cdFx0QG1vbihjb21wb25lbnQsICdzaG93JywgJ29uU2hvdycpXG5cdFx0QG1vbihjb21wb25lbnQsICdoaWRlJywgJ29uSGlkZScpXG5cdFx0cmV0dXJuXG5cblxuXHR1bnJlZ2lzdGVyOiAoY29tcG9uZW50KSAtPlxuXHRcdEBtdW4oY29tcG9uZW50LCAnc2hvdycsICdvblNob3cnKVxuXHRcdEBtdW4oY29tcG9uZW50LCAnaGlkZScsICdvbkhpZGUnKVxuXHRcdHJldHVyblxuXG5cblx0b25TaG93OiAoY29tcG9uZW50KSAtPlxuXHRcdEBhY3RpdmUuaGlkZSgpIGlmIEBhY3RpdmVcblx0XHRAYWN0aXZlID0gY29tcG9uZW50XG5cdFx0cmV0dXJuXG5cblxuXHRvbkhpZGU6IChjb21wb25lbnQpIC0+XG5cdFx0QGFjdGl2ZSA9IG51bGxcblx0XHRyZXR1cm5cblxuXG5cdG9uQm9keUNsaWNrOiAoZSkgLT5cblx0XHRpZiBAYWN0aXZlICYmIEBpc091dENsaWNrKGUudGFyZ2V0LCBAYWN0aXZlKVxuXHRcdFx0QGFjdGl2ZS5oaWRlKClcblx0XHRyZXR1cm5cblxuXG5cdG9uQm9keUtleXVwOiAoZSkgLT5cblx0XHRpZiBAYWN0aXZlICYmIGUua2V5IGlzICdlc2MnXG5cdFx0XHRlLnN0b3AoKVxuXHRcdFx0QGFjdGl2ZS5oaWRlKClcblx0XHRyZXR1cm5cblxuXG5cdGlzT3V0Q2xpY2s6ICh0YXJnZXQsIGFjdGl2ZSkgLT5cblx0XHRwYXJlbnQgPSB0YXJnZXRcblx0XHR3aGlsZSBwYXJlbnQgPSBwYXJlbnQuZ2V0UGFyZW50KClcblx0XHRcdGlmIHBhcmVudCBpcyBhY3RpdmUuZWwgfHwgcGFyZW50IGlzIGFjdGl2ZS50YXJnZXRcblx0XHRcdFx0cmV0dXJuIGZhbHNlXG5cdFx0cmV0dXJuIHRydWVcblxuXG5tb2R1bGUuZXhwb3J0cyA9IERyb3Bkb3duTWFuYWdlciIsImNsYXNzIERyb3Bkb3duSXRlbSBleHRlbmRzIE1pd28uQ29tcG9uZW50XG5cblx0eHR5cGU6IFwiZHJvcGRvd25pdGVtXCJcblx0ZWw6ICdsaSdcblx0YmFzZUNsczogJ2Ryb3Bkb3duLW1lbnVpdGVtJ1xuXHR0ZXh0OiBcIlwiXG5cdGRpc2FibGVkOiBmYWxzZVxuXHRoYW5kbGVyOiBudWxsXG5cdGxpbmtFbDogbnVsbFxuXHRyb2xlOiAncHJlc2VudGF0aW9uJ1xuXG5cblx0c2V0VGV4dDogKHRleHQpIC0+XG5cdFx0QHRleHQgPSB0ZXh0XG5cdFx0QGxpbmtFbC5zZXQgXCJodG1sXCIsIHRleHQgIGlmIEBsaW5rRWxcblx0XHRyZXR1cm5cblxuXG5cdHNldEhhbmRsZXI6IChoYW5kbGVyKSAtPlxuXHRcdEBoYW5kbGVyID0gaGFuZGxlclxuXHRcdHJldHVyblxuXG5cblx0ZG9SZW5kZXI6IC0+XG5cdFx0QGxpbmtFbCA9IG5ldyBFbGVtZW50IFwiYVwiLFxuXHRcdFx0aHJlZjogJyNjbGljaydcblx0XHRcdHJvbGU6ICdtZW51aXRlbSdcblx0XHRcdGh0bWw6IEB0ZXh0XG5cdFx0XHRwYXJlbnQ6IEBlbFxuXHRcdEBtb24gQGxpbmtFbCwgJ2NsaWNrJywgJ29uQ2xpY2snXG5cdFx0cmV0dXJuXG5cblxuXHRvbkNsaWNrOiAoZSkgLT5cblx0XHRlLnN0b3AoKVxuXHRcdGlmIEBkaXNhYmxlZCB0aGVuIHJldHVyblxuXHRcdEBjb250YWluZXIuaGlkZSgpXG5cdFx0QGVtaXQoJ2NsaWNrJywgdGhpcywgZSlcblx0XHRAY2xpY2soZSlcblx0XHRyZXR1cm5cblxuXG5cdGNsaWNrOiAoZSkgLT5cblx0XHRpZiBUeXBlLmlzRnVuY3Rpb24oQGhhbmRsZXIpXG5cdFx0XHRAaGFuZGxlcih0aGlzLCBlKVxuXHRcdGVsc2UgaWYgVHlwZS5pc1N0cmluZyhAaGFuZGxlcilcblx0XHRcdGlmIEBoYW5kbGVyLmluZGV4T2YoJyMnKSBpcyAwXG5cdFx0XHRcdGRvY3VtZW50LmxvY2F0aW9uLmhhc2ggPSBAaGFuZGxlclxuXHRcdFx0ZWxzZVxuXHRcdFx0XHRkb2N1bWVudC5sb2NhdGlvbiA9IEBoYW5kbGVyXG5cdFx0cmV0dXJuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBEcm9wZG93bkl0ZW0iLCJJdGVtID0gcmVxdWlyZSAnLi9JdGVtJ1xuRGl2aWRlciA9IHJlcXVpcmUgJy4vRGl2aWRlcidcblxuXG5jbGFzcyBEcm9wZG93bkxpc3QgZXh0ZW5kcyBNaXdvLkNvbnRhaW5lclxuXG5cdHh0eXBlOiBcImRyb3Bkb3dubGlzdFwiXG5cdGVsOiBcInVsXCJcblx0YmFzZUNsczogXCJkcm9wZG93bi1tZW51XCJcblx0dGFyZ2V0OiBudWxsXG5cdHZpc2libGU6IGZhbHNlXG5cdHJvbGU6ICdtZW51J1xuXHR6SW5kZXhNYW5hZ2U6IHRydWVcblxuXG5cdGFmdGVySW5pdDogLT5cblx0XHRzdXBlclxuXHRcdG1pd28uZHJvcGRvd25NZ3IucmVnaXN0ZXIodGhpcylcblx0XHRAcmVuZGVyVG8gPSBtaXdvLmJvZHlcblx0XHRyZXR1cm5cblxuXG5cdGFkZEl0ZW06IChuYW1lLCBjb25maWcpIC0+XG5cdFx0cmV0dXJuIEBhZGQobmFtZSwgbmV3IEl0ZW0oY29uZmlnKSlcblxuXG5cdGFkZERpdmlkZXI6IC0+XG5cdFx0cmV0dXJuIEBhZGQobmV3IERpdmlkZXIoKSlcblxuXG5cdGRvU2hvdzogLT5cblx0XHRzdXBlclxuXHRcdHBvcyA9IEB0YXJnZXQuZ2V0UG9zaXRpb24oKVxuXHRcdHBvcy55ICs9IEB0YXJnZXQuZ2V0U2l6ZSgpLnktM1xuXHRcdEBzZXRQb3NpdGlvbihwb3MpXG5cdFx0QHRvRnJvbnQoKVxuXHRcdHJldHVyblxuXG5cblx0dG9nZ2xlOiAtPlxuXHRcdGlmIEB2aXNpYmxlIHRoZW4gQGhpZGUoKSBlbHNlIEBzaG93KClcblx0XHRyZXR1cm5cblxuXG5cdGRvSGlkZTogLT5cblx0XHRzdXBlclxuXHRcdEByZXNldFJlbmRlcmVkKHRydWUpXG5cdFx0QHRvQmFjaygpXG5cdFx0cmV0dXJuXG5cblxuXHRkb0Rlc3Ryb3k6IC0+XG5cdFx0bWl3by5kcm9wZG93bk1nci51bnJlZ2lzdGVyKHRoaXMpXG5cdFx0c3VwZXJcblxuXG5tb2R1bGUuZXhwb3J0cyA9IERyb3Bkb3duTGlzdCIsIm1vZHVsZS5leHBvcnRzID1cblxuXHREaXZpZGVyOiByZXF1aXJlICcuL0RpdmlkZXInXG5cdEl0ZW06IHJlcXVpcmUgJy4vSXRlbSdcblx0TGlzdDogcmVxdWlyZSAnLi9MaXN0JyIsIlZhbGlkYXRvcnMgPSByZXF1aXJlICcuL1ZhbGlkYXRvcnMnXG5cblxuY2xhc3MgUnVsZVxuXG5cdCMgQHByb3BlcnR5IHtib29sZWFufVxuXHRpc1J1bGU6IHRydWVcblxuXHQjIEBwcm9wZXJ0eSB7TWl3by5mb3JtLlJ1bGVzfSBwYXJlbnQgcnVsZXNcblx0cnVsZXM6IG51bGxcblxuXHQjIEBwcm9wZXJ0eSB7TWl3by5mb3JtLmNvbnRyb2wuQmFzZUNvbnRyb2x9XG5cdGNvbnRyb2w6IG51bGxcblxuXHQjIEBwcm9wZXJ0eSB7c3RyaW5nfSBuYW1lIG9mIHJ1bGVcblx0bmFtZTogbnVsbFxuXG5cdCMgQHByb3BlcnR5IHtzdHJpbmd8ZnVuY3Rpb259XG5cdG9wZXJhdGlvbjogbnVsbFxuXG5cdCMgQHByb3BlcnR5IHtib29sZWFufVxuXHRpc05lZ2F0aXZlOiBmYWxzZVxuXG5cdCMgQHByb3BlcnR5IHttaXhlZH1cblx0cGFyYW06IG51bGxcblxuXHQjIEBwcm9wZXJ0eSB7c3RyaW5nfVxuXHRtZXNzYWdlOiBudWxsXG5cblxuXHRjb25zdHJ1Y3RvcjogKEBydWxlcywgY29uZmlnID0ge30pIC0+XG5cdFx0QGNvbnRyb2wgPSBAcnVsZXMuY29udHJvbFxuXHRcdGZvciBuLHYgb2YgY29uZmlnIHRoZW4gdGhpc1tuXSA9IHZcblxuXHRcdGlmICFAbWVzc2FnZVxuXHRcdFx0aWYgVHlwZS5pc1N0cmluZyhAb3BlcmF0aW9uKVxuXHRcdFx0XHRAbWVzc2FnZSA9IG1pd28udHIoXCJtaXdvLnJ1bGVzLlwiICsgQG9wZXJhdGlvbikgfHwgXCJFcnJvclwiXG5cdFx0XHRlbHNlXG5cdFx0XHRcdEBtZXNzYWdlID0gXCJcIlxuXG5cdFx0aWYgVHlwZS5pc1N0cmluZyhAb3BlcmF0aW9uKVxuXHRcdFx0aWYgQG9wZXJhdGlvblswXSBpcyBcIiFcIlxuXHRcdFx0XHRAaXNOZWdhdGl2ZSA9IHRydWVcblx0XHRcdFx0QG9wZXJhdGlvbiA9IEBvcGVyYXRpb24ucmVwbGFjZShcIiFcIiwgXCJcIilcblx0XHRcdEBuYW1lID0gQG9wZXJhdGlvblxuXHRcdFx0aWYgIVZhbGlkYXRvcnNbQG9wZXJhdGlvbl1cblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5kZWZpbmVkIHZhbGlkYXRvciAnXCIgKyBAb3BlcmF0aW9uICsgXCInIGZvciBjb250cm9sICdcIiArIEBjb250cm9sLm5hbWUgKyBcIidcIilcblx0XHRcdEBvcGVyYXRpb24gPSAoY29udHJvbCwgcGFyYW0pID0+IFZhbGlkYXRvcnNbQG5hbWVdKGNvbnRyb2wsIHBhcmFtKVxuXHRcdGVsc2Vcblx0XHRcdEBuYW1lID0gXCJjYWxsYmFja1wiXG5cblx0XHRpZiAhVHlwZS5pc0Z1Y250aW9uKEBvcGVyYXRpb24pXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIG9wZXJhdGlvbiAnXCIgKyBAb3BlcmF0aW9uICsgXCInIGZvciBjb250cm9sICdcIiArIEBjb250cm9sLm5hbWUgKyBcIidcIilcblx0XHRyZXR1cm5cblxuXG5cdHZhbGlkYXRlOiAtPlxuXHRcdGlmICFAY29udHJvbC5yZXF1aXJlZCAmJiAhQGNvbnRyb2wuaXNGaWxsZWQoKSB0aGVuIHJldHVybiB0cnVlXG5cdFx0cmVzdWx0ID0gQG9wZXJhdGlvbihAY29udHJvbCwgQHBhcmFtKVxuXHRcdHJldHVybiAoaWYgQGlzTmVnYXRpdmUgdGhlbiAhcmVzdWx0IGVsc2UgcmVzdWx0KVxuXG5cblx0Z2V0Q29udHJvbDogLT5cblx0XHRyZXR1cm4gQGNvbnRyb2xcblxuXG5cblxuY2xhc3MgQ29uZGl0aW9uIGV4dGVuZHMgUnVsZVxuXG5cdCMgQHByb3BlcnR5IHtib29sZWFufVxuXHRpc0NvbmRpdGlvbjogdHJ1ZVxuXG5cdCMgQHByb3BlcnR5IHtSdWxlc31cblx0c3ViUnVsZXM6IG51bGxcblxuXG5cdGNvbnN0cnVjdG9yOiAocnVsZXMsIGNvbmZpZykgLT5cblx0XHRzdXBlcihydWxlcywgY29uZmlnKVxuXHRcdEBzdWJSdWxlcyA9IG5ldyBSdWxlcyhAY29udHJvbCwgcnVsZXMpXG5cdFx0cmV0dXJuXG5cblxuXG5cbmNsYXNzIFJ1bGVzXG5cblx0QGZvcm1hdE1lc3NhZ2U6IChydWxlKSAtPlxuXHRcdG1lc3NhZ2UgPSBydWxlLm1lc3NhZ2VcblxuXHRcdCMgcmVwbGFjZSBtYWNyb3Ncblx0XHRtZXNzYWdlID0gbWVzc2FnZS5yZXBsYWNlKFwiJW5hbWVcIiwgcnVsZS5jb250cm9sLmdldE5hbWUoKSlcblx0XHRtZXNzYWdlID0gbWVzc2FnZS5yZXBsYWNlKFwiJWxhYmVsXCIsIHJ1bGUuY29udHJvbC5sYWJlbClcblx0XHRtZXNzYWdlID0gbWVzc2FnZS5yZXBsYWNlKFwiJXZhbHVlXCIsIHJ1bGUuY29udHJvbC5nZXRWYWx1ZSgpKVxuXG5cdFx0IyByZXBsYWNlIHBhcmFtc1xuXHRcdHBhcmFtcyA9IHtwYXJhbTogcnVsZS5wYXJhbX1cblx0XHRpZiBUeXBlLmlzQXJyYXkocnVsZS5wYXJhbSlcblx0XHRcdHBhcmFtc1sncGFyYW0nK2ldID0gdmFsdWUgIGZvciB2YWx1ZSxpIGluIHJ1bGUucGFyYW1cblx0XHRtZXNzYWdlID0gbWVzc2FnZS5zdWJzdGl0dXRlKHBhcmFtcylcblx0XHRyZXR1cm4gbWVzc2FnZVxuXG5cblx0cGFyZW50OiBudWxsXG5cdGNvbnRyb2w6IG51bGxcblx0cnVsZXM6IG51bGxcblx0Y29uZGl0aW9uOiBudWxsXG5cblxuXHRjb25zdHJ1Y3RvcjogKGNvbnRyb2wsIEBwYXJlbnQpIC0+XG5cdFx0QGNvbnRyb2wgPSBjb250cm9sXG5cdFx0QHJ1bGVzID0gW11cblxuXG5cdHNldFJ1bGVzOiAocnVsZXMpIC0+XG5cdFx0QHJ1bGVzID0gW11cblx0XHRAYWRkUnVsZXMocnVsZXMpXG5cdFx0cmV0dXJuXG5cblxuXHRhZGRSdWxlczogKHJ1bGVzKSAtPlxuXHRcdGZvciBydWxlIGluIHJ1bGVzXG5cdFx0XHRpZiBydWxlLnR5cGUgaXMgXCJjb25kaXRpb25cIlxuXHRcdFx0XHRzdWJSdWxlcyA9IEBhZGRDb25kaXRpb25PbihydWxlLmNvbmRpdGlvbk9uIG9yIHRoaXMsIHJ1bGUub3BlcmF0aW9uLCBydWxlLnBhcmFtKVxuXHRcdFx0XHRzdWJSdWxlcy5zZXRSdWxlcyhydWxlLnJ1bGVzKSAgaWYgcnVsZS5ydWxlc1xuXHRcdFx0XHRpZiBydWxlLmVsc2VSdWxlc1xuXHRcdFx0XHRcdGVsc2VSdWxlcyA9IEBlbHNlQ29uZGl0aW9uKClcblx0XHRcdFx0XHRlbHNlUnVsZXMuc2V0UnVsZXMocnVsZS5lbHNlUnVsZXMpXG5cdFx0XHRlbHNlXG5cdFx0XHRcdEBhZGRSdWxlKHJ1bGUub3BlcmF0aW9uLCBydWxlLm1lc3NhZ2UsIHJ1bGUucGFyYW0pXG5cdFx0cmV0dXJuXG5cblxuXHRhZGRSdWxlOiAob3BlcmF0aW9uLCBtZXNzYWdlLCBwYXJhbSkgLT5cblx0XHRydWxlID0gbmV3IFJ1bGUgdGhpcyxcblx0XHRcdG9wZXJhdGlvbjogb3BlcmF0aW9uXG5cdFx0XHRtZXNzYWdlOiBtZXNzYWdlXG5cdFx0XHRwYXJhbTogcGFyYW1cblx0XHRAcnVsZXMucHVzaChydWxlKVxuXHRcdHJldHVybiB0aGlzXG5cblxuXHRoYXNSdWxlOiAobmFtZSkgLT5cblx0XHRyZXR1cm4gISFAcnVsZXMuc29tZSgocnVsZSkgLT4gcnVsZS5uYW1lIGlzIG5hbWUpXG5cblxuXHRhZGRDb25kaXRpb246IChvcGVyYXRpb24sIHBhcmFtKSAtPlxuXHRcdHJldHVybiBAYWRkQ29uZGl0aW9uT24oQGNvbnRyb2wsIG9wZXJhdGlvbiwgcGFyYW0pXG5cblxuXHRhZGRDb25kaXRpb25PbjogKGNvbnRyb2wsIG9wZXJhdGlvbiwgcGFyYW0pIC0+XG5cdFx0cnVsZSA9IG5ldyBDb25kaXRpb24gdGhpcyxcblx0XHRcdG9wZXJhdGlvbjogb3BlcmF0aW9uXG5cdFx0XHRwYXJhbTogcGFyYW1cblx0XHRAY29uZGl0aW9uID0gcnVsZVxuXHRcdEBydWxlcy5wdXNoKHJ1bGUpXG5cdFx0cmV0dXJuIHJ1bGUuc3ViUnVsZXNcblxuXG5cdGVsc2VDb25kaXRpb246IC0+XG5cdFx0cnVsZSA9IG5ldyBDb25kaXRpb24gdGhpcyxcblx0XHRcdG9wZXJhdGlvbjogQGNvbmRpdGlvbi5vcGVyYXRpb25cblx0XHRcdGlzTmVnYXRpdmU6ICFAY29uZGl0aW9uLmlzTmVnYXRpdmVcblx0XHRcdHBhcmFtOiBAY29uZGl0aW9uLnBhcmFtXG5cdFx0QHJ1bGVzLnB1c2gocnVsZSlcblx0XHRyZXR1cm4gcnVsZS5zdWJSdWxlc1xuXG5cblx0ZW5kQ29uZGl0aW9uOiAtPlxuXHRcdHJldHVybiBAcGFyZW50XG5cblxuXHR2YWxpZGF0ZTogLT5cblx0XHRlcnJvcnMgPSBbXVxuXHRcdGZvciBydWxlIGluIEBydWxlc1xuXHRcdFx0aWYgcnVsZS5nZXRDb250cm9sKCkuaXNEaXNhYmxlZCgpXG5cdFx0XHRcdGNvbnRpbnVlXG5cdFx0XHRzdWNjZXNzID0gcnVsZS52YWxpZGF0ZSgpXG5cdFx0XHRpZiBydWxlLmlzQ29uZGl0aW9uIGFuZCBzdWNjZXNzXG5cdFx0XHRcdGVycm9ycy5hcHBlbmQocnVsZS5zdWJSdWxlcy52YWxpZGF0ZSgpKVxuXHRcdFx0ZWxzZSBpZiBydWxlLmlzUnVsZSBhbmQgIXN1Y2Nlc3Ncblx0XHRcdFx0ZXJyb3JzLnB1c2goUnVsZXMuZm9ybWF0TWVzc2FnZShydWxlKSlcblx0XHRyZXR1cm4gZXJyb3JzXG5cblxubW9kdWxlLmV4cG9ydHMgPSBSdWxlcyIsIlZhbGlkYXRvcnMgPVxuXG5cdGVtYWlsUmU6IC9eKChbXjw+KClbXFxdXFxcXC4sOzpcXHNAXFxcIl0rKFxcLltePD4oKVtcXF1cXFxcLiw7Olxcc0BcXFwiXSspKil8KFxcXCIuK1xcXCIpKUAoKFxcW1swLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXF0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvXG5cdHVybFJlOiAvXihmdHB8aHR0cHxodHRwcyk/OlxcL1xcL1tBLVphLXowLTlcXC4tXXsxLH1cXC5bQS1aYS16XXsyfS9cblx0aW50UmU6IC9eXFxkKyQvXG5cdGNvbG9yUmU6IC9eXFwjW2EtejAtOUEtWl17Nn0vXG5cdGRhdGVSZTogL15bMC05XXs0fS1bMC05XXsyfS1bMC05XXsyfSQvXG5cdG51bWJlclJlOiAvXi17MCwxfVxcZCpcXC57MCwxfVxcZCskL1xuXG5cblx0cmVnaXN0ZXJWYWxpZGF0b3I6IChuYW1lLCB2YWxpZGF0b3IpIC0+XG5cdFx0dGhpc1tuYW1lXSA9IHZhbGlkYXRvclxuXHRcdHJldHVyblxuXG5cblx0ZXF1YWw6IChjb250cm9sLCBhcmcpIC0+XG5cdFx0YXJnID0gY29udHJvbC5nZXRGb3JtKCkuZ2V0RmllbGQoYXJnKSAgaWYgVHlwZS5pc1N0cmluZyhhcmcpXG5cdFx0cmV0dXJuIGNvbnRyb2wuZ2V0U3RyaW5nVmFsdWUoKSBpcyBhcmcuZ2V0U3RyaW5nVmFsdWUoKVxuXG5cblx0ZmlsbGVkOiAoY29udHJvbCkgLT5cblx0XHRyZXR1cm4gY29udHJvbC5pc0ZpbGxlZCgpXG5cblxuXHR2YWxpZDogKGNvbnRyb2wpIC0+XG5cdFx0cmV0dXJuIGNvbnRyb2wucnVsZXMudmFsaWRhdGUodHJ1ZSlcblxuXG5cdG1pbkxlbmd0aDogKGNvbnRyb2wsIGxlbmd0aCkgLT5cblx0XHRyZXR1cm4gY29udHJvbC5nZXRTdHJpbmdWYWx1ZSgpLmxlbmd0aCA+PSBsZW5ndGhcblxuXG5cdG1heExlbmd0aDogKGNvbnRyb2wsIGxlbmd0aCkgLT5cblx0XHRyZXR1cm4gY29udHJvbC5nZXRTdHJpbmdWYWx1ZSgpLmxlbmd0aCA8PSBsZW5ndGhcblxuXG5cdGxlbmd0aDogKGNvbnRyb2wsIHJhbmdlKSAtPlxuXHRcdHJhbmdlID0gW3JhbmdlLCByYW5nZV0gaWYgIVR5cGUuaXNBcnJheShyYW5nZSlcblx0XHRsZW4gPSBjb250cm9sLmdldFN0cmluZ1ZhbHVlKCkubGVuZ3RoXG5cdFx0cmV0dXJuIGxlbiA+PSByYW5nZVswXSBhbmQgbGVuIDw9IHJhbmdlWzFdXG5cblxuXHRkYXRlOiAoY29udHJvbCkgLT5cblx0XHRyZXR1cm4gQGRhdGVSZS50ZXN0KGNvbnRyb2wuZ2V0U3RyaW5nVmFsdWUoKSlcblxuXG5cdGVtYWlsOiAoY29udHJvbCkgLT5cblx0XHRyZXR1cm4gQGVtYWlsUmUudGVzdChjb250cm9sLmdldFN0cmluZ1ZhbHVlKCkpXG5cblxuXHR1cmw6IChjb250cm9sKSAtPlxuXHRcdHJldHVybiBAdXJsUmUudGVzdChjb250cm9sLmdldFN0cmluZ1ZhbHVlKCkpXG5cblxuXHRwYXR0ZXJuOiAoY29udHJvbCwgcGF0dGVybikgLT5cblx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KGNvbnRyb2wuZ2V0U3RyaW5nVmFsdWUoKSlcblxuXG5cdG51bWJlcjogKGNvbnRyb2wpIC0+XG5cdFx0cmV0dXJuIEBudW1iZXJSZS50ZXN0KGNvbnRyb2wuZ2V0U3RyaW5nVmFsdWUoKSlcblxuXG5cdGludGVnZXI6IChjb250cm9sKSAtPlxuXHRcdHJldHVybiBAaW50UmUudGVzdChjb250cm9sLmdldFN0cmluZ1ZhbHVlKCkpXG5cblxuXHRmbG9hdDogKGNvbnRyb2wpIC0+XG5cdFx0cmV0dXJuIEBudW1iZXJSZS50ZXN0KGNvbnRyb2wuZ2V0U3RyaW5nVmFsdWUoKSlcblxuXG5cdHJhbmdlOiAoY29udHJvbCwgcmFuZ2UpIC0+XG5cdFx0cmFuZ2UgPSBbcmFuZ2UsIHJhbmdlXSAgaWYgIVR5cGUuaXNBcnJheShyYW5nZSlcblx0XHRyZXR1cm4gY29udHJvbC5nZXRWYWx1ZSgpID49IHJhbmdlWzBdIGFuZCBjb250cm9sLmdldFZhbHVlKCkgPD0gcmFuZ2VbMV1cblxuXG5cdG1pbjogKGNvbnRyb2wsIGxlbmd0aCkgLT5cblx0XHRyZXR1cm4gY29udHJvbC5nZXRWYWx1ZSgpID49IGxlbmd0aFxuXG5cblx0bWF4OiAoY29udHJvbCwgbGVuZ3RoKSAtPlxuXHRcdHJldHVybiBjb250cm9sLmdldFZhbHVlKCkgPD0gbGVuZ3RoXG5cblxuXHRjb2xvcjogKGNvbnRyb2wpIC0+XG5cdFx0cmV0dXJuIEBjb2xvclJlLnRlc3QoY29udHJvbC5nZXRTdHJpbmdWYWx1ZSgpKVxuXG5cbm1vZHVsZS5leHBvcnRzID0gVmFsaWRhdG9yc1xuIiwiY2xhc3MgQmFzZUNvbnRhaW5lciBleHRlbmRzIE1pd28uQ29udGFpbmVyXG5cblx0Zm9ybTogbnVsbFxuXHRub3RpZnlFcnJvcnM6IHRydWVcblx0aXNGb3JtQ29udGFpbmVyOiB0cnVlXG5cdGRpc2FibGVkOiBmYWxzZVxuXHRyZWFkb25seTogZmFsc2Vcblx0d2FzRGlydHk6IGZhbHNlXG5cdHdhc1ZhbGlkOiB0cnVlXG5cdGNvbnRyb2xzOiBudWxsXG5cdGxheW91dDogJ2Zvcm0nXG5cblxuXHRAcmVnaXN0ZXJDb250cm9sOiAoY29udHJvbE5hbWUsIGZuKSAtPlxuXHRcdGlmICFmbiB0aGVuIHRocm93IG5ldyBFcnJvcihcIkVycm9yIGluIHJlZ2lzdHJ5IGNvbnRyb2wgI3tjb250cm9sTmFtZX0sIGNvbnN0cnVjdG9yIGlzIHVuZGVmaW5lZFwiKVxuXHRcdGFkZE1ldGhvZCA9ICdhZGQnK2NvbnRyb2xOYW1lLmNhcGl0YWxpemUoKVxuXHRcdEBwcm90b3R5cGVbYWRkTWV0aG9kXSA9IChuYW1lLCBjb25maWcgPSB7fSkgLT5cblx0XHRcdHJldHVybiBAYWRkKG5hbWUsIG5ldyBmbihjb25maWcpKVxuXHRcdHJldHVyblxuXG5cblx0YmVmb3JlSW5pdDogLT5cblx0XHRzdXBlcigpXG5cdFx0QGNvbnRyb2xzID0gW11cblx0XHRyZXR1cm5cblxuXG5cdGFkZGVkQ29tcG9uZW50OiAoY29tcG9uZW50KSAtPlxuXHRcdHN1cGVyKGNvbXBvbmVudClcblx0XHRpZiBjb21wb25lbnQuaXNGb3JtQ29udHJvbFxuXHRcdFx0Y29tcG9uZW50LmZvcm0gPSB0aGlzLmZvcm1cblx0XHRcdEBjb250cm9scy5wdXNoKGNvbXBvbmVudClcblx0XHRcdEBtb24gY29tcG9uZW50LCAndmFsaWRpdHljaGFuZ2UnLCAnY2hlY2tWYWxpZGl0eSdcblx0XHRcdEBtb24gY29tcG9uZW50LCAnZGlydHljaGFuZ2UnLCAnY2hlY2tEaXJ0eSdcblx0XHRcdEBtb24gY29tcG9uZW50LCAnZm9jdXMnLCAnb25JbnB1dEZpZWxkRm9jdXMnXG5cdFx0ZWxzZSBpZiBjb21wb25lbnQuaXNGb3JtQ29udGFpbmVyXG5cdFx0XHRjb21wb25lbnQuZm9ybSA9IHRoaXMuZm9ybVxuXHRcdFx0QG1vbiBjb21wb25lbnQsICdpbnB1dGZvY3VzJywgJ29uSW5wdXRGaWVsZEZvY3VzJ1xuXHRcdGlmIEBkaXNhYmxlZFxuXHRcdFx0Y29tcG9uZW50LnNldERpc2FibGVkKEBkaXNhYmxlZClcblx0XHRpZiBAcmVhZG9ubHlcblx0XHRcdGNvbXBvbmVudC5zZXRSZWFkb25seShAcmVhZG9ubHkpXG5cdFx0cmV0dXJuXG5cblxuXHRyZW1vdmVkQ29tcG9uZW50OiAoY29tcG9uZW50KSAtPlxuXHRcdHN1cGVyKGNvbXBvbmVudClcblx0XHRpZiBjb21wb25lbnQuaXNGb3JtQ29udHJvbFxuXHRcdFx0Y29tcG9uZW50LmZvcm0gPSBudWxsXG5cdFx0XHRAY29udHJvbHMuZXJhc2UoY29tcG9uZW50KVxuXHRcdFx0QG11bihjb21wb25lbnQpXG5cdFx0ZWxzZSBpZiBjb21wb25lbnQuaXNGb3JtQ29udGFpbmVyXG5cdFx0XHRjb21wb25lbnQuZm9ybSA9IG51bGxcblx0XHRcdEBtdW4oY29tcG9uZW50KVxuXHRcdHJldHVyblxuXG5cblx0c2V0RGlzYWJsZWQ6IChkaXNhYmxlZCkgLT5cblx0XHRAZGlzYWJsZWQgPSBkaXNhYmxlZFxuXHRcdEBnZXRDb21wb25lbnRzKCkuZWFjaCAoY29tcG9uZW50KSAtPlxuXHRcdFx0aWYgY29tcG9uZW50LnNldERpc2FibGVkXG5cdFx0XHRcdGNvbXBvbmVudC5zZXREaXNhYmxlZChkaXNhYmxlZClcblx0XHRcdHJldHVyblxuXHRcdHJldHVyblxuXG5cblx0c2V0UmVhZG9ubHk6IChyZWFkb25seSkgLT5cblx0XHRAcmVhZG9ubHkgPSByZWFkb25seVxuXHRcdEBnZXRDb21wb25lbnRzKCkuZWFjaCAoY29tcG9uZW50KSAtPlxuXHRcdFx0aWYgY29tcG9uZW50LnNldFJlYWRvbmx5XG5cdFx0XHRcdGNvbXBvbmVudC5zZXRSZWFkb25seShyZWFkb25seSlcblx0XHRcdHJldHVyblxuXHRcdHJldHVyblxuXG5cblx0Z2V0Q29udHJvbHM6IC0+XG5cdFx0cmV0dXJuIEBjb250cm9sc1xuXG5cblx0Z2V0Q29udHJvbDogKG5hbWUpIC0+XG5cdFx0Zm9yIGNvbnRyb2wgaW4gQGNvbnRyb2xzXG5cdFx0XHRpZiBjb250cm9sLm5hbWUgaXMgbmFtZVxuXHRcdFx0XHRyZXR1cm4gY29udHJvbFxuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvbnRyb2wgI3tuYW1lfSBub3QgZm91bmRcIilcblx0XHRyZXR1cm5cblxuXG5cdGdldEZvY3VzQ29udHJvbDogLT5cblx0XHRmb3IgY29udHJvbCBpbiBAY29udHJvbHNcblx0XHRcdGlmICFjb250cm9sLmRpc2FibGVkXG5cdFx0XHRcdHJldHVybiBjb250cm9sXG5cdFx0cmV0dXJuIG51bGxcblxuXG5cdG9uSW5wdXRGaWVsZEZvY3VzOiAoZm9ybSwgaW5wdXQpIC0+XG5cdFx0QGVtaXQoXCJpbnB1dGZvY3VzXCIsIHRoaXMsIGlucHV0fHxmb3JtKVxuXHRcdHJldHVyblxuXG5cblx0Z2V0VmFsdWVzOiAoZGlydHlPbmx5LCBzdWJtaXR0YWJsZSkgLT5cblx0XHR2YWx1ZXMgPSB7fVxuXHRcdGZvciBjb250cm9sIGluIEBjb250cm9sc1xuXHRcdFx0aWYgKCFzdWJtaXR0YWJsZSBvciBjb250cm9sLnN1Ym1pdFZhbHVlKSBhbmQgIWNvbnRyb2wuZGlzYWJsZWRcblx0XHRcdFx0aWYgIWRpcnR5T25seSBvciBjb250cm9sLmlzRGlydHkoKVxuXHRcdFx0XHRcdHZhbHVlc1tjb250cm9sLmdldE5hbWUoKV0gPSBjb250cm9sLmdldFZhbHVlKClcblx0XHRyZXR1cm4gdmFsdWVzXG5cblxuXHRnZXRSYXdWYWx1ZXM6IChkaXJ0eU9ubHksIHN1Ym1pdHRhYmxlKSAtPlxuXHRcdHZhbHVlcyA9IHt9XG5cdFx0Zm9yIGNvbnRyb2wgaW4gQGNvbnRyb2xzXG5cdFx0XHRpZiAoIXN1Ym1pdHRhYmxlIG9yIGNvbnRyb2wuc3VibWl0VmFsdWUpIGFuZCBub3QgY29udHJvbC5kaXNhYmxlZFxuXHRcdFx0XHRpZiAhZGlydHlPbmx5IG9yIGNvbnRyb2wuaXNEaXJ0eSgpXG5cdFx0XHRcdFx0dmFsdWVzW2NvbnRyb2wuZ2V0TmFtZSgpXSA9IGNvbnRyb2wuZ2V0UmF3VmFsdWUoKVxuXHRcdHJldHVybiB2YWx1ZXNcblxuXG5cdGdldE9yaWdpbmFsVmFsdWVzOiAtPlxuXHRcdHZhbHVlcyA9IHt9XG5cdFx0Zm9yIGNvbnRyb2wgaW4gQGNvbnRyb2xzXG5cdFx0XHR2YWx1ZXNbY29udHJvbC5nZXROYW1lKCldID0gY29udHJvbC5nZXRSYXdWYWx1ZSgpXG5cdFx0cmV0dXJuIHZhbHVlc1xuXG5cblx0Z2V0RXJyb3JzOiAtPlxuXHRcdGVycm9ycyA9IFtdXG5cdFx0Zm9yIGNvbnRyb2wgaW4gQGNvbnRyb2xzXG5cdFx0XHRlcnJvcnMuYXBwZW5kKGNvbnRyb2wuZ2V0RXJyb3JzKCkpXG5cdFx0cmV0dXJuIGVycm9yc1xuXG5cblx0c2V0VmFsdWVzOiAodmFsdWVzLCBlcmFzZSwgc2V0T3JpZ2luYWxzKSAtPlxuXHRcdGZvciBjb250cm9sIGluIEBjb250cm9sc1xuXHRcdFx0bmFtZSA9IGNvbnRyb2wuZ2V0TmFtZSgpXG5cdFx0XHRpZiB2YWx1ZXMuaGFzT3duUHJvcGVydHkobmFtZSlcblx0XHRcdFx0Y29udHJvbC5zZXRWYWx1ZSh2YWx1ZXNbbmFtZV0pXG5cdFx0XHRcdGNvbnRyb2wuc2V0T3JpZ2luYWxWYWx1ZSh2YWx1ZXNbbmFtZV0pIGlmIHNldE9yaWdpbmFsc1xuXHRcdFx0ZWxzZSBpZiBlcmFzZVxuXHRcdFx0XHRjb250cm9sLnNldFZhbHVlKG51bGwpXG5cdFx0XHRcdGNvbnRyb2wuc2V0T3JpZ2luYWxWYWx1ZShudWxsKSBpZiBzZXRPcmlnaW5hbHNcblx0XHRyZXR1cm5cblxuXG5cdHNldE9yaWdpbmFsczogKHZhbHVlcywgZXJhc2UpIC0+XG5cdFx0aWYgIXZhbHVlc1xuXHRcdFx0dmFsdWVzID0gQGdldFZhbHVlcygpXG5cdFx0Zm9yIGNvbnRyb2wgaW4gQGNvbnRyb2xzXG5cdFx0XHRuYW1lID0gY29udHJvbC5nZXROYW1lKClcblx0XHRcdGlmIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKVxuXHRcdFx0XHRjb250cm9sLnNldE9yaWdpbmFsVmFsdWUodmFsdWVzW25hbWVdKVxuXHRcdFx0ZWxzZSBpZiBlcmFzZVxuXHRcdFx0XHRjb250cm9sLnNldE9yaWdpbmFsVmFsdWUobnVsbClcblx0XHRyZXR1cm5cblxuXG5cdHJlc2V0T3JpZ2luYWxzOiAtPlxuXHRcdGZvciBjb250cm9sIGluIEBjb250cm9sc1xuXHRcdFx0Y29udHJvbC5yZXNldE9yaWdpbmFsVmFsdWUoKVxuXHRcdHJldHVyblxuXG5cblx0c2V0RGVmYXVsdHM6ICh2YWx1ZXMsIG9ubHlTZXQpIC0+XG5cdFx0Zm9yIGNvbnRyb2wgaW4gQGNvbnRyb2xzXG5cdFx0XHRuYW1lID0gY29udHJvbC5nZXROYW1lKClcblx0XHRcdGlmIHZhbHVlc1xuXHRcdFx0XHRpZiB2YWx1ZXMuaGFzT3duUHJvcGVydHkobmFtZSlcblx0XHRcdFx0XHRjb250cm9sLnNldERlZmF1bHRWYWx1ZSh2YWx1ZXNbbmFtZV0pXG5cdFx0XHRcdGVsc2UgaWYgIW9ubHlTZXRcblx0XHRcdFx0XHRjb250cm9sLnNldERlZmF1bHRWYWx1ZSgpXG5cdFx0XHRlbHNlXG5cdFx0XHRcdGNvbnRyb2wuc2V0RGVmYXVsdFZhbHVlKClcblx0XHRyZXR1cm5cblxuXG5cdHJlc2V0OiAocmVzZXRPcmlnaW5hbFZhbHVlcykgLT5cblx0XHRpZiByZXNldE9yaWdpbmFsVmFsdWVzXG5cdFx0XHRAc2V0T3JpZ2luYWxzKHt9LCB0cnVlKVxuXHRcdGZvciBjb250cm9sIGluIEBjb250cm9sc1xuXHRcdFx0Y29udHJvbC5yZXNldCgpXG5cdFx0cmV0dXJuXG5cblxuXHQjIyNcbiAgICBcdFJldHVybnMgdHJ1ZSBpZiBjbGllbnQtc2lkZSB2YWxpZGF0aW9uIG9uIHRoZSBmb3JtIGlzIHN1Y2Nlc3NmdWwuIEFueSBpbnZhbGlkIGNvbnRyb2xzIHdpbGwgYmVcblx0XHRtYXJrZWQgYXMgaW52YWxpZC4gSWYgeW91IG9ubHkgd2FudCB0byBkZXRlcm1pbmUgb3ZlcmFsbCBmb3JtIHZhbGlkaXR5IHdpdGhvdXQgbWFya2luZyBhbnl0aGluZyxcblx0XHRzZXQgcGFyYW0gb25seUNoZWNrIHRvIFRydWVcblx0XHRAcGFyYW0ge0Jvb2xlYW59IFtvbmx5Q2hlY2tdIFRydWUgdG8gaWdub3JlIHZhbGlkYXRpb24sIG9ubHkgdGVzdCB2YWxpZGl0eSBzdGF0ZVxuXHRcdEByZXR1cm4ge0Jvb2xlYW59XG4gICAgIyMjXG5cdGlzVmFsaWQ6IChvbmx5Q2hlY2spIC0+XG5cdFx0dmFsaWQgPSB0cnVlXG5cdFx0Zm9yIGNvbnRyb2wgaW4gQGNvbnRyb2xzXG5cdFx0XHRpZiAhY29udHJvbC52YWxpZGF0ZShvbmx5Q2hlY2ssICEoQG5vdGlmeUVycm9ycyAmJiB2YWxpZCkpICMgbm90aWZ5IG9ubHkgZmlyc3QgY29udHJvbFxuXHRcdFx0XHR2YWxpZCA9IGZhbHNlXG5cdFx0XHRcdGlmIG9ubHlDaGVjayB0aGVuIGJyZWFrXG5cdFx0cmV0dXJuIHZhbGlkXG5cblxuXHQjIyNcbiAgICBcdFJldHVybnMgdHJ1ZSBpZiBjbGllbnQtc2lkZSB2YWxpZGF0aW9uIG9uIHRoZSBmb3JtIGlzIHN1Y2Nlc3NmdWwuIEFueSBpbnZhbGlkIGNvbnRyb2xzIHdpbGwgYmVcblx0XHRtYXJrZWQgYXMgaW52YWxpZC5cbiAgICBcdEByZXR1cm4ge0Jvb2xlYW59XG5cdCMjI1xuXHR2YWxpZGF0ZTogLT5cblx0XHRyZXR1cm4gQGlzVmFsaWQoKVxuXG5cblxuXHQjIyNcbiAgICBcdENoZWNrIHdoZXRoZXIgdGhlIHZhbGlkaXR5IG9mIHRoZSBlbnRpcmUgZm9ybSBoYXMgY2hhbmdlZCBzaW5jZSBpdCB3YXMgbGFzdCBjaGVja2VkLCBhbmRcblx0XHRpZiBzbyBmaXJlIHRoZSB7QGxpbmsgI3ZhbGlkaXR5Y2hhbmdlIHZhbGlkaXR5Y2hhbmdlfSBldmVudC4gVGhpcyBpcyBhdXRvbWF0aWNhbGx5IGludm9rZWRcblx0XHR3aGVuIGFuIGluZGl2aWR1YWwgY29udHJvbCdzIHZhbGlkaXR5IGNoYW5nZXMuXG4gICAgIyMjXG5cdGNoZWNrVmFsaWRpdHk6IC0+XG5cdFx0dmFsaWQgPSBAaXNWYWxpZCh0cnVlKVxuXHRcdGlmIHZhbGlkIGlzbnQgQHdhc1ZhbGlkXG5cdFx0XHRAZW1pdChcInZhbGlkaXR5Y2hhbmdlXCIsIHRoaXMsdmFsaWQpXG5cdFx0XHRAd2FzVmFsaWQgPSB2YWxpZFxuXHRcdHJldHVyblxuXG5cblx0IyMjXG4gICAgXHRDaGVjayB3aGV0aGVyIHRoZSBkaXJ0eSBzdGF0ZSBvZiB0aGUgZW50aXJlIGZvcm0gaGFzIGNoYW5nZWQgc2luY2UgaXQgd2FzIGxhc3QgY2hlY2tlZCwgYW5kXG5cdFx0aWYgc28gZmlyZSB0aGUge0BsaW5rICNkaXJ0eWNoYW5nZSBkaXJ0eWNoYW5nZX0gZXZlbnQuIFRoaXMgaXMgYXV0b21hdGljYWxseSBpbnZva2VkXG5cdFx0d2hlbiBhbiBpbmRpdmlkdWFsIGNvbnRyb2wncyBgZGlydHlgIHN0YXRlIGNoYW5nZXMuXG4gICAgIyMjXG5cdGNoZWNrRGlydHk6IC0+XG5cdFx0ZGlydHkgPSBAaXNEaXJ0eSgpXG5cdFx0aWYgZGlydHkgaXNudCBAd2FzRGlydHlcblx0XHRcdEBlbWl0KFwiZGlydHljaGFuZ2VcIiwgdGhpcywgZGlydHkpXG5cdFx0XHRAd2FzRGlydHkgPSBkaXJ0eVxuXHRcdHJldHVyblxuXG5cblx0IyMjXG5cdFx0UmV0dXJucyBgdHJ1ZWAgaWYgYW55IGNvbnRyb2xzIGluIHRoaXMgZm9ybSBoYXZlIGNoYW5nZWQgZnJvbSB0aGVpciBvcmlnaW5hbCB2YWx1ZXMuXG5cdFx0QHJldHVybiB7Qm9vbGVhbn1cblx0IyMjXG5cdGlzRGlydHk6IC0+XG5cdFx0Zm9yIGNvbnRyb2wgaW4gQGNvbnRyb2xzXG5cdFx0XHRpZiBjb250cm9sLmlzRGlydHkoKVxuXHRcdFx0XHRyZXR1cm4gdHJ1ZVxuXHRcdHJldHVybiBmYWxzZVxuXG5cbm1vZHVsZS5leHBvcnRzID0gQmFzZUNvbnRhaW5lciIsIkJhc2VDb250YWluZXIgPSByZXF1aXJlICcuL0Jhc2VDb250YWluZXInXG5cblxuY2xhc3MgRmllbGRzZXQgZXh0ZW5kcyBCYXNlQ29udGFpbmVyXG5cblx0bGVnZW5kOiAnJ1xuXG5cblx0YmVmb3JlSW5pdDogKCkgLT5cblx0XHRzdXBlclxuXHRcdEB4dHlwZSA9ICdmaWVsZHNldCdcblx0XHRAZWxlbWVudCA9ICdmaWVsZHNldCdcblx0XHRyZXR1cm5cblxuXG5cdGJlZm9yZVJlbmRlcjogKCkgLT5cblx0XHRzdXBlclxuXHRcdHRoaXMubGVnZW5kRWwgPSBuZXcgRWxlbWVudCAnbGVnZW5kJyxcblx0XHRcdHBhcmVudDogQGVsXG5cdFx0XHRodG1sOiBAbGVnZW5kXG5cdFx0dGhpcy5jb250ZW50RWwgPSBuZXcgRWxlbWVudCAnZGl2Jyxcblx0XHRcdHBhcmVudDp0aGlzLmVsXG5cdFx0XHRjbHM6J2ZpZWxkc2V0LWNvbnRlbnQnXG5cdFx0cmV0dXJuXG5cblxuXG4jIGNyZWF0ZSBhZGQgbWV0aG9kXG5CYXNlQ29udGFpbmVyLnJlZ2lzdGVyQ29udHJvbCgnZmllbGRzZXQnLCBGaWVsZHNldClcblxuXG5tb2R1bGUuZXhwb3J0cyA9IEZpZWxkc2V0IiwiQmFzZUNvbnRhaW5lciA9IHJlcXVpcmUgJy4vQmFzZUNvbnRhaW5lcidcblxuXG5jbGFzcyBGb3JtIGV4dGVuZHMgQmFzZUNvbnRhaW5lclxuXG5cdHh0eXBlOiAnZm9ybSdcblx0ZWw6ICdmb3JtJ1xuXHRidXR0b25zRWw6IG51bGxcblx0cmVjb3JkOiBudWxsXG5cdHN1Ym1pdEJ0bjogbnVsbFxuXHRyZW5kZXJlcjogbnVsbFxuXHRyZW5kZXJlclR5cGU6ICdkZWZhdWx0J1xuXHRyZW5kZXJlck9wdGlvbnM6IG51bGxcblx0cHJldmVudEF1dG9Mb2dpbjogZmFsc2VcblxuXG5cdGJlZm9yZUluaXQ6IC0+XG5cdFx0c3VwZXIoKVxuXHRcdEBmb3JtID0gdGhpc1xuXHRcdHJldHVyblxuXG5cblx0YWZ0ZXJJbml0OiAtPlxuXHRcdHN1cGVyKClcblx0XHRAa2V5TGlzdGVuZXIgPSBuZXcgTWl3by51dGlscy5LZXlMaXN0ZW5lcihAZWwsICdrZXlkb3duJylcblx0XHRAa2V5TGlzdGVuZXIub24gJ2VudGVyJywgKGUpPT5cblx0XHRcdGlmIGUudGFyZ2V0LnRhZ05hbWUgaXNudCAnVEVYVEFSRUEnXG5cdFx0XHRcdEBzdWJtaXQoKVxuXHRcdFx0XHRyZXR1cm4gdHJ1ZVxuXHRcdFx0cmV0dXJuIGZhbHNlXG5cdFx0cmV0dXJuXG5cblxuXHRyZXNldDogKGJ0biwgc2lsZW50KSAtPlxuXHRcdHN1cGVyKClcblx0XHRAZW1pdCgncmVzZXQnLCB0aGlzLCBidG4pIGlmICFzaWxlbnRcblx0XHRyZXR1cm5cblxuXG5cdGFkZGVkQ29tcG9uZW50RGVlcDogKGNvbXBvbmVudCkgLT5cblx0XHRzdXBlcihjb21wb25lbnQpXG5cdFx0aWYgY29tcG9uZW50LmlzRm9ybUNvbnRyb2wgfHwgY29tcG9uZW50LmlzRm9ybUNvbnRhaW5lclxuXHRcdFx0Y29tcG9uZW50LmZvcm0gPSB0aGlzLmZvcm1cblxuXHRcdGlmIGNvbXBvbmVudC5pc1N1Ym1pdEJ1dHRvblxuXHRcdFx0QG1vbihjb21wb25lbnQsICdjbGljaycsICdvblN1Ym1pdEJ1dHRvbkNsaWNrJylcblx0XHRlbHNlIGlmIGNvbXBvbmVudC5pc1Jlc2V0QnV0dG9uXG5cdFx0XHRAbW9uKGNvbXBvbmVudCwgJ2NsaWNrJywgJ29uUmVzZXRCdXR0b25DbGljaycpXG5cdFx0cmV0dXJuXG5cblxuXHRyZW1vdmVkQ29tcG9uZW50RGVlcDogKGNvbXBvbmVudCkgLT5cblx0XHRzdXBlcihjb21wb25lbnQpXG5cdFx0aWYgY29tcG9uZW50LmlzRm9ybUNvbnRyb2wgfHwgY29tcG9uZW50LmlzRm9ybUNvbnRhaW5lclxuXHRcdFx0Y29tcG9uZW50LmZvcm0gPSBudWxsXG5cblx0XHRpZiBjb21wb25lbnQuaXNTdWJtaXRCdXR0b25cblx0XHRcdHRoaXMubXVuKGNvbXBvbmVudClcblx0XHRlbHNlIGlmIGNvbXBvbmVudC5pc1Jlc2V0QnV0dG9uXG5cdFx0XHR0aGlzLm11bihjb21wb25lbnQpXG5cdFx0cmV0dXJuXG5cblxuXHRvblN1Ym1pdEJ1dHRvbkNsaWNrOiAoYnRuKSAtPlxuXHRcdEBzdWJtaXQoYnRuKVxuXHRcdHJldHVyblxuXG5cblx0b25SZXNldEJ1dHRvbkNsaWNrOiAoYnRuKSAtPlxuXHRcdEByZXNldChidG4pXG5cdFx0cmV0dXJuXG5cblxuXHRsb2FkUmVjb3JkOiAocmVjb3JkKSAtPlxuXHRcdGlmICFyZWNvcmQgdGhlbiB0aHJvdyBuZXcgRXJyb3IoXCJVbmRlZmluZWQgcmVjb3JkXCIpXG5cdFx0QHJlY29yZCA9IHJlY29yZFxuXHRcdHZhbHVlcyA9IHJlY29yZC5nZXRWYWx1ZXMoKVxuXHRcdEBzZXRPcmlnaW5hbHModmFsdWVzKVxuXHRcdEBzZXRWYWx1ZXModmFsdWVzKVxuXHRcdEByZXNldChudWxsLCB0cnVlKVxuXHRcdHJldHVyblxuXG5cblx0dW5sb2FkUmVjb3JkOiAtPlxuXHRcdEByZWNvcmQgPSBudWxsXG5cdFx0QHNldE9yaWdpbmFscyh7fSwgdHJ1ZSlcblx0XHRAc2V0VmFsdWVzKHt9KVxuXHRcdEByZXNldChudWxsLCB0cnVlKVxuXHRcdHJldHVyblxuXG5cblx0dXBkYXRlUmVjb3JkOiAocmVjb3JkKSAtPlxuXHRcdHJlY29yZCA9IHJlY29yZCB8fCBAcmVjb3JkXG5cdFx0aWYgIXJlY29yZFxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5kZWZpbmVkIHJlY29yZC4gRmlyc3QgeW91IG11c3QgY2FsbCAnbG9hZFJlY29yZCcgb3IgcGFzcyByZWNvcmQgaW4gdGhpcyBtZXRob2RcIilcblxuXHRcdHZhbHVlcyA9IEBnZXRWYWx1ZXModHJ1ZSwgdHJ1ZSkgIyBnZXQgZGlydHkgdmFsdWVzIGZvciBtb2RlbFxuXHRcdGZvciBuYW1lIG9mIHJlY29yZC5maWVsZHNcblx0XHRcdGlmIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKVxuXHRcdFx0XHRyZWNvcmQuc2V0KG5hbWUsIHZhbHVlc1tuYW1lXSlcblxuXHRcdHJldHVybiByZWNvcmRcblxuXG5cdGVkaXRSZWNvcmQ6IChyZWNvcmQpIC0+XG5cdFx0cmVjb3JkID0gcmVjb3JkIHx8IEByZWNvcmRcblx0XHRpZiAhcmVjb3JkXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbmRlZmluZWQgcmVjb3JkLiBGaXJzdCB5b3UgbXVzdCBjYWxsICdsb2FkUmVjb3JkJyBvciBwYXNzIHJlY29yZCBpbiB0aGlzIG1ldGhvZFwiKVxuXG5cdFx0cmVjb3JkLmJlZ2luRWRpdCgpXG5cdFx0QHVwZGF0ZVJlY29yZChyZWNvcmQpXG5cdFx0cmVjb3JkLmVuZEVkaXQoKVxuXG5cdFx0cmV0dXJuIHJlY29yZFxuXG5cblx0c3VibWl0OiAoYnRuKSAtPlxuXHRcdEBzdWJtaXRCdG4gPSBidG5cblx0XHRpc1ZhbGlkID0gQHZhbGlkYXRlKClcblx0XHRAb25TdWJtaXQoKVxuXHRcdEBlbWl0KCdzdWJtaXQnLCB0aGlzLCBpc1ZhbGlkKVxuXHRcdGlmIGlzVmFsaWRcblx0XHRcdEBvblN1Y2Nlc3MoKVxuXHRcdFx0QGVtaXQoJ3N1Y2Nlc3MnLCB0aGlzKVxuXHRcdGVsc2Vcblx0XHRcdEBvbkZhaWx1cmUoKVxuXHRcdFx0QGVtaXQoJ2ZhaWx1cmUnLCB0aGlzKVxuXHRcdHJldHVyblxuXG5cblx0b25TdWNjZXNzOiAtPlxuXHRcdHJldHVyblxuXG5cblx0b25GYWlsdXJlOiAtPlxuXHRcdHJldHVyblxuXG5cblx0b25TdWJtaXQ6IC0+XG5cdFx0cmV0dXJuXG5cblxuXHRyZW5kZXJDb250YWluZXI6IC0+XG5cdFx0c3VwZXIoKVxuXHRcdGNvbnRlbnRFbCA9IEBnZXRDb250ZW50RWwoKVxuXHRcdEBnZXRSZW5kZXJlcigpLnJlbmRlckZvcm0odGhpcylcblxuXHRcdCMgZmluZCByZW5kZXJlZCBsYWJlbHNcblx0XHRmb3IgZWwgaW4gQGdldEVsZW1lbnRzKFwiW21pd28tbGFiZWxdXCIpXG5cdFx0XHRjb250cm9sID0gQGdldChlbC5nZXRBdHRyaWJ1dGUoXCJtaXdvLWxhYmVsXCIpLCB0cnVlKVxuXHRcdFx0Y29udHJvbC5sYWJlbEVsID0gZWxcblx0XHRcdGNvbnRyb2wubGFiZWxSZW5kZXJlZCA9IHRydWVcblxuXHRcdCMgZmluZCByZW5kZXJlZCBmb3JtLWdyb3Vwc1xuXHRcdGZvciBlbCBpbiBAZ2V0RWxlbWVudHMoXCJbbWl3by1ncm91cF1cIilcblx0XHRcdGNvbnRyb2wgPSBAZ2V0KGVsLmdldEF0dHJpYnV0ZShcIm1pd28tZ3JvdXBcIiksIHRydWUpXG5cdFx0XHRjb250cm9sLmdyb3VwRWwgPSBlbFxuXHRcdFx0Y29udHJvbC5lbCA9IGVsXG5cdFx0XHRjb250cm9sLnBhcmVudEVsID0gY29udGVudEVsXG5cblx0XHQjIGZpbmQgcmVuZGVyZWQgaW5wdXQgY29udHJvbHNcblx0XHRmb3IgZWwgaW4gQGdldEVsZW1lbnRzKFwiW21pd28tY29udHJvbHNdXCIpXG5cdFx0XHRjb250cm9sID0gQGdldChlbC5nZXRBdHRyaWJ1dGUoXCJtaXdvLWNvbnRyb2xzXCIpLCB0cnVlKVxuXHRcdFx0Y29udHJvbC5jb250cm9sc0VsID0gZWxcblx0XHRcdGNvbnRyb2wubGFiZWxSZW5kZXJlZCA9IHRydWVcblx0XHRcdEBkZXRlY3RDb250cm9sR3JvdXBFbChjb250cm9sLCBlbCwgY29udGVudEVsKVxuXG5cdFx0IyBmaW5kIHJlbmRlcmVkIGlucHV0IGNvbnRyb2xcblx0XHRmb3IgZWwgaW4gQGdldEVsZW1lbnRzKFwiW21pd28tY29udHJvbF1cIilcblx0XHRcdGNvbnRyb2wgPSBAZ2V0KGVsLmdldEF0dHJpYnV0ZShcIm1pd28tY29udHJvbFwiKSwgdHJ1ZSlcblx0XHRcdGNvbnRyb2wuY29udHJvbEVsID0gZWxcblx0XHRcdGNvbnRyb2wuY29udHJvbHNSZW5kZXJlZCA9IHRydWVcblx0XHRcdEBkZXRlY3RDb250cm9sR3JvdXBFbChjb250cm9sLCBlbCwgY29udGVudEVsKVxuXG5cdFx0IyBmaW5kIHJlbmRlcmVkIGlucHV0c1xuXHRcdGZvciBlbCBpbiBAZ2V0RWxlbWVudHMoXCJbbWl3by1pbnB1dF1cIilcblx0XHRcdGNvbnRyb2wgPSBAZ2V0KGVsLmdldEF0dHJpYnV0ZShcIm1pd28taW5wdXRcIiksIHRydWUpXG5cdFx0XHRjb250cm9sLmlucHV0RWwgPSBlbFxuXHRcdFx0Y29udHJvbC5jb250cm9sc1JlbmRlcmVkID0gdHJ1ZVxuXHRcdFx0Y29udHJvbC5jb250cm9sUmVuZGVyZWQgPSB0cnVlXG5cdFx0XHRAZGV0ZWN0Q29udHJvbEdyb3VwRWwoY29udHJvbCwgZWwsIGNvbnRlbnRFbClcblxuXHRcdCMgcmVuZGVyIGNvbnRyb2xzIGFuZCBzdWItY29udGFpbmVyc1xuXHRcdGNvbnRyb2xzID0gQGZpbmRDb21wb25lbnRzKGZhbHNlLCB7aXNGb3JtQ29udHJvbDogdHJ1ZSwgaXNGb3JtQ29udGFpbmVyOiB0cnVlfSlcblx0XHRmb3IgY29udHJvbCBpbiBjb250cm9sc1xuXHRcdFx0aWYgY29udHJvbC5pc0Zvcm1Db250cm9sXG5cdFx0XHRcdEBnZXRSZW5kZXJlcigpLnJlbmRlckdyb3VwKGNvbnRyb2wsIGNvbnRlbnRFbClcblx0XHRcdFx0Y29udHJvbC5ncm91cEVsLnNldCgnbWl3by1uYW1lJywgY29udHJvbC5uYW1lKVxuXHRcdFx0XHRjb250cm9sLmFmdGVyUmVuZGVyKClcblx0XHRcdFx0Y29udHJvbC5yZW5kZXJlZCA9IHRydWVcblx0XHRcdGVsc2Vcblx0XHRcdFx0Y29udHJvbC5yZW5kZXIoY29udGVudEVsKVxuXG5cdFx0IyByZW5kZXIgYnV0dG9uc1xuXHRcdGJ1dHRvbnMgPSBAZmluZENvbXBvbmVudHMoZmFsc2UsIHtpc0J1dHRvbjogdHJ1ZX0pXG5cdFx0aWYgYnV0dG9ucy5sZW5ndGggPiAwXG5cdFx0XHRAZ2V0UmVuZGVyZXIoKS5yZW5kZXJCdXR0b25zKGJ1dHRvbnMsIEBnZXRCdXR0b25zRWwoKSlcblx0XHRyZXR1cm5cblxuXG5cdGRldGVjdENvbnRyb2xHcm91cEVsOiAoY29udHJvbCwgZWwsIGNvbnRlbnRFbCkgLT5cblx0XHRpZiAoY29udHJvbEVsID0gZWwuZ2V0UGFyZW50KCcuZm9ybS1ncm91cCcpKVxuXHRcdFx0Y29udHJvbC5lbCA9IGNvbnRyb2xFbFxuXHRcdFx0Y29udHJvbC5wYXJlbnRFbCA9IGNvbnRlbnRFbFxuXHRcdFx0aWYgIWNvbnRyb2wuZ3JvdXBFbCB0aGVuIGNvbnRyb2wuZ3JvdXBFbCA9IGNvbnRyb2xFbFxuXHRcdHJldHVyblxuXG5cblx0Z2V0QnV0dG9uc0VsOiAtPlxuXHRcdGlmICFAYnV0dG9uc0VsXG5cdFx0XHRjdCA9IG5ldyBFbGVtZW50ICdkaXYnLFxuXHRcdFx0XHRwYXJlbnQ6IEBnZXRDb250ZW50RWwoKVxuXHRcdFx0XHRjbHM6ICdmb3JtLWdyb3VwJ1xuXHRcdFx0QGJ1dHRvbnNFbCA9IG5ldyBFbGVtZW50ICdkaXYnLFxuXHRcdFx0XHRwYXJlbnQ6IGN0XG5cdFx0XHQjIGludGVybmFsIHByb3BlcnR5IHRvIHByZXZlbnQgYWRkIHJlbmRlcmVyIGNsYXNzZXNcblx0XHRcdEBidXR0b25zRWwuZ2VuZXJhdGVkID0gdHJ1ZVxuXHRcdHJldHVybiBAYnV0dG9uc0VsXG5cblxuXHRnZXRSZW5kZXJlcjogLT5cblx0XHRpZiAhQHJlbmRlcmVyXG5cdFx0XHRAcmVuZGVyZXIgPSBtaXdvLnNlcnZpY2UoJ2Zvcm1SZW5kZXJlckZhY3RvcnknKS5jcmVhdGUoQHJlbmRlcmVyVHlwZSwgQHJlbmRlcmVyT3B0aW9ucylcblx0XHRyZXR1cm4gQHJlbmRlcmVyXG5cblxuXHRkb0Rlc3Ryb3k6IC0+XG5cdFx0QGtleUxpc3RlbmVyLmRlc3Ryb3koKVxuXHRcdHN1cGVyKClcblxuXG5tb2R1bGUuZXhwb3J0cyA9IEZvcm0iLCJCdXR0b24gPSByZXF1aXJlICcuLi8uLi9idXR0b25zL0J1dHRvbidcblJ1bGVzID0gcmVxdWlyZSAnLi4vUnVsZXMnXG5cblxuY2xhc3MgQmFzZUNvbnRyb2wgZXh0ZW5kcyBNaXdvLkNvbXBvbmVudFxuXG5cdHh0eXBlOiAnY29udHJvbCdcblx0aXNGb3JtQ29udHJvbDogdHJ1ZVxuXHRsYWJlbDogbnVsbFxuXHR2YWx1ZTogbnVsbFxuXHRkZWZhdWx0VmFsdWU6IHVuZGVmaW5lZFxuXHRyZXF1aXJlZDogZmFsc2Vcblx0cHJlcGVuZDogbnVsbFxuXHRhcHBlbmQ6IG51bGxcblx0dGlwOiBudWxsXG5cdGhlbHA6IG51bGxcblx0ZGVzYzogbnVsbFxuXHRjb250cm9sQ2xzOiBudWxsXG5cdGlucHV0VGFnOiBcImlucHV0XCJcblx0aW5wdXROYW1lOiBudWxsXG5cdGlucHV0Q2xzOiBudWxsXG5cdGlucHV0V2lkdGg6IG51bGxcblx0YXR0cmlidXRlczogbnVsbFxuXG5cdCMgQGNmZyB7Qm9vbGVhbn0gZGlzYWJsZWRcblx0IyBUcnVlIHRvIGRpc2FibGUgdGhlIGZpZWxkLiBEaXNhYmxlZCBGaWVsZHMgd2lsbCBub3QgYmUgc3VibWl0dGVkXG5cdGRpc2FibGVkOiBmYWxzZVxuXG5cdCMgQGNmZyB7Qm9vbGVhbn0gb21pdHRlZFxuXHQjIFNldHRpbmcgdGhpcyB0byBmYWxzZSB3aWxsIHByZXZlbnQgdGhlIGZpZWxkIGZyb20gYmVpbmcgc3VibWl0dGVkIGV2ZW4gd2hlbiBpdCBpcyBub3QgZGlzYWJsZWQuXG5cdG9taXR0ZWQ6IGZhbHNlXG5cblx0IyBAY2ZnIHtCb29sZWFufSB2YWxpZGF0ZU9uQ2hhbmdlXG5cdCMgU3BlY2lmaWVzIHdoZXRoZXIgdGhpcyBmaWVsZCBzaG91bGQgYmUgdmFsaWRhdGVkIGltbWVkaWF0ZWx5IHdoZW5ldmVyIGEgY2hhbmdlIGluIGl0cyB2YWx1ZSBpcyBkZXRlY3RlZC5cblx0IyBJZiB0aGUgdmFsaWRhdGlvbiByZXN1bHRzIGluIGEgY2hhbmdlIGluIHRoZSBmaWVsZCdzIHZhbGlkaXR5LCBhIHtAbGluayAjdmFsaWRpdHljaGFuZ2V9IGV2ZW50IHdpbGwgYmUgZmlyZWQuXG5cdCMgVGhpcyBhbGxvd3MgdGhlIGZpZWxkIHRvIHNob3cgZmVlZGJhY2sgYWJvdXQgdGhlIHZhbGlkaXR5IG9mIGl0cyBjb250ZW50cyBpbW1lZGlhdGVseSBhcyB0aGUgdXNlciBpcyB0eXBpbmcuXG5cdCMgV2hlbiBzZXQgdG8gZmFsc2UsIGZlZWRiYWNrIHdpbGwgbm90IGJlIGltbWVkaWF0ZS4gSG93ZXZlciB0aGUgZm9ybSB3aWxsIHN0aWxsIGJlIHZhbGlkYXRlZCBiZWZvcmUgc3VibWl0dGluZyBpZlxuXHQjIHRoZSBjbGllbnRWYWxpZGF0aW9uIG9wdGlvbiB0byBpcyBlbmFibGVkLCBvciBpZiB0aGUgZmllbGQgb3IgZm9ybSBhcmUgdmFsaWRhdGVkIG1hbnVhbGx5LlxuXHR2YWxpZGF0ZU9uQ2hhbmdlOiB0cnVlXG5cblx0YnV0dG9uczogbnVsbFxuXHRydWxlczogbnVsbFxuXHRmb3JtOiBudWxsXG5cdGxhYmVsRWw6IG51bGxcblx0bGFiZWxUZXh0RWw6IG51bGxcblx0aW5wdXQ6IG51bGxcblx0Y29udHJvbHNFbDogbnVsbFxuXHRkZXNjRWw6IG51bGxcblx0dGlwRWw6IG51bGxcblx0aGVscEVsOiBudWxsXG5cdHByZXZlbnRSZW5kZXJDb250cm9sOiBmYWxzZVxuXHRzdXNwZW5kQ2hlY2tDaGFuZ2U6IHRydWVcblx0b3JpZ2luYWxWYWx1ZTogdW5kZWZpbmVkXG5cdGxhc3RWYWx1ZTogdW5kZWZpbmVkXG5cdHdhc0RpcnR5OiBmYWxzZVxuXHR3YXNWYWxpZDogdHJ1ZVxuXHRzdWJtaXRWYWx1ZTogdHJ1ZVxuXG5cblx0YWZ0ZXJJbml0OiAtPlxuXHRcdHN1cGVyKClcblx0XHRAZXJyb3JzID0gW11cblx0XHRAZGVmYXVsdFZhbHVlID0gQG9yaWdpbmFsVmFsdWUgPSBAbGFzdFZhbHVlID0gQHZhbHVlXG5cblx0XHRpZiAhVHlwZS5pc0luc3RhbmNlKEBydWxlcylcblx0XHRcdHJ1bGVzID0gQXJyYXkuZnJvbShAcnVsZXMpXG5cdFx0XHRAcnVsZXMgPSBuZXcgUnVsZXModGhpcylcblx0XHRcdEBpbml0UnVsZXMoKVxuXHRcdFx0QHJ1bGVzLmFkZFJ1bGVzKHJ1bGVzKVxuXG5cdFx0aWYgQHdpZHRoXG5cdFx0XHRAaW5wdXRXaWR0aCA9IEB3aWR0aFxuXHRcdFx0QHdpZHRoID0gbnVsbFxuXG5cdFx0aXRlbXMgPSBAYnV0dG9uc1xuXHRcdEBidXR0b25zID0gbmV3IE1pd28udXRpbHMuQ29sbGVjdGlvbigpXG5cdFx0aWYgaXRlbXMgdGhlbiBmb3IgYnV0dG9uIGluIGl0ZW1zIHRoZW4gQGFkZEJ1dHRvbihidXR0b24ubmFtZSwgYnV0dG9uKVxuXHRcdHJldHVyblxuXG5cblx0aW5pdFJ1bGVzOiAtPlxuXHRcdGlmIEByZXF1aXJlZCB0aGVuIEBydWxlcy5hZGRSdWxlKFwiZmlsbGVkXCIpXG5cdFx0cmV0dXJuXG5cblxuXHQjIyNcblx0XHRSZXR1cm5zIHRoZSBjdXJyZW50IGRhdGEgdmFsdWUgb2YgdGhlIGZpZWxkLiBUaGUgdHlwZSBvZiB2YWx1ZSByZXR1cm5lZFxuXHRcdGlzIHBhcnRpY3VsYXIgdG8gdGhlIHR5cGUgb2YgdGhlIHBhcnRpY3VsYXIgZmllbGRcblx0XHRAcmV0dXJuIHtPYmplY3R9IHZhbHVlIFRoZSBmaWVsZCB2YWx1ZVxuXHQjIyNcblx0Z2V0VmFsdWU6IC0+XG5cdFx0cmV0dXJuIEB2YWx1ZVxuXG5cblx0IyMjXG5cdFx0UmV0dXJucyB0aGUgY3VycmVudCBkYXRhIHZhbHVlIG9mIHRoZSBmaWVsZHMgaW5wdXQuXG5cdFx0QHJldHVybiB7T2JqZWN0fSBUaGUgZmllbGRzIGlucHV0IHZhbHVlXG5cdCMjI1xuXHRnZXRSYXdWYWx1ZTogLT5cblx0XHRyZXR1cm4gKGlmIEBpbnB1dCB0aGVuIEBpbnB1dC5nZXRWYWx1ZSgpIGVsc2UgdW5kZWZpbmVkKVxuXG5cblx0Z2V0U3RyaW5nVmFsdWU6IC0+XG5cdFx0dmFsID0gQGdldFZhbHVlKClcblx0XHRyZXR1cm4gKGlmIHZhbCBpc250IG51bGwgYW5kIHZhbCBpc250IGB1bmRlZmluZWRgIHRoZW4gdmFsLnRvU3RyaW5nKCkgZWxzZSBcIlwiKVxuXG5cblx0IyMjXG5cdFx0U2V0cyBhIGRhdGEgdmFsdWUgaW50byB0aGUgZmllbGQgYW5kIHJ1bnMgdGhlIGNoYW5nZSBkZXRlY3Rpb24gYW5kIHZhbGlkYXRpb24uXG5cdFx0QHBhcmFtIHtPYmplY3R9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXRcblx0IyMjXG5cdHNldFZhbHVlOiAodmFsdWUpIC0+XG5cdFx0QHZhbHVlID0gdmFsdWVcblx0XHRAY2hlY2tDaGFuZ2UoKVxuXHRcdHJldHVybiB0aGlzXG5cblxuXHRzZXRPcmlnaW5hbFZhbHVlOiAodmFsdWUpIC0+XG5cdFx0QG9yaWdpbmFsVmFsdWUgPSB2YWx1ZVxuXHRcdEBjaGVja0RpcnR5KClcblx0XHRyZXR1cm4gdGhpc1xuXG5cblx0c2V0RGVmYXVsdFZhbHVlOiAodmFsdWUpIC0+XG5cdFx0QGRlZmF1bHRWYWx1ZSA9IHZhbHVlICBpZiB2YWx1ZVxuXHRcdEBzZXRWYWx1ZShAZGVmYXVsdFZhbHVlKVxuXHRcdHJldHVybiB0aGlzXG5cblxuXHRzZXRGb2N1czogLT5cblx0XHRzdXBlcigpXG5cdFx0QGVtaXQoXCJmb2N1c1wiLCB0aGlzKVxuXHRcdHJldHVybiB0aGlzXG5cblxuXHRpc0Rpc2FibGVkOiAtPlxuXHRcdHJldHVybiBAZGlzYWJsZWRcblxuXG5cdHNldERpc2FibGVkOiAoQGRpc2FibGVkKSAtPlxuXHRcdEBpbnB1dC5zZXREaXNhYmxlZChAZGlzYWJsZWQpXG5cdFx0cmV0dXJuIHRoaXNcblxuXG5cdGlzRmlsbGVkOiAtPlxuXHRcdHJldHVybiBAZ2V0U3RyaW5nVmFsdWUoKSBpc250IFwiXCJcblxuXG5cdCMjI1xuXHRcdFJldHVybnMgd2hldGhlciB0d28gZmllbGQge0BsaW5rICNnZXRWYWx1ZSB2YWx1ZXN9IGFyZSBsb2dpY2FsbHkgZXF1YWwuIEZpZWxkIGltcGxlbWVudGF0aW9ucyBtYXkgb3ZlcnJpZGUgdGhpc1xuXHRcdHRvIHByb3ZpZGUgY3VzdG9tIGNvbXBhcmlzb24gbG9naWMgYXBwcm9wcmlhdGUgZm9yIHRoZSBwYXJ0aWN1bGFyIGZpZWxkJ3MgZGF0YSB0eXBlLlxuXHRcdEBwYXJhbSB7T2JqZWN0fSB2YWx1ZTEgVGhlIGZpcnN0IHZhbHVlIHRvIGNvbXBhcmVcblx0XHRAcGFyYW0ge09iamVjdH0gdmFsdWUyIFRoZSBzZWNvbmQgdmFsdWUgdG8gY29tcGFyZVxuXHRcdEByZXR1cm4ge0Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlcyBhcmUgZXF1YWwsIGZhbHNlIGlmIG5vdCBlcXVhbC5cblx0IyMjXG5cdGlzRXF1YWw6ICh2YWx1ZTEsIHZhbHVlMikgLT5cblx0XHRyZXR1cm4gdmFsdWUxIGlzIHZhbHVlMlxuXG5cblx0IyMjXG5cdFx0UmV0dXJucyB0aGUgcGFyYW1ldGVyKHMpIHRoYXQgd291bGQgYmUgaW5jbHVkZWQgaW4gYSBzdGFuZGFyZCBmb3JtIHN1Ym1pdCBmb3IgdGhpcyBmaWVsZC4gVHlwaWNhbGx5IHRoaXMgd2lsbCBiZVxuXHRcdGFuIG9iamVjdCB3aXRoIGEgc2luZ2xlIG5hbWUtdmFsdWUgcGFpciwgdGhlIG5hbWUgYmVpbmcgdGhpcyBmaWVsZCdzIHtAbGluayAjZ2V0TmFtZSBuYW1lfSBhbmQgdGhlIHZhbHVlIGJlaW5nXG5cdFx0aXRzIGN1cnJlbnQgc3RyaW5naWZpZWQgdmFsdWUuIE1vcmUgYWR2YW5jZWQgZmllbGQgaW1wbGVtZW50YXRpb25zIG1heSByZXR1cm4gbW9yZSB0aGFuIG9uZSBuYW1lLXZhbHVlIHBhaXIuXG5cblx0XHROb3RlIHRoYXQgdGhlIHZhbHVlcyByZXR1cm5lZCBmcm9tIHRoaXMgbWV0aG9kIGFyZSBub3QgZ3VhcmFudGVlZCB0byBoYXZlIGJlZW4gc3VjY2Vzc2Z1bGx5IHtAbGluayAjdmFsaWRhdGVcblx0XHR2YWxpZGF0ZWR9LlxuXG5cdFx0QHBhcmFtIHtCb29sZWFufSBzdWJtaXR0YWJsZSBPbmx5IHN1Ym1pdHRhYmxlIHZhbHVlc1xuXHRcdEByZXR1cm4ge09iamVjdH0gQSBtYXBwaW5nIG9mIHN1Ym1pdCBwYXJhbWV0ZXIgbmFtZXMgdG8gdmFsdWVzOyBlYWNoIHZhbHVlIHNob3VsZCBiZSBhIHN0cmluZywgb3IgYW4gYXJyYXkgb2Zcblx0XHRzdHJpbmdzIGlmIHRoYXQgcGFydGljdWxhciBuYW1lIGhhcyBtdWx0aXBsZSB2YWx1ZXMuIEl0IGNhbiBhbHNvIHJldHVybiBudWxsIGlmIHRoZXJlIGFyZSBubyBwYXJhbWV0ZXJzIHRvIGJlXG5cdFx0c3VibWl0dGVkLlxuXHQjIyNcblx0Z2V0RGF0YTogKHN1Ym1pdHRhYmxlKSAtPlxuXHRcdGRhdGEgPSBudWxsXG5cdFx0aWYgIUBkaXNhYmxlZCBhbmQgKCFzdWJtaXR0YWJsZSBvciAhQG9taXR0ZWQpIGFuZCAhQGlzRmlsZVVwbG9hZFxuXHRcdFx0ZGF0YSA9IHt9XG5cdFx0XHRkYXRhW0BnZXROYW1lKCldID0gXCJcIiArIEBnZXRWYWx1ZSgpXG5cdFx0cmV0dXJuIGRhdGFcblxuXG5cdCMjI1xuXHRcdFJlc2V0cyB0aGUgY3VycmVudCBmaWVsZCB2YWx1ZSB0byB0aGUgb3JpZ2luYWxseSBsb2FkZWQgdmFsdWUgYW5kIGNsZWFycyBhbnkgdmFsaWRhdGlvbiBtZXNzYWdlcy5cblx0IyMjXG5cdHJlc2V0OiAtPlxuXHRcdEBiZWZvcmVSZXNldCgpXG5cdFx0QHNldFZhbHVlKEBvcmlnaW5hbFZhbHVlKVxuXHRcdEBjbGVhckludmFsaWQoKVxuXHRcdHJldHVyblxuXG5cblx0YmVmb3JlUmVzZXQ6IC0+XG5cdFx0cmV0dXJuXG5cblxuXHRjbGVhckludmFsaWQ6IC0+XG5cdFx0ZGVsZXRlIEB3YXNWYWxpZFxuXHRcdEBub3RpZnlFcnJvcnMgPSBmYWxzZVxuXHRcdEB3YXNJbnB1dEZvY3VzZWQgPSBmYWxzZVxuXHRcdEBjbGVhckVycm9ycygpXG5cdFx0cmV0dXJuIHRoaXNcblxuXG5cdCMjI1xuXHRcdFJlc2V0cyB0aGUgZmllbGQncyB7QGxpbmsgI29yaWdpbmFsVmFsdWV9IHByb3BlcnR5IHNvIGl0IG1hdGNoZXMgdGhlIGN1cnJlbnQge0BsaW5rICNnZXRWYWx1ZSB2YWx1ZX0uXG5cdCMjI1xuXHRyZXNldE9yaWdpbmFsVmFsdWU6IC0+XG5cdFx0QG9yaWdpbmFsVmFsdWUgPSBAZ2V0VmFsdWUoKVxuXHRcdEBjaGVja0RpcnR5KClcblx0XHRyZXR1cm4gdGhpc1xuXG5cblx0IyMjXG5cdFx0Q2hlY2tzIHdoZXRoZXIgdGhlIHZhbHVlIG9mIHRoZSBmaWVsZCBoYXMgY2hhbmdlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIGl0IHdhcyBjaGVja2VkLlxuXHRcdElmIHRoZSB2YWx1ZSBoYXMgY2hhbmdlZCwgaXQ6XG5cdFx0MS4gRmlyZXMgdGhlIHtAbGluayAjY2hhbmdlIGNoYW5nZSBldmVudH0sXG5cdFx0Mi4gUGVyZm9ybXMgdmFsaWRhdGlvbiBpZiB0aGUge0BsaW5rICN2YWxpZGF0ZU9uQ2hhbmdlfSBjb25maWcgaXMgZW5hYmxlZCwgZmlyaW5nIHRoZSB2YWxpZGl0eWNoYW5nZSBldmVudCBpZiB0aGUgdmFsaWRpdHkgaGFzIGNoYW5nZWQsIGFuZFxuXHRcdDMuIENoZWNrcyB0aGUge0BsaW5rICNpc0RpcnR5IGRpcnR5IHN0YXRlfSBvZiB0aGUgZmllbGQgYW5kIGZpcmVzIHRoZSBkaXJ0eWNoYW5nZSBldmVudCBpZiBpdCBoYXMgY2hhbmdlZC5cblx0IyMjXG5cdGNoZWNrQ2hhbmdlOiAtPlxuXHRcdGlmIEBzdXNwZW5kQ2hlY2tDaGFuZ2Vcblx0XHRcdHJldHVyblxuXHRcdG5ld1ZhbCA9IEBnZXRWYWx1ZSgpXG5cdFx0b2xkVmFsID0gQGxhc3RWYWx1ZVxuXHRcdGlmICFAaXNFcXVhbChuZXdWYWwsIG9sZFZhbCkgYW5kICFAaXNEZXN0cm95ZWRcblx0XHRcdEBsYXN0VmFsdWUgPSBuZXdWYWxcblx0XHRcdEBlbWl0KFwiY2hhbmdlXCIsIHRoaXMsIG5ld1ZhbCwgb2xkVmFsKVxuXHRcdFx0QG9uQ2hhbmdlKG5ld1ZhbCwgb2xkVmFsKVxuXHRcdHJldHVyblxuXG5cblx0IyMjXG5cdFx0QHByaXZhdGVcblx0XHRDYWxsZWQgd2hlbiB0aGUgZmllbGQncyB2YWx1ZSBjaGFuZ2VzLiBQZXJmb3JtcyB2YWxpZGF0aW9uIGlmIHRoZSB7QGxpbmsgI3ZhbGlkYXRlT25DaGFuZ2V9XG5cdFx0Y29uZmlnIGlzIGVuYWJsZWQsIGFuZCBpbnZva2VzIHRoZSBkaXJ0eSBjaGVjay5cblx0IyMjXG5cdG9uQ2hhbmdlOiAobmV3VmFsLCBvbGRWYWwpIC0+XG5cdFx0QHZhbGlkYXRlKCkgIGlmIEB2YWxpZGF0ZU9uQ2hhbmdlXG5cdFx0QGNoZWNrRGlydHkoKVxuXHRcdHJldHVyblxuXG5cblx0IyMjXG5cdFx0UmV0dXJucyB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEZpZWxkIGhhcyBiZWVuIGNoYW5nZWQgZnJvbSBpdHMge0BsaW5rICNvcmlnaW5hbFZhbHVlfS5cblx0XHRXaWxsIGFsd2F5cyByZXR1cm4gZmFsc2UgaWYgdGhlIGZpZWxkIGlzIGRpc2FibGVkLlxuXHQjIyNcblx0aXNEaXJ0eTogLT5cblx0XHRyZXR1cm4gIUBkaXNhYmxlZCBhbmQgIUBpc0VxdWFsKEBnZXRWYWx1ZSgpLCBAb3JpZ2luYWxWYWx1ZSlcblxuXG5cdCMjI1xuXHRcdENoZWNrcyB0aGUgaXNEaXJ0eSBzdGF0ZSBvZiB0aGUgZmllbGQgYW5kIGlmIGl0IGhhcyBjaGFuZ2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgaXQgd2FzIGNoZWNrZWQsXG5cdFx0ZmlyZXMgdGhlIGRpcnR5Y2hhbmdlIGV2ZW50LlxuXHQjIyNcblx0Y2hlY2tEaXJ0eTogLT5cblx0XHRpc0RpcnR5ID0gQGlzRGlydHkoKVxuXHRcdGlmIGlzRGlydHkgaXNudCBAd2FzRGlydHlcblx0XHRcdEBlbWl0KFwiZGlydHljaGFuZ2VcIiwgdGhpcywgaXNEaXJ0eSlcblx0XHRcdEBvbkRpcnR5Q2hhbmdlKGlzRGlydHkpXG5cdFx0XHRAd2FzRGlydHkgPSBpc0RpcnR5XG5cdFx0cmV0dXJuXG5cblxuXHQjIyNcblx0XHRAcHJpdmF0ZVxuXHRcdENhbGxlZCB3aGVuIHRoZSBmaWVsZCdzIGRpcnR5IHN0YXRlIGNoYW5nZXMuXG5cdFx0QHBhcmFtIHtCb29sZWFufSBpc0RpcnR5XG5cdCMjI1xuXHRvbkRpcnR5Q2hhbmdlOiAoaXNEaXJ0eSkgLT5cblx0XHRyZXR1cm5cblxuXG5cdGdldFJ1bGVzOiAtPlxuXHRcdHJldHVybiBAcnVsZXNcblxuXG5cdCMjI1xuXHRcdFJldHVybnMgZmlyc3QgZXJyb3Jcblx0IyMjXG5cdGdldEVycm9yOiAtPlxuXHRcdHJldHVybiBAZXJyb3JzWzBdXG5cblxuXHRnZXRFcnJvcnM6IC0+XG5cdFx0cmV0dXJuIEBlcnJvcnNcblxuXG5cdGhhc0Vycm9yczogLT5cblx0XHRyZXR1cm4gQGVycm9ycy5sZW5ndGggPiAwXG5cblxuXHRhZGRFcnJvcnM6IChlcnJvcnMpIC0+XG5cdFx0QGVycm9ycy5hcHBlbmQoZXJyb3JzKVxuXHRcdHJldHVyblxuXG5cblx0c2V0RXJyb3JzOiAoZXJyb3JzKSAtPlxuXHRcdEBjbGVhckVycm9ycygpXG5cdFx0QGFkZEVycm9ycyhlcnJvcnMpXG5cdFx0cmV0dXJuXG5cblxuXHRjbGVhckVycm9yczogLT5cblx0XHRAZXJyb3JzLmVtcHR5KClcblx0XHRyZXR1cm5cblxuXG5cdHVwZGF0ZUVycm9yczogKHNpbGVudEVycm9ycykgLT5cblx0XHRpZiBAaW5wdXRcblx0XHRcdEBpbnB1dC5lbC5yZW1vdmVDbGFzcygnaGFzLWVycm9yJylcblx0XHRcdEBpbnB1dC5lbC5hZGRDbGFzcygnaGFzLWVycm9yJykgaWYgQGhhc0Vycm9ycygpXG5cblx0XHRpZiBAZWwuaGFzQ2xhc3MoJ2Zvcm0tZ3JvdXAnKVxuXHRcdFx0QGVsLnJlbW92ZUNsYXNzKCdoYXMtZXJyb3InKVxuXHRcdFx0QGVsLmFkZENsYXNzKCdoYXMtZXJyb3InKSBpZiBAaGFzRXJyb3JzKClcblxuXHRcdGlmIEBoYXNFcnJvcnMoKSAmJiAhc2lsZW50RXJyb3JzXG5cdFx0XHRAZXJyb3JUaXAgPSBtaXdvLnRvb2x0aXAuY3JlYXRlKEBlcnJvclRhcmdldEVsIHx8IEBpbnB1dC5lbCwge3R5cGU6J2RhbmdlcicsIGRlbGF5OjAsIHJlbmRlclRvOkBlbH0pICBpZiAhQGVycm9yVGlwXG5cdFx0XHRAZXJyb3JUaXAuc2V0VGV4dChAZ2V0RXJyb3IoKSlcblx0XHRcdEBlcnJvclRpcC5zaG93KClcblx0XHRlbHNlIGlmIEBlcnJvclRpcFxuXHRcdFx0QGVycm9yVGlwLmhpZGUoKVxuXG5cdFx0QGVtaXQoXCJlcnJvcnM6dXBkYXRlXCIsIHRoaXMpXG5cdFx0cmV0dXJuXG5cblxuXHRpc1ZhbGlkOiAob25seUNoZWNrKSAtPlxuXHRcdGlmIEBkaXNhYmxlZFxuXHRcdFx0cmV0dXJuIHRydWVcblx0XHRpZiBAd2FzVmFsaWQgaXMgbnVsbCB8fCAhb25seUNoZWNrXG5cdFx0XHRAc2V0RXJyb3JzKEBnZXRSdWxlcygpLnZhbGlkYXRlKCkpICMgY29sbGVjdCBhbGwgZXJyb3JzXG5cdFx0cmV0dXJuICFAaGFzRXJyb3JzKClcblxuXG5cdCMjI1xuXHRcdFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIGZpZWxkIHZhbHVlIGlzIGN1cnJlbnRseSB2YWxpZCBieSB7QGxpbmsgI2dldEVycm9ycyB2YWxpZGF0aW5nfSB0aGUgZmllbGQncyBjdXJyZW50XG5cdFx0dmFsdWUsIGFuZCBmaXJlcyB0aGUge0BsaW5rICN2YWxpZGl0eWNoYW5nZX0gZXZlbnQgaWYgdGhlIGZpZWxkJ3MgdmFsaWRpdHkgaGFzIGNoYW5nZWQgc2luY2UgdGhlIGxhc3QgdmFsaWRhdGlvbi5cblx0XHROb3RlKio6IHtAbGluayAjZGlzYWJsZWR9IGZpZWxkcyBhcmUgYWx3YXlzIHRyZWF0ZWQgYXMgdmFsaWQuXG5cblx0XHRDdXN0b20gaW1wbGVtZW50YXRpb25zIG9mIHRoaXMgbWV0aG9kIGFyZSBhbGxvd2VkIHRvIGhhdmUgc2lkZS1lZmZlY3RzIHN1Y2ggYXMgdHJpZ2dlcmluZyBlcnJvciBtZXNzYWdlIGRpc3BsYXkuXG5cdFx0VG8gdmFsaWRhdGUgd2l0aG91dCBzaWRlLWVmZmVjdHMsIHVzZSB7QGxpbmsgI2lzVmFsaWR9LlxuXG5cdFx0QHBhcmFtIHtCb29sZWFufSBbb25seUNoZWNrXSBPbmx5IGNoZWNrIHZhbGlkIHN0YXRlLCBkb24ndCB2YWxpZGF0ZSBjb250cm9sXG5cdFx0QHBhcmFtIHtCb29sZWFufSBbc2lsZW50RXJyb3JzXSBUcnVlIGlmIHlvdSBkb24ndCB3YW50IHNob3cgZXJyb3IgdGlwXG5cdFx0QHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdmFsaWQsIGVsc2UgZmFsc2Vcblx0IyMjXG5cdHZhbGlkYXRlOiAob25seUNoZWNrLCBzaWxlbnRFcnJvcnMpIC0+XG5cdFx0aXNWYWxpZCA9IEBpc1ZhbGlkKG9ubHlDaGVjaylcblx0XHRAdXBkYXRlRXJyb3JzKHNpbGVudEVycm9ycylcblx0XHRpZiBpc1ZhbGlkIGlzbnQgQHdhc1ZhbGlkXG5cdFx0XHRAd2FzVmFsaWQgPSBpc1ZhbGlkXG5cdFx0XHRAZW1pdChcInZhbGlkaXR5Y2hhbmdlXCIsIHRoaXMsIGlzVmFsaWQpXG5cdFx0cmV0dXJuIGlzVmFsaWRcblxuXG5cdGlzUmVxdWlyZWQ6IC0+XG5cdFx0cmV0dXJuIEBydWxlcy5oYXNSdWxlKFwiZmlsbGVkXCIpXG5cblxuXHRpbml0aWFsaXplQ29udHJvbDogLT5cblx0XHRAc2V0VmFsdWUoQHZhbHVlKSAgaWYgQHZhbHVlIGlzbnQgbnVsbFxuXHRcdEBzdXNwZW5kQ2hlY2tDaGFuZ2UgPSBmYWxzZVxuXHRcdHJldHVyblxuXG5cblx0Z2V0Rm9ybTogLT5cblx0XHRpZiAhQGZvcm0gdGhlbiB0aHJvdyBuZXcgRXJyb3IoXCJDb21wb25lbnQgaXMgbm90IGF0dGFjaGVkIHRvIEZvcm1cIilcblx0XHRyZXR1cm4gQGZvcm1cblxuXG5cdHNldExhYmVsOiAoQGxhYmVsKSAtPlxuXHRcdEBsYWJlbFRleHRFbC5zZXQoJ3RleHQnLCBAbGFiZWwpIGlmIEBsYWJlbFRleHRFbFxuXHRcdHJldHVybiB0aGlzXG5cblxuXHRnZXRMYWJlbDogLT5cblx0XHRyZXR1cm4gQGxhYmVsXG5cblxuXHRnZXRMYWJlbEVsOiAtPlxuXHRcdGlmICFAbGFiZWxFbFxuXHRcdFx0QGxhYmVsRWwgPSBuZXcgRWxlbWVudCgnbGFiZWwnKVxuXHRcdHJldHVybiBAbGFiZWxFbFxuXG5cblx0Z2V0SW5wdXQ6IC0+XG5cdFx0aWYgIUBpbnB1dFxuXHRcdFx0QGlucHV0ID0gQGNyZWF0ZUlucHV0KClcblx0XHRcdGlmICFAaW5wdXQgdGhlbiB0aHJvdyBuZXcgRXJyb3IoXCJJbnB1dCB3YXMgbm90IGNyZWF0ZWQgaW4gY3JlYXRlSW5wdXQoKSBpbiBjbGFzcyAje3RoaXN9XCIpXG5cdFx0cmV0dXJuIEBpbnB1dFxuXG5cblx0YWRkQnV0dG9uOiAobmFtZSwgY29uZmlnKSAtPlxuXHRcdGJ1dHRvbiA9IG5ldyBCdXR0b24oY29uZmlnKVxuXHRcdGJ1dHRvbi5nZXRDb250cm9sID0gPT4gcmV0dXJuIHRoaXNcblx0XHRidXR0b24ucmVuZGVyKEBidXR0b25zQ3QpICBpZiBAYnV0dG9uc0N0XG5cdFx0YnV0dG9uLm9uICdjbGljaycsIChidG4sIGV2ZW50KSA9PlxuXHRcdFx0QGVtaXQoJ2J1dHRvbmNsaWNrJywgdGhpcywgYnRuLCBldmVudClcblx0XHRcdHJldHVyblxuXHRcdEBidXR0b25zLnNldChuYW1lLCBidXR0b24pXG5cdFx0cmV0dXJuIGJ1dHRvblxuXG5cblx0YWRkUmVzZXRCdXR0b246IC0+XG5cdFx0YnV0dG9uID0gQGFkZEJ1dHRvbiAncmVzZXQnLFxuXHRcdFx0ZGlzYWJsZWQ6IHRydWVcblx0XHRcdGljb246ICdyZW1vdmUnXG5cdFx0XHRoYW5kbGVyOiA9PiBAcmVzZXQoKVxuXHRcdHJldHVybiBidXR0b25cblxuXG5cdGdldEJ1dHRvbjogKG5hbWUpIC0+XG5cdFx0cmV0dXJuIEBidXR0b25zLmdldChuYW1lKVxuXG5cblx0Y3JlYXRlSW5wdXQ6IC0+XG5cdFx0IyBtdXN0IGltcGxlbWVudCBpbiBjaGlsZFxuXHRcdHJldHVyblxuXG5cblx0ZG9SZW5kZXI6IC0+XG5cdFx0QHJlbmRlckNvbnRyb2woQGVsKVxuXHRcdHJldHVyblxuXG5cblx0cmVuZGVyTGFiZWw6IChjdCkgLT5cblx0XHRsYWJlbEVsID0gQGdldExhYmVsRWwoKVxuXHRcdGxhYmVsRWwuaW5qZWN0KGN0KVxuXG5cdFx0QGxhYmVsVGV4dEVsID0gbmV3IEVsZW1lbnQoJ3NwYW4nLCB7Y2xzOidjb250cm9sLWxhYmVsLXRleHQnLCBodG1sOkBnZXRMYWJlbCgpfSlcblx0XHRAbGFiZWxUZXh0RWwuaW5qZWN0KGxhYmVsRWwpXG5cblx0XHRpZiBAaXNSZXF1aXJlZCgpXG5cdFx0XHRyZXF1aXJlZEVsID0gbmV3IEVsZW1lbnQoJ3NwYW4nLCB7Y2xzOidjb250cm9sLWxhYmVsLXJlcXVpcmVkJywgaHRtbDogJyonLCAnZGF0YS10b2dnbGUnOid0b29sdGlwJywgJ2RhdGEtdGl0bGUnOidSZXF1aXJlZCBmaWVsZCd9KVxuXHRcdFx0cmVxdWlyZWRFbC5pbmplY3QobGFiZWxFbClcblxuXHRcdHJldHVybiBsYWJlbEVsXG5cblxuXHRyZW5kZXJDb250cm9sOiAoY3QpIC0+XG5cdFx0aW5wdXQgPSBAZ2V0SW5wdXQoKVxuXHRcdGlmIGlucHV0LnJlbmRlcmVkXG5cdFx0XHRyZXR1cm4gaW5wdXRcblxuXHRcdGlmIEBpbnB1dFdpZHRoXG5cdFx0XHRAZWwuYWRkQ2xhc3MoJ2lucHV0LWZpbGwnKVxuXHRcdFx0Y3Quc2V0U3R5bGUoJ3dpZHRoJywgQGlucHV0V2lkdGgpXG5cblx0XHRpZiBAY29udHJvbENsc1xuXHRcdFx0Y3QuYWRkQ2xhc3MoQGNvbnRyb2xDbHMpXG5cblx0XHRpZiBAcHJlcGVuZCB8fCBAYXBwZW5kIHx8IEBidXR0b25zLmxlbmd0aD4wIHx8IEB0aXBcblx0XHRcdGN0LmFkZENsYXNzKCdpbnB1dC1ncm91cCcpXG5cdFx0ZWxzZVxuXHRcdFx0Y3QuYWRkQ2xhc3MoJ2lucHV0LWNvbnRyb2wnKVxuXG5cdFx0aWYgQHByZXBlbmRcblx0XHRcdHNwYW4gPSBuZXcgRWxlbWVudCgnc3BhbicsIHtjbHM6J2lucHV0LWdyb3VwLWFkZG9uJywgaHRtbDogQHByZXBlbmR9KVxuXHRcdFx0c3Bhbi5pbmplY3QoY3QpXG5cdFx0XHRzcGFuLm9uICdjbGljaycsIChlKT0+IEBlbWl0KCdwcmVwZW5kY2xpY2snLCB0aGlzLCBlKVxuXG5cdFx0aW5wdXQucmVuZGVyKGN0KVxuXHRcdGlucHV0LnNldERpc2FibGVkKEBkaXNhYmxlZClcblxuXHRcdGlmIEBhcHBlbmRcblx0XHRcdHNwYW4gPSBuZXcgRWxlbWVudCgnc3BhbicsIHtjbHM6J2lucHV0LWdyb3VwLWFkZG9uJywgaHRtbDogQGFwcGVuZH0pXG5cdFx0XHRzcGFuLmluamVjdChjdClcblx0XHRcdHNwYW4ub24gJ2NsaWNrJywgKGUpPT4gQGVtaXQoJ2FwcGVuZGNsaWNrJywgdGhpcywgZSlcblxuXHRcdGlmIEBidXR0b25zLmxlbmd0aCBpc250IDBcblx0XHRcdEBidXR0b25zQ3QgPSBuZXcgRWxlbWVudCgnZGl2Jywge2NsczonaW5wdXQtZ3JvdXAtYnRuJ30pXG5cdFx0XHRAYnV0dG9uc0N0LmluamVjdChjdClcblx0XHRcdEBidXR0b25zLmVhY2ggKGJ1dHRvbikgPT4gYnV0dG9uLnJlbmRlcihAYnV0dG9uc0N0KVxuXG5cdFx0aWYgQHRpcFxuXHRcdFx0c3BhbiA9IG5ldyBFbGVtZW50KCdzcGFuJywge2NsczonaW5wdXQtZ3JvdXAtYWRkb24gaW5wdXQtZ3JvdXAtYWRkb24tdG9vbHRpcCcsIGh0bWw6ICc8c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tcXVlc3Rpb24tc2lnblwiIGRhdGEtdGl0bGU9XCInK0B0aXArJ1wiIGRhdGEtdG9nZ2xlPVwidG9vbHRpcFwiPjwvc3Bhbj4nfSlcblx0XHRcdHNwYW4uaW5qZWN0KGN0KVxuXHRcdFx0Y3QuYWRkQ2xhc3MoJ2lucHV0LXRvb2x0aXAnKVxuXG5cdFx0cmV0dXJuIGlucHV0XG5cblxuXHRhZnRlclJlbmRlcjogLT5cblx0XHRzdXBlcigpXG5cdFx0QGFmdGVyUmVuZGVyTGFiZWwoKVxuXHRcdEBhZnRlclJlbmRlckNvbnRyb2woKVxuXHRcdEBpbml0aWFsaXplQ29udHJvbCgpXG5cdFx0cmV0dXJuXG5cblxuXHRhZnRlclJlbmRlckxhYmVsOiAtPlxuXHRcdGlmIEBsYWJlbEVsICYmIEBpbnB1dC5nZXRJbnB1dElkXG5cdFx0XHRAbGFiZWxFbC5zZXQoJ2ZvcicsIEBpbnB1dC5nZXRJbnB1dElkKCkpXG5cdFx0cmV0dXJuXG5cblxuXHRhZnRlclJlbmRlckNvbnRyb2w6IC0+XG5cdFx0cmV0dXJuXG5cblxuXHRwYXJlbnRTaG93bjogKHBhcmVudCkgLT5cblx0XHRzdXBlcihwYXJlbnQpXG5cdFx0QGdldElucHV0KCkucGFyZW50U2hvd24ocGFyZW50KVxuXHRcdHJldHVyblxuXG5cblx0ZG9EZXN0cm95OiAtPlxuXHRcdEBpbnB1dC5kZXN0cm95KCkgaWYgQGlucHV0XG5cdFx0c3VwZXIoKVxuXHRcdHJldHVyblxuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBCYXNlQ29udHJvbCIsIkJhc2VDb250cm9sID0gcmVxdWlyZSAnLi9CYXNlQ29udHJvbCdcblxuXG5jbGFzcyBCYXNlSW5wdXRDb250cm9sIGV4dGVuZHMgQmFzZUNvbnRyb2xcblxuXG5cdHNldFZhbHVlOiAodmFsdWUsIG9ubHlDb250cm9sKSAtPlxuXHRcdHN1cGVyKHZhbHVlKVxuXHRcdEBpbnB1dC5zZXRWYWx1ZSh2YWx1ZSkgIGlmIEBpbnB1dCAmJiAhb25seUNvbnRyb2xcblx0XHRyZXR1cm4gdGhpc1xuXG5cblx0c2V0RGlzYWJsZWQ6IChkaXNhYmxlZCkgLT5cblx0XHRzdXBlcihkaXNhYmxlZClcblx0XHRAaW5wdXQuc2V0RGlzYWJsZWQoZGlzYWJsZWQpICBpZiBAaW5wdXRcblx0XHRyZXR1cm4gdGhpc1xuXG5cblx0c2V0UmVhZG9ubHk6IChAcmVhZG9ubHkpIC0+XG5cdFx0QGlucHV0LnNldFJlYWRvbmx5KEByZWFkb25seSkgIGlmIEBpbnB1dCAmJiBAaW5wdXQuc2V0UmVhZG9ubHlcblx0XHRyZXR1cm4gdGhpc1xuXG5cblx0YWZ0ZXJSZW5kZXJDb250cm9sOiAtPlxuXHRcdGlucHV0ID0gQGdldElucHV0KClcblx0XHRpbnB1dC5vbignZm9jdXMnLCBAYm91bmQoJ29uSW5wdXRGb2N1cycpKVxuXHRcdGlucHV0Lm9uKCdibHVyJywgQGJvdW5kKCdvbklucHV0Qmx1cicpKVxuXHRcdHJldHVyblxuXG5cblx0b25JbnB1dEZvY3VzOiAtPlxuXHRcdEBzZXRGb2N1cygpXG5cdFx0cmV0dXJuXG5cblxuXHRvbklucHV0Qmx1cjogLT5cblx0XHRAdmFsaWRhdGUoKVxuXHRcdEBibHVyKClcblx0XHRyZXR1cm5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IEJhc2VJbnB1dENvbnRyb2wiLCJCYXNlSW5wdXRDb250cm9sID0gcmVxdWlyZSAnLi9CYXNlSW5wdXRDb250cm9sJ1xuSGVscGVycyA9IHJlcXVpcmUgJy4vSGVscGVycydcblxuXG5jbGFzcyBCYXNlU2VsZWN0Q29udHJvbCBleHRlbmRzIEJhc2VJbnB1dENvbnRyb2xcblxuXHRpdGVtczogbnVsbFxuXHRzdG9yZTogbnVsbFxuXHRrZXlQcm9wZXJ0eTogbnVsbFxuXHR0ZXh0UHJvcGVydHk6IG51bGxcblx0cm93QnVpbGRlcjogbnVsbFxuXHRwcm9tcHQ6IGZhbHNlXG5cdGlucHV0OiBudWxsXG5cblxuXHRzZXRWYWx1ZTogKHZhbHVlKSAtPlxuXHRcdHN1cGVyKHZhbHVlKVxuXHRcdEBzZXRTZWxlY3RlZCh2YWx1ZSlcblx0XHRyZXR1cm5cblxuXG5cdHNldFNlbGVjdGVkOiAodmFsdWUpIC0+XG5cdFx0aWYgdmFsdWUgb3IgQHByb21wdFxuXHRcdFx0QGlucHV0LnNldFZhbHVlKHZhbHVlKSBpZiBAaW5wdXRcblx0XHRcdEBlbWl0KCdzZWxlY3RlZCcsIHRoaXMsIHZhbHVlKVxuXHRcdHJldHVyblxuXG5cblx0Z2V0SXRlbXM6IC0+XG5cdFx0cmV0dXJuIEhlbHBlcnMuY3JlYXRlU2VsZWN0SXRlbXModGhpcylcblxuXG5cdHNldEl0ZW1zOiAoaXRlbXMpIC0+XG5cdFx0SGVscGVycy5zZXRTZWxlY3RJdGVtcyh0aGlzLCBpdGVtcylcblx0XHRpZiAhQHByb21wdCBhbmQgQHZhbHVlIGlzbnQgbnVsbFxuXHRcdFx0QGlucHV0LnNldFZhbHVlKEBnZXRWYWx1ZSgpKVxuXHRcdHJldHVyblxuXG5cblx0YnVpbGRSb3dDb250ZW50OiAocm93KSAtPlxuXHRcdHJldHVybiBpZiBAcm93QnVpbGRlciB0aGVuIEByb3dCdWlsZGVyKHJvdykgZWxzZSBudWxsXG5cblxuXHRhZnRlclJlbmRlckNvbnRyb2w6IC0+XG5cdFx0c3VwZXIoKVxuXHRcdEBzZXRJdGVtcyhAZ2V0SXRlbXMoKSlcblx0XHRAaW5wdXQub24gJ2NoYW5nZScsIChpbnB1dCwgdmFsdWUpPT4gQHNldFZhbHVlKHZhbHVlKVxuXHRcdEBmb2N1c0VsID0gQGlucHV0LmZvY3VzRWxcblx0XHRyZXR1cm5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IEJhc2VTZWxlY3RDb250cm9sIiwiQmFzZUlucHV0Q29udHJvbCA9IHJlcXVpcmUgJy4vQmFzZUlucHV0Q29udHJvbCdcblRleHRJbnB1dCA9IHJlcXVpcmUgJy4uLy4uL2lucHV0L1RleHQnXG5cblxuY2xhc3MgQmFzZVRleHRDb250cm9sIGV4dGVuZHMgQmFzZUlucHV0Q29udHJvbFxuXG5cdHBsYWNlaG9sZGVyOiBudWxsXG5cdG1pbkxlbmd0aDogbnVsbFxuXHRtYXhMZW5ndGg6IG51bGxcblx0bGVuZ3RoOiBudWxsXG5cdGF1dG9jb21wbGV0ZTogbnVsbFxuXHRwYXR0ZXJuOiBudWxsXG5cdHJlYWRvbmx5OiBudWxsXG5cdG5vdGlmeUlucHV0Q2hhbmdlOiBmYWxzZVxuXHRzZXRWYWx1ZUlucHV0Q2hhbmdlOiB0cnVlXG5cdHZhbGlkYXRlT25LZXlVcDogZmFsc2Vcblx0cmVzZXRGb3JtT25Fc2M6IGZhbHNlXG5cdHZhbHVlOiAnJ1xuXHR0eXBlOiBudWxsXG5cdGlucHV0Q2xzOiBudWxsXG5cdGVkaXRhYmxlOiB0cnVlXG5cblxuXHRpbml0UnVsZXM6IC0+XG5cdFx0c3VwZXIoKVxuXHRcdEBydWxlcy5hZGRSdWxlKFwibWluTGVuZ3RoXCIsIG51bGwsIEBtaW5MZW5ndGgpICBpZiBAbWluTGVuZ3RoXG5cdFx0QHJ1bGVzLmFkZFJ1bGUoXCJtYXhMZW5ndGhcIiwgbnVsbCwgQG1heExlbmd0aCkgIGlmIEBtYXhMZW5ndGhcblx0XHRAcnVsZXMuYWRkUnVsZShcImxlbmd0aFwiLCBudWxsLCBAbGVuZ3RoKSAgaWYgQGxlbmd0aFxuXHRcdHJldHVyblxuXG5cblx0Y3JlYXRlSW5wdXQ6IC0+XG5cdFx0cmV0dXJuIG5ldyBUZXh0SW5wdXRcblx0XHRcdGlkOiBAaWQrJ0lucHV0J1xuXHRcdFx0dHlwZTogQHR5cGUgfHwgJ3RleHQnXG5cdFx0XHRuYW1lOiAnaW5wdXQnXG5cdFx0XHRjbHM6IEBpbnB1dENsc1xuXHRcdFx0aW5wdXROYW1lOiBAbmFtZVxuXHRcdFx0YXV0b2NvbXBsZXRlOiBAYXV0b2NvbXBsZXRlXG5cdFx0XHRwbGFjZWhvbGRlcjogQHBsYWNlaG9sZGVyXG5cdFx0XHRyZWFkb25seTogQHJlYWRvbmx5XG5cdFx0XHRkaXNhYmxlZDogQGRpc2FibGVkXG5cblxuXHRhZnRlclJlbmRlckNvbnRyb2w6IC0+XG5cdFx0c3VwZXIoKVxuXHRcdGlucHV0RWwgPSBAaW5wdXQuZ2V0SW5wdXRFbCgpXG5cdFx0aW5wdXRFbC5zZXQoXCJtaW5sZW5ndGhcIiwgQG1pbkxlbmd0aCkgaWYgQG1pbkxlbmd0aCBpc250IG51bGxcblx0XHRpbnB1dEVsLnNldChcIm1heGxlbmd0aFwiLCBAbWF4TGVuZ3RoKSBpZiBAbWF4TGVuZ3RoIGlzbnQgbnVsbFxuXHRcdGlucHV0RWwuc2V0KFwicmVxdWlyZWRcIiwgdHJ1ZSkgaWYgQGlzUmVxdWlyZWQoKVxuXG5cdFx0QG1vbihpbnB1dEVsLCAna2V5ZG93bicsICdvbklucHV0S2V5ZG93bicpXG5cdFx0QG1vbihpbnB1dEVsLCAna2V5dXAnLCAnb25JbnB1dEtleXVwJylcblx0XHRAbW9uKGlucHV0RWwsICdjaGFuZ2UnLCAnb25JbnB1dENoYW5nZScpXG5cdFx0QG1vbihpbnB1dEVsLCAnZm9jdXMnLCAnb25JbnB1dEZvY3VzJylcblx0XHRAbW9uKGlucHV0RWwsICdibHVyJywgJ29uSW5wdXRCbHVyJylcblxuXHRcdEBmb2N1c0VsID0gaW5wdXRFbFxuXHRcdHJldHVyblxuXG5cblx0b25JbnB1dENoYW5nZTogLT5cblx0XHRAc2V0VmFsdWUoQGdldFJhd1ZhbHVlKCksIHRydWUpICBpZiBAc2V0VmFsdWVJbnB1dENoYW5nZVxuXHRcdEBlbWl0KFwiaW5wdXRjaGFuZ2VcIiwgdGhpcywgQGdldFJhd1ZhbHVlKCkpICBpZiBAbm90aWZ5SW5wdXRDaGFuZ2Vcblx0XHRyZXR1cm5cblxuXG5cdG9uSW5wdXRLZXlkb3duOiAoZSkgLT5cblx0XHRpZiAhQGVkaXRhYmxlXG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCkgaWYgZS5rZXkubGVuZ3RoIGlzIDFcblx0XHRcdHJldHVyblxuXHRcdGlmIGUua2V5Lmxlbmd0aCBpcyAxXG5cdFx0XHRAb25LZXlkb3duKHRoaXMsIGUua2V5LCBlKVxuXHRcdFx0QGVtaXQoXCJrZXlkb3duXCIsIHRoaXMsIGUua2V5LCBlKVxuXHRcdFx0aWYgQHBhdHRlcm4gYW5kICFAcGF0dGVybi50ZXN0KGUua2V5KSB0aGVuIGUuc3RvcCgpXG5cdFx0ZWxzZVxuXHRcdFx0aWYgQHJlc2V0Rm9ybU9uRXNjICYmIGUua2V5IGlzICdlc2MnIHRoZW4gQGdldEZvcm0oKS5yZXNldCgpXG5cdFx0XHRAb25TcGVjaWFsa2V5KHRoaXMsIGUua2V5LCBlKVxuXHRcdFx0QGVtaXQoXCJzcGVjaWFsa2V5XCIsIHRoaXMsIGUua2V5LCBlKVxuXHRcdHJldHVyblxuXG5cblx0b25JbnB1dEtleXVwOiAoZSkgLT5cblx0XHRAbm90aWZ5RXJyb3JzID0gdHJ1ZSAjIGFmdGVyIGFueSBrZXl1cCBlbmFibGUgZXJyb3Igbm90aWZpY2F0aW9uXG5cdFx0QGVtaXQoXCJpbnB1dGNoYW5nZVwiLCB0aGlzLCBAZ2V0UmF3VmFsdWUoKSlcblxuXHRcdGlmIGUua2V5Lmxlbmd0aCBpcyAxXG5cdFx0XHRAb25LZXl1cCh0aGlzLCBlLmtleSwgZSlcblx0XHRcdEBlbWl0KFwia2V5dXBcIiwgdGhpcyxlLmtleSxlKVxuXHRcdFx0ZS5zdG9wKCkgIyBjYXB0dXJlZCBieSBjb250cm9sLCBkb250IHByb3BhZ2F0ZSB1cFxuXHRcdGVsc2Vcblx0XHRcdEBvblNwZWNpYWxrZXl1cCh0aGlzLCBlLmtleSwgZSlcblx0XHRcdEBlbWl0KFwic3BlY2lhbGtleXVwXCIsIHRoaXMsIGUua2V5LCBlKVxuXG5cdFx0IyBjaGFuZ2UgdmFsdWUgYWZ0ZXIgZXZlcnkga2V5ZG93biBpZiBjb250cm9sIGhhcyBlcnJvcnNcblx0XHRpZiBAaGFzRXJyb3JzKClcblx0XHRcdEB2YWxpZGF0ZU9uS2V5VXAgPSB0cnVlXG5cdFx0XHRAc2V0VmFsdWUoQGdldFJhd1ZhbHVlKCksIHRydWUpXG5cblx0XHQjIGlmIGVycm9yIG9jb3Vyc2UsIHZhbGlkYXRlIGFsd2F5cyBpZiBrZXkgdXBcblx0XHRpZiBAdmFsaWRhdGVPbktleVVwXG5cdFx0XHRAc2V0VmFsdWUoQGdldFJhd1ZhbHVlKCksIHRydWUpXG5cdFx0XHRAdmFsaWRhdGUoKVxuXHRcdHJldHVyblxuXG5cblx0b25TcGVjaWFsa2V5OiAoY29udHJvbCwga2V5LCBlKSAtPlxuXHRcdHJldHVyblxuXG5cblx0b25LZXlkb3duOiAoY29udHJvbCwga2V5LCBlKSAtPlxuXHRcdHJldHVyblxuXG5cblx0b25TcGVjaWFsa2V5dXA6IChjb250cm9sLCBrZXksIGUpIC0+XG5cdFx0cmV0dXJuXG5cblxuXHRvbktleXVwOiAoY29udHJvbCwga2V5LCBlKSAtPlxuXHRcdHJldHVyblxuXG5cbm1vZHVsZS5leHBvcnRzID0gQmFzZVRleHRDb250cm9sIiwiQmFzZUNvbnRyb2wgPSByZXF1aXJlICcuL0Jhc2VDb250cm9sJ1xuQnV0dG9uR3JvdXAgPSByZXF1aXJlICcuLi8uLi9idXR0b25zL0J1dHRvbkdyb3VwJ1xuXG5cbmNsYXNzIEJ1dHRvbkdyb3VwQ29udHJvbCBleHRlbmRzIEJhc2VDb250cm9sXG5cblx0eHR5cGU6IFwiYnV0dG9uZ3JvdXBmaWVsZFwiXG5cdGl0ZW1zOiBudWxsXG5cdHRvZ2dsZTogJ3JhZGlvJywgIyBjaGVja2JveFxuXG5cblx0c2V0VmFsdWU6ICh2YWx1ZSkgLT5cblx0XHRzdXBlcih2YWx1ZSlcblx0XHRpZiBAaW5wdXQudG9nZ2xlIGlzICdyYWRpbydcblx0XHRcdEBpbnB1dC5zZXRBY3RpdmUodmFsdWUsIHRydWUsIHRydWUpXG5cdFx0ZWxzZVxuXHRcdFx0QGlucHV0LnNldEFjdGl2ZUFsbChmYWxzZSwgdHJ1ZSkgIyBkZWFjdGl2YXRlIGFsbFxuXHRcdFx0aWYgVHlwZS5pc0FycmF5KHZhbHVlKVxuXHRcdFx0XHRAaW5wdXQuc2V0QWN0aXZlKHYsIHRydWUsIHRydWUpICBmb3IgdiBpbiB2YWx1ZVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHRAaW5wdXQuc2V0QWN0aXZlKHZhbHVlLCB0cnVlLCB0cnVlKVxuXHRcdHJldHVyblxuXG5cblx0Y3JlYXRlSW5wdXQ6ICgpIC0+XG5cdFx0cmV0dXJuIG5ldyBCdXR0b25Hcm91cFxuXHRcdFx0dG9nZ2xlOiBAdG9nZ2xlXG5cblxuXHRzZXRJdGVtczogKGl0ZW1zKSAtPlxuXHRcdEBpbnB1dC5yZW1vdmVDb21wb25lbnRzKClcblx0XHRmb3IgbmFtZSx0ZXh0IG9mIGl0ZW1zXG5cdFx0XHRAaW5wdXQuYWRkQnV0dG9uIG5hbWUsXG5cdFx0XHRcdHRleHQ6IHRleHRcblx0XHRyZXR1cm5cblxuXG5cdGFmdGVyUmVuZGVyQ29udHJvbDogKCkgLT5cblx0XHRAc2V0SXRlbXMoQGl0ZW1zKVxuXHRcdEBpbnB1dC5vbiAnYWN0aXZlJywgKCk9PlxuXHRcdFx0dmFsdWUgPSBbXVxuXHRcdFx0QGlucHV0LmdldEFjdGl2ZUJ1dHRvbnMoKS5lYWNoIChidG4pPT4gdmFsdWUucHVzaChidG4ubmFtZSlcblx0XHRcdEBzZXRWYWx1ZSh2YWx1ZSlcblx0XHRyZXR1cm5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IEJ1dHRvbkdyb3VwQ29udHJvbCIsIkJ1dHRvbiA9IHJlcXVpcmUgJy4uLy4uL2J1dHRvbnMvQnV0dG9uJ1xuXG5cbmNsYXNzIEJ1dHRvbkNvbnRyb2wgZXh0ZW5kcyBCdXR0b25cblxuXHRjb25zdHJ1Y3RvcjogKGNvbmZpZyA9IHt9KSAtPlxuXHRcdGlmIGNvbmZpZy5sYWJlbCB0aGVuIGNvbmZpZy50ZXh0ID0gY29uZmlnLmxhYmVsXG5cdFx0c3VwZXIoY29uZmlnKVxuXG5cblxuY2xhc3MgU3VibWl0QnV0dG9uIGV4dGVuZHMgQnV0dG9uQ29udHJvbFxuXG5cdGlzU3VibWl0QnV0dG9uOiB0cnVlXG5cdHh0eXBlOiAnc3VibWl0YnV0dG9uJ1xuXHR0eXBlOiAncHJpbWFyeSdcblxuXG5cbmNsYXNzIFJlc2V0QnV0dG9uIGV4dGVuZHMgQnV0dG9uQ29udHJvbFxuXG5cdGlzUmVzZXRCdXR0b246IHRydWVcblx0eHR5cGU6ICdzdWJtaXRidXR0b24nXG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9XG5cdEJ1dHRvbkNvbnRyb2w6IEJ1dHRvbkNvbnRyb2xcblx0U3VibWl0QnV0dG9uOiBTdWJtaXRCdXR0b25cblx0UmVzZXRCdXR0b246IFJlc2V0QnV0dG9uIiwiQmFzZUlucHV0Q29udHJvbCA9IHJlcXVpcmUgJy4vQmFzZUlucHV0Q29udHJvbCdcbkNoZWNrYm94ID0gcmVxdWlyZSAnLi4vLi4vaW5wdXQvQ2hlY2tib3gnXG5cblxuY2xhc3MgQ2hlY2tib3hDb250cm9sIGV4dGVuZHMgQmFzZUlucHV0Q29udHJvbFxuXG5cdHh0eXBlOiBcImNoZWNrYm94XCJcblx0dmFsdWU6IGZhbHNlXG5cdGlzQm94Q29udHJvbDogdHJ1ZVxuXG5cblx0Y3JlYXRlSW5wdXQ6IC0+XG5cdFx0Y2hlY2tib3ggPSBuZXcgQ2hlY2tib3hcblx0XHRcdGlkOiBAaWQrJ0lucHV0J1xuXHRcdFx0bGFiZWw6IEBsYWJlbFxuXHRcdGNoZWNrYm94Lm9uICdjaGFuZ2UnLCA9PlxuXHRcdFx0QHNldFZhbHVlKCFAZ2V0VmFsdWUoKSlcblx0XHRcdHJldHVyblxuXHRcdHJldHVybiBjaGVja2JveFxuXG5cblx0aXNDaGVja2VkOiAtPlxuXHRcdHJldHVybiBAdmFsdWUgaXMgdHJ1ZVxuXG5cblx0aXNGaWxsZWQ6IC0+XG5cdFx0cmV0dXJuIEBpc0NoZWNrZWQoKVxuXG5cblx0cmVuZGVyTGFiZWw6IC0+XG5cdFx0cmV0dXJuXG5cblxuXHRyZW5kZXJDb250cm9sOiAoY3QpIC0+XG5cdFx0Y3QuYWRkQ2xhc3MoJ2lucHV0LWNvbnRyb2wnKVxuXHRcdGlucHV0ID0gQGdldElucHV0KClcblx0XHRpbnB1dC5yZW5kZXIoY3QpXG5cdFx0cmV0dXJuXG5cblxuXHRhZnRlclJlbmRlckNvbnRyb2w6IC0+XG5cdFx0c3VwZXIoKVxuXHRcdEBlcnJvclRhcmdldEVsID0gQGlucHV0LmxhYmVsRWxcblx0XHRyZXR1cm5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IENoZWNrYm94Q29udHJvbCIsIkJhc2VDb250cm9sID0gcmVxdWlyZSAnLi9CYXNlQ29udHJvbCdcbkNoZWNrYm94TGlzdCA9IHJlcXVpcmUgJy4uLy4uL2lucHV0L0NoZWNrYm94TGlzdCdcbkhlbHBlcnMgPSByZXF1aXJlICcuL0hlbHBlcnMnXG5cblxuY2xhc3MgQ2hlY2tib3hMaXN0Q29udHJvbCBleHRlbmRzIEJhc2VDb250cm9sXG5cblx0eHR5cGU6IFwiY2hlY2tib3hsaXN0XCJcblx0aXRlbXM6IG51bGxcblx0aW5saW5lOiBmYWxzZVxuXHRpc0JveENvbnRyb2w6IHRydWVcblxuXG5cdGNyZWF0ZUlucHV0OiAoKSAtPlxuXHRcdHJldHVybiBuZXcgQ2hlY2tib3hMaXN0XG5cdFx0XHRpZDogQGlkKyctaW5wdXQnXG5cdFx0XHRpbmxpbmU6IEBpbmxpbmVcblxuXG5cdGdldEl0ZW1zOiAtPlxuXHRcdHJldHVybiBIZWxwZXJzLmNyZWF0ZUlucHV0SXRlbXModGhpcylcblxuXG5cdHNldEl0ZW1zOiAoaXRlbXMpIC0+XG5cdFx0SGVscGVycy5zZXRJbnB1dEl0ZW1zKHRoaXMsIGl0ZW1zKVxuXHRcdHJldHVyblxuXG5cblx0c2V0VmFsdWU6ICh2YWx1ZSkgLT5cblx0XHRAaW5wdXQuc2V0VmFsdWUodmFsdWUpXG5cdFx0c3VwZXIodmFsdWUpXG5cdFx0cmV0dXJuXG5cblxuXHRzZXREaXNhYmxlZDogKGRpc2FibGVkKSAtPlxuXHRcdEBpbnB1dC5zZXREaXNhYmxlZChkaXNhYmxlZClcblx0XHRzdXBlcihkaXNhYmxlZClcblx0XHRyZXR1cm5cblxuXG5cdHNldERpc2FibGVkSXRlbTogKG5hbWUsIGRpc2FibGVkKSAtPlxuXHRcdEBpbnB1dC5zZXREaXNhYmxlZChuYW1lLCBkaXNhYmxlZClcblx0XHRyZXR1cm5cblxuXG5cdHJlbmRlckNvbnRyb2w6IChjdCkgLT5cblx0XHRAZ2V0SW5wdXQoKS5yZW5kZXIoY3QpXG5cdFx0cmV0dXJuXG5cblxuXHRhZnRlclJlbmRlckNvbnRyb2w6ICgpIC0+XG5cdFx0QHNldEl0ZW1zKEBnZXRJdGVtcygpKVxuXHRcdEBpbnB1dC5zZXRWYWx1ZShAdmFsdWUpXG5cdFx0QGlucHV0LnNldERpc2FibGVkKEBkaXNhYmxlZClcblx0XHRAaW5wdXQub24gJ2NoYW5nZScsICgpPT4gQHNldFZhbHVlKEBpbnB1dC5nZXRWYWx1ZSgpKVxuXHRcdEBpbnB1dC5vbiAnYmx1cicsICgpPT4gQHZhbGlkYXRlKClcblx0XHRyZXR1cm5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IENoZWNrYm94TGlzdENvbnRyb2wiLCJCYXNlSW5wdXRDb250cm9sID0gcmVxdWlyZSAnLi9CYXNlSW5wdXRDb250cm9sJ1xuQ29sb3JJbnB1dCA9IHJlcXVpcmUgJy4uLy4uL2lucHV0L0NvbG9yJ1xuXG5cbmNsYXNzIENvbG9yQ29udHJvbCBleHRlbmRzIEJhc2VJbnB1dENvbnRyb2xcblxuXHR4dHlwZTogJ2NvbG9yZmllbGQnXG5cdHJlYWRvbmx5OiBmYWxzZVxuXHRyZXNldHRhYmxlOiBmYWxzZVxuXG5cblx0ZG9Jbml0OiAtPlxuXHRcdHN1cGVyXG5cdFx0aWYgQHZhbHVlIHRoZW4gQHZhbHVlID0gQHZhbHVlLnRvTG93ZXJDYXNlKClcblx0XHRyZXR1cm5cblxuXG5cdHNldFZhbHVlOiAodmFsdWUpIC0+XG5cdFx0dmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpIGlmIHZhbHVlXG5cdFx0c3VwZXIodmFsdWUpXG5cdFx0cmV0dXJuIHRoaXNcblxuXG5cdGNyZWF0ZUlucHV0OiAtPlxuXHRcdGlucHV0ID0gbmV3IENvbG9ySW5wdXRcblx0XHRcdGlkOiBAaWQrJ0lucHV0J1xuXHRcdFx0ZGlzYWJsZWQ6IEBkaXNhYmxlZFxuXHRcdFx0cmVhZG9ubHk6IEByZWFkb25seVxuXHRcdGlucHV0Lm9uICdjaGFuZ2VkJywgKGlucHV0LCB2YWx1ZSkgPT5cblx0XHRcdEBlbWl0KCdpbnB1dGNoYW5nZScsIHRoaXMsIHZhbHVlKVxuXHRcdFx0cmV0dXJuXG5cdFx0aW5wdXQub24gJ3NlbGVjdGVkJywgKGlucHV0LCB2YWx1ZSkgPT5cblx0XHRcdEBzZXRWYWx1ZSh2YWx1ZSlcblx0XHRcdHJldHVyblxuXHRcdGlucHV0Lm9uICdyZXNldCcsID0+XG5cdFx0XHRAcmVzZXQoKVxuXHRcdFx0cmV0dXJuXG5cdFx0cmV0dXJuIGlucHV0XG5cblxuXHRvbkRpcnR5Q2hhbmdlOiAoaXNEaXJ0eSkgLT5cblx0XHRzdXBlcihpc0RpcnR5KVxuXHRcdEBpbnB1dC5zZXRSZXNldHRhYmxlKGlzRGlydHkpIGlmIEByZXNldHRhYmxlXG5cdFx0cmV0dXJuXG5cblxuXHRpbml0UnVsZXM6IC0+XG5cdFx0c3VwZXIoKVxuXHRcdEBydWxlcy5hZGRSdWxlKFwiY29sb3JcIilcblx0XHRyZXR1cm5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbG9yQ29udHJvbCIsIkJhc2VTZWxlY3RDb250cm9sID0gcmVxdWlyZSAnLi9CYXNlU2VsZWN0Q29udHJvbCdcbkNvbWJvID0gcmVxdWlyZSAnLi4vLi4vaW5wdXQvQ29tYm8nXG5cblxuY2xhc3MgQ29tYm9Db250cm9sIGV4dGVuZHMgQmFzZVNlbGVjdENvbnRyb2xcblxuXHR4dHlwZTogJ2NvbWJvYm94J1xuXHRoaWRlU2VsZWN0ZWQ6IGZhbHNlXG5cdG11bHRpcGxlOiBmYWxzZVxuXHRoZWlnaHQ6IG51bGxcblx0cGxhY2Vob2xkZXI6ICcnXG5cdHByb21wdDogZmFsc2VcblxuXG5cdGNyZWF0ZUlucHV0OiAtPlxuXHRcdHJldHVybiBuZXcgQ29tYm9cblx0XHRcdGlkOiBAaWQrJ0lucHV0J1xuXHRcdFx0aGlkZVNlbGVjdGVkOiBAaGlkZVNlbGVjdGVkXG5cdFx0XHRtdWx0aXBsZTogQG11bHRpcGxlXG5cdFx0XHRoZWlnaHQ6IEBoZWlnaHRcblx0XHRcdHBsYWNlaG9sZGVyOiBAcGxhY2Vob2xkZXJcblx0XHRcdHByb21wdDogQHByb21wdFxuXG5cbm1vZHVsZS5leHBvcnRzID0gQ29tYm9Db250cm9sIiwiVGV4dENvbnRyb2wgPSByZXF1aXJlICcuL1RleHQnXG5EYXRlSW5wdXQgPSByZXF1aXJlICcuLi8uLi9pbnB1dC9EYXRlJ1xuXG5cbmNsYXNzIERhdGVDb250cm9sIGV4dGVuZHMgVGV4dENvbnRyb2xcblxuXHR4dHlwZTogXCJkYXRlZmllbGRcIlxuXHR0eXBlOiAnZGF0ZSdcblx0dmFsaWRhdGVPbkNoYW5nZTogZmFsc2Vcblx0c3RhcnREYXRlOiBudWxsXG5cdGVuZERhdGU6IG51bGxcblx0cGlja2VyQnRuOiBmYWxzZVxuXHR0b2RheUJ0bjogZmFsc2Vcblx0Y2xlYXJCdG46IGZhbHNlXG5cdHJlc2V0dGFibGU6IGZhbHNlXG5cdGVkaXRhYmxlOiBmYWxzZSAjIGJ5IGRlZmF1bHQgaXMgbm90IGVkaXRhYmxlLCBvbmx5IGJ5IHBpY2tlclxuXG5cdHJlc2V0QnRuOiBudWxsXG5cblxuXHRhZnRlckluaXQ6IC0+XG5cdFx0c3VwZXJcblx0XHRAYXBwZW5kID0gJzxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1jYWxlbmRhclwiPjwvc3Bhbj4nXG5cdFx0QGFkZFJlc2V0QnV0dG9uKCkgaWYgQHJlc2V0dGFibGVcblx0XHRyZXR1cm5cblxuXG5cdG9uRGlydHlDaGFuZ2U6IChpc0RpcnR5KSAtPlxuXHRcdEBnZXRCdXR0b24oJ3Jlc2V0Jykuc2V0RGlzYWJsZWQoIWlzRGlydHkpIGlmIEByZXNldHRhYmxlXG5cdFx0cmV0dXJuXG5cblxuXHRjcmVhdGVJbnB1dDogLT5cblx0XHRpbnB1dCA9IG5ldyBEYXRlSW5wdXRcblx0XHRcdGlkOiBAaWQrJy1pbnB1dCdcblx0XHRcdG5hbWU6IEBuYW1lXG5cdFx0XHR0eXBlOiBAdHlwZVxuXHRcdFx0ZGlzYWJsZWQ6IEBkaXNhYmxlZFxuXHRcdFx0cmVhZG9ubHk6IEByZWFkb25seVxuXHRcdFx0cGxhY2Vob2xkZXI6ICd5eXl5LW1tLWRkJ1xuXHRcdFx0c3RhcnREYXRlOiBAc3RhcnREYXRlXG5cdFx0XHRlbmREYXRlOiBAZW5kRGF0ZVxuXHRcdFx0dG9kYXlCdG46IEB0b2RheUJ0biB8fCBAcGlja2VyQnRuXG5cdFx0XHRjbGVhckJ0bjogQGNsZWFyQnRuIHx8IEBwaWNrZXJCdG5cblx0XHRpbnB1dC5vbiAnY2hhbmdlZCcsIChwaWNrZXIsIHZhbHVlKSA9PlxuXHRcdFx0QHNldFZhbHVlKHZhbHVlKVxuXHRcdFx0cmV0dXJuXG5cdFx0aW5wdXQub24gJ3Jlc2V0JywgPT5cblx0XHRcdEByZXNldCgpXG5cdFx0XHRyZXR1cm5cblx0XHRyZXR1cm4gaW5wdXRcblxuXG5cdGluaXRSdWxlczogLT5cblx0XHRzdXBlclxuXHRcdEBydWxlcy5hZGRSdWxlKFwiZGF0ZVwiKVxuXHRcdHJldHVyblxuXG5cblx0YWZ0ZXJSZW5kZXJDb250cm9sOiAtPlxuXHRcdHN1cGVyXG5cdFx0QGdldEVsZW1lbnQoJy5nbHlwaGljb24tY2FsZW5kYXInKS5nZXRQYXJlbnQoKVxuXHRcdFx0LnNldFN0eWxlKCdjdXJzb3InLCAncG9pbnRlcicpXG5cdFx0XHQub24gJ2NsaWNrJywgPT4gQGdldElucHV0KCkub3BlblBpY2tlcigpICMgb25seSBpZiBub3QgZGlzYWJsZWQgYW5kIG5vdCByZWFkb25seVxuXHRcdHJldHVyblxuXG5cbm1vZHVsZS5leHBvcnRzID0gRGF0ZUNvbnRyb2wiLCJCYXNlQ29udHJvbCA9IHJlcXVpcmUgJy4vQmFzZUNvbnRyb2wnXG5EYXRlUmFuZ2VJbnB1dCA9IHJlcXVpcmUgJy4uLy4uL2lucHV0L0RhdGVSYW5nZSdcblxuXG5jbGFzcyBEYXRlUmFuZ2VDb250cm9sIGV4dGVuZHMgQmFzZUNvbnRyb2xcblxuXHR4dHlwZTogXCJkYXRlcmFuZ2VcIlxuXHRyZWFkb25seTogZmFsc2Vcblx0c3RhcnREYXRlOiBudWxsXG5cdGVuZERhdGU6IG51bGxcblx0cGlja2VyQnRuOiBmYWxzZVxuXHR0b2RheUJ0bjogZmFsc2Vcblx0Y2xlYXJCdG46IGZhbHNlXG5cdHJlc2V0dGFibGU6IGZhbHNlXG5cdGVkaXRhYmxlOiBmYWxzZSAjIGJ5IGRlZmF1bHQgaXMgbm90IGVkaXRhYmxlLCBvbmx5IGJ5IHBpY2tlclxuXG5cblx0YWZ0ZXJJbml0OiAtPlxuXHRcdHN1cGVyXG5cdFx0QGFkZFJlc2V0QnV0dG9uKCkgaWYgQHJlc2V0dGFibGVcblx0XHRyZXR1cm5cblxuXG5cdG9uRGlydHlDaGFuZ2U6IChpc0RpcnR5KSAtPlxuXHRcdEBnZXRCdXR0b24oJ3Jlc2V0Jykuc2V0RGlzYWJsZWQoIWlzRGlydHkpIGlmIEByZXNldHRhYmxlXG5cdFx0cmV0dXJuXG5cblxuXHRjcmVhdGVJbnB1dDogLT5cblx0XHRpbnB1dCA9IG5ldyBEYXRlUmFuZ2VJbnB1dFxuXHRcdFx0aWQ6IEBpZCsnLWlucHV0J1xuXHRcdFx0bmFtZTogQG5hbWVcblx0XHRcdGRpc2FibGVkOiBAZGlzYWJsZWRcblx0XHRcdHJlYWRvbmx5OiBAcmVhZG9ubHlcblx0XHRcdHN0YXJ0RGF0ZTogQHN0YXJ0RGF0ZVxuXHRcdFx0ZW5kRGF0ZTogQGVuZERhdGVcblx0XHRcdHRvZGF5QnRuOiBAdG9kYXlCdG4gfHwgQHBpY2tlckJ0blxuXHRcdFx0Y2xlYXJCdG46IEBjbGVhckJ0biB8fCBAcGlja2VyQnRuXG5cdFx0aW5wdXQub24gJ2NoYW5nZWQnLCAocGlja2VyLCB2YWx1ZSkgPT5cblx0XHRcdEBzZXRWYWx1ZSh2YWx1ZSlcblx0XHRcdHJldHVyblxuXHRcdHJldHVybiBpbnB1dFxuXG5cblx0c2V0VmFsdWU6ICh2YWx1ZSkgLT5cblx0XHRAaW5wdXQuc2V0VmFsdWUodmFsdWUpXG5cdFx0c3VwZXIodmFsdWUpXG5cdFx0cmV0dXJuXG5cblxuXHRzZXREaXNhYmxlZDogKGRpc2FibGVkKSAtPlxuXHRcdEBpbnB1dC5zZXREaXNhYmxlZChkaXNhYmxlZClcblx0XHRzdXBlcihkaXNhYmxlZClcblx0XHRyZXR1cm5cblxuXG5cdGFmdGVyUmVuZGVyQ29udHJvbDogLT5cblx0XHRzdXBlclxuXHRcdEBpbnB1dC5lbC5hZGRDbGFzcygnaGFzLWFwcGVuZCcpICBpZiBAcmVzZXR0YWJsZVxuXHRcdHJldHVyblxuXG5cbm1vZHVsZS5leHBvcnRzID0gRGF0ZVJhbmdlQ29udHJvbCIsIkJhc2VDb250cm9sID0gcmVxdWlyZSAnLi9CYXNlQ29udHJvbCdcbkRyb3BTZWxlY3RJbnB1dCA9IHJlcXVpcmUgJy4uLy4uL2lucHV0L0Ryb3BTZWxlY3QnXG5cblxuY2xhc3MgRHJvcFNlbGVjdENvbnRyb2wgZXh0ZW5kcyBCYXNlQ29udHJvbFxuXG5cdHh0eXBlOiBcImRyb3BzZWxlY3RcIlxuXHRzdG9yZTogdW5kZWZpbmVkXG5cdGtleVByb3BlcnR5OiB1bmRlZmluZWRcblx0dGV4dFByb3BlcnR5OiB1bmRlZmluZWRcblx0c291cmNlVGl0bGU6IHVuZGVmaW5lZFxuXHR0YXJnZXRUaXRsZTogdW5kZWZpbmVkXG5cdHNvdXJjZUVtcHR5OiB1bmRlZmluZWRcblx0dGFyZ2V0RW1wdHk6IHVuZGVmaW5lZFxuXG5cdGNyZWF0ZUlucHV0OiAtPlxuXHRcdHJldHVybiBuZXcgRHJvcFNlbGVjdElucHV0XG5cdFx0XHRpZDogQGlkKyctaW5wdXQnXG5cdFx0XHRzdG9yZTogQHN0b3JlXG5cdFx0XHRrZXlQcm9wZXJ0eTogQGtleVByb3BlcnR5XG5cdFx0XHR0ZXh0UHJvcGVydHk6IEB0ZXh0UHJvcGVydHlcblx0XHRcdHNvdXJjZVRpdGxlOiBAc291cmNlVGl0bGVcblx0XHRcdHRhcmdldFRpdGxlOiBAdGFyZ2V0VGl0bGVcblx0XHRcdHNvdXJjZUVtcHR5OiBAc291cmNlRW1wdHlcblx0XHRcdHRhcmdldEVtcHR5OiBAdGFyZ2V0RW1wdHlcblxuXG5cdHNldFZhbHVlOiAodmFsdWUpIC0+XG5cdFx0QGlucHV0LnNldFZhbHVlKHZhbHVlLCB0cnVlKVxuXHRcdHN1cGVyKHZhbHVlKVxuXHRcdHJldHVyblxuXG5cblx0c2V0RGlzYWJsZWQ6IChkaXNhYmxlZCkgLT5cblx0XHRAaW5wdXQuc2V0RGlzYWJsZWQoZGlzYWJsZWQpXG5cdFx0c3VwZXIoZGlzYWJsZWQpXG5cdFx0cmV0dXJuXG5cblxuXHRyZW5kZXJDb250cm9sOiAoY3QpIC0+XG5cdFx0QGdldElucHV0KCkucmVuZGVyKGN0KVxuXHRcdHJldHVyblxuXG5cblx0YWZ0ZXJSZW5kZXJDb250cm9sOiAtPlxuXHRcdEBpbnB1dC5zZXRWYWx1ZShAdmFsdWUpXG5cdFx0QGlucHV0LnNldERpc2FibGVkKEBkaXNhYmxlZClcblx0XHRAaW5wdXQub24gJ2NoYW5nZScsID0+IEBzZXRWYWx1ZShAaW5wdXQuZ2V0VmFsdWUoKSlcblx0XHRyZXR1cm5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IERyb3BTZWxlY3RDb250cm9sIiwiY2xhc3MgSGVscGVyc1xuXG5cblx0QGNyZWF0ZVNlbGVjdEl0ZW1zOiAoY29udHJvbCkgLT5cblx0XHRpZiBjb250cm9sLml0ZW1zXG5cdFx0XHRyZXR1cm4gY29udHJvbC5pdGVtc1xuXG5cdFx0ZWxzZSBpZiBjb250cm9sLnN0b3JlXG5cdFx0XHRjb250cm9sLnN0b3JlID0gbWl3by5zdG9yZShjb250cm9sLnN0b3JlKVxuXG5cdFx0XHRpZiAhY29udHJvbC5rZXlQcm9wZXJ0eVxuXHRcdFx0XHRjb250cm9sLmtleVByb3BlcnR5ID0gJ2lkJ1xuXG5cdFx0XHRpZiAhY29udHJvbC50ZXh0UHJvcGVydHlcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5kZWZpbmVkIHRleHQgcHJvcGVydHlcIilcblxuXHRcdFx0aXRlbXMgPSB7fVxuXHRcdFx0Y29udHJvbC5zdG9yZS5lYWNoIChyb3cpID0+XG5cdFx0XHRcdGl0ZW1zW3Jvdy5nZXQoY29udHJvbC5rZXlQcm9wZXJ0eSldID1cblx0XHRcdFx0XHR0ZXh0OiByb3cuZ2V0KGNvbnRyb2wudGV4dFByb3BlcnR5KVxuXHRcdFx0XHRcdGNvbnRlbnQ6IGNvbnRyb2wuYnVpbGRSb3dDb250ZW50KHJvdylcblxuXHRcdFx0cmV0dXJuIGl0ZW1zXG5cblx0XHRlbHNlXG5cdFx0XHRyZXR1cm4ge31cblxuXG5cdEBzZXRTZWxlY3RJdGVtczogKGNvbnRyb2wsIGl0ZW1zKSAtPlxuXHRcdGlmICFjb250cm9sLmlucHV0IHRoZW4gcmV0dXJuXG5cdFx0aW5wdXQgPSBjb250cm9sLmlucHV0XG5cblx0XHRpbnB1dC5jbGVhcigpXG5cblx0XHRpZiBjb250cm9sLnByb21wdCAmJiBjb250cm9sLnJlcXVpcmVQcm9tcHRJdGVtXG5cdFx0XHRpbnB1dC5hZGRPcHRpb24oXCJcIiwgY29udHJvbC5wcm9tcHQpXG5cblx0XHRpZiBUeXBlLmlzQXJyYXkoaXRlbXMpXG5cdFx0XHRmb3IgdmFsdWUgaW4gaXRlbXNcblx0XHRcdFx0aW5wdXQuYWRkT3B0aW9uKHZhbHVlLCB2YWx1ZSlcblx0XHRlbHNlXG5cdFx0XHRmb3IgbmFtZSx2YWx1ZSBvZiBpdGVtc1xuXHRcdFx0XHRpZiBUeXBlLmlzT2JqZWN0KHZhbHVlKVxuXHRcdFx0XHRcdGlmIHZhbHVlLml0ZW1zXG5cdFx0XHRcdFx0XHRncm91cCA9IGlucHV0LmFkZEdyb3VwKHZhbHVlLnRpdGxlKVxuXHRcdFx0XHRcdFx0Zm9yIGluYW1lLGl2YWx1ZSBvZiB2YWx1ZS5pdGVtc1xuXHRcdFx0XHRcdFx0XHRpZiBUeXBlLmlzT2JqZWN0KGl2YWx1ZSlcblx0XHRcdFx0XHRcdFx0XHRncm91cC5hZGRPcHRpb24oaW5hbWUsIGl2YWx1ZS50ZXh0LCBpdmFsdWUuY29udGVudClcblx0XHRcdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0XHRcdGdyb3VwLmFkZE9wdGlvbihpbmFtZSwgaXZhbHVlKVxuXHRcdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRcdGlucHV0LmFkZE9wdGlvbihuYW1lLCB2YWx1ZS50ZXh0LCB2YWx1ZS5jb250ZW50KVxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0aW5wdXQuYWRkT3B0aW9uKG5hbWUsIHZhbHVlKVxuXHRcdHJldHVyblxuXG5cblx0QGNyZWF0ZUlucHV0SXRlbXM6IChjb250cm9sKSAtPlxuXHRcdGlmIGNvbnRyb2wuaXRlbXNcblx0XHRcdHJldHVybiBjb250cm9sLml0ZW1zXG5cblx0XHRlbHNlIGlmIGNvbnRyb2wuc3RvcmVcblx0XHRcdGNvbnRyb2wuc3RvcmUgPSBtaXdvLnN0b3JlKGNvbnRyb2wuc3RvcmUpXG5cblx0XHRcdGlmICFjb250cm9sLmtleVByb3BlcnR5XG5cdFx0XHRcdGNvbnRyb2wua2V5UHJvcGVydHkgPSAnaWQnXG5cblx0XHRcdGlmICFjb250cm9sLnRleHRQcm9wZXJ0eVxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbmRlZmluZWQgdGV4dCBwcm9wZXJ0eVwiKVxuXG5cdFx0XHRpdGVtcyA9IHt9XG5cdFx0XHRjb250cm9sLnN0b3JlLmVhY2ggKHJvdykgPT5cblx0XHRcdFx0aXRlbXNbcm93LmdldChjb250cm9sLmtleVByb3BlcnR5KV0gPVxuXHRcdFx0XHRcdHRleHQ6IHJvdy5nZXQoY29udHJvbC50ZXh0UHJvcGVydHkpXG5cdFx0XHRcdFx0Y29udGVudDogY29udHJvbC5idWlsZFJvd0NvbnRlbnQocm93KVxuXG5cdFx0XHRyZXR1cm4gaXRlbXNcblxuXHRcdGVsc2Vcblx0XHRcdHJldHVybiB7fVxuXG5cblx0QHNldElucHV0SXRlbXM6IChjb250cm9sLCBpdGVtcykgLT5cblx0XHRpZiAhY29udHJvbC5pbnB1dCB0aGVuIHJldHVyblxuXHRcdGlucHV0ID0gY29udHJvbC5pbnB1dFxuXHRcdGlucHV0LmNsZWFyKClcblxuXHRcdGlmIFR5cGUuaXNBcnJheShpdGVtcylcblx0XHRcdGZvciB2YWx1ZSBpbiBpdGVtc1xuXHRcdFx0XHRpbnB1dC5hZGRJdGVtKHZhbHVlLCB2YWx1ZSlcblx0XHRlbHNlXG5cdFx0XHRmb3IgbmFtZSx2YWx1ZSBvZiBpdGVtc1xuXHRcdFx0XHRpbnB1dC5hZGRJdGVtKG5hbWUsIHZhbHVlKVxuXHRcdHJldHVyblxuXG5cbm1vZHVsZS5leHBvcnRzID0gSGVscGVycyIsIlRleHRDb250cm9sID0gcmVxdWlyZSAnLi9UZXh0J1xuXG5cbmNsYXNzIE51bWJlckNvbnRyb2wgZXh0ZW5kcyBUZXh0Q29udHJvbFxuXG5cdHh0eXBlOiBcIm51bWJlcmZpZWxkXCJcblx0dHlwZTogJ251bWJlcidcblx0bWluOiBudWxsXG5cdG1heDogbnVsbFxuXHRwYXR0ZXJuOiAvW1xcZFxcLlxcLV0vXG5cblxuXHRzZXRWYWx1ZTogKHZhbHVlKSAtPlxuXHRcdHZhbHVlID0gQG1pbiAgaWYgQG1pbiBpc250IG51bGwgYW5kIHZhbHVlIDwgQG1pblxuXHRcdHZhbHVlID0gQG1heCAgaWYgQG1heCBpc250IG51bGwgYW5kIHZhbHVlID4gQG1heFxuXHRcdHN1cGVyKHZhbHVlKVxuXHRcdHJldHVyblxuXG5cblx0aW5pdFJ1bGVzOiAtPlxuXHRcdHN1cGVyKClcblx0XHRAcnVsZXMuYWRkUnVsZShcIm51bWJlclwiKVxuXHRcdEBydWxlcy5hZGRSdWxlKFwibWluXCIsIG51bGwsIEBtaW4pICBpZiBAbWluIGlzbnQgbnVsbFxuXHRcdEBydWxlcy5hZGRSdWxlKFwibWF4XCIsIG51bGwsIEBtYXgpICBpZiBAbWF4IGlzbnQgbnVsbFxuXHRcdHJldHVyblxuXG5cblx0Y3JlYXRlSW5wdXQ6IC0+XG5cdFx0aW5wdXQgPSBzdXBlcigpXG5cdFx0aW5wdXQuZWwuYWRkQ2xhc3MoXCJudW1iZXJcIilcblx0XHRpbnB1dC5lbC5zZXQoXCJtaW5cIiwgQG1pbikgIGlmIEBtaW4gaXNudCBudWxsXG5cdFx0aW5wdXQuZWwuc2V0KFwibWF4XCIsIEBtYXgpICBpZiBAbWF4IGlzbnQgbnVsbFxuXHRcdHJldHVybiBpbnB1dFxuXG5cbm1vZHVsZS5leHBvcnRzID0gTnVtYmVyQ29udHJvbCIsIkJhc2VDb250cm9sID0gcmVxdWlyZSAnLi9CYXNlQ29udHJvbCdcblJhZGlvTGlzdCA9IHJlcXVpcmUgJy4uLy4uL2lucHV0L1JhZGlvTGlzdCdcbkhlbHBlcnMgPSByZXF1aXJlICcuL0hlbHBlcnMnXG5cblxuY2xhc3MgUmFkaW9MaXN0Q29udHJvbCBleHRlbmRzIEJhc2VDb250cm9sXG5cblx0eHR5cGU6IFwicmFkaW9saXN0XCJcblx0aXRlbXM6IG51bGxcblx0aW5saW5lOiBmYWxzZVxuXHRpc0JveENvbnRyb2w6IHRydWVcblxuXG5cdGNyZWF0ZUlucHV0OiAtPlxuXHRcdHJldHVybiBuZXcgUmFkaW9MaXN0XG5cdFx0XHRpZDogQGlkKyctaW5wdXQnXG5cdFx0XHRpbmxpbmU6IEBpbmxpbmVcblx0XHRcdHJhZGlvTmFtZTogQG5hbWVcblxuXG5cdGdldEl0ZW1zOiAtPlxuXHRcdHJldHVybiBIZWxwZXJzLmNyZWF0ZUlucHV0SXRlbXModGhpcylcblxuXG5cdHNldEl0ZW1zOiAoaXRlbXMpIC0+XG5cdFx0SGVscGVycy5zZXRJbnB1dEl0ZW1zKHRoaXMsIGl0ZW1zKVxuXHRcdHJldHVyblxuXG5cblx0c2V0VmFsdWU6ICh2YWx1ZSkgLT5cblx0XHRAaW5wdXQuc2V0VmFsdWUodmFsdWUpXG5cdFx0c3VwZXIodmFsdWUpXG5cdFx0cmV0dXJuXG5cblxuXHRzZXREaXNhYmxlZDogKGRpc2FibGVkKSAtPlxuXHRcdEBpbnB1dC5zZXREaXNhYmxlZChkaXNhYmxlZClcblx0XHRzdXBlcihkaXNhYmxlZClcblx0XHRyZXR1cm5cblxuXG5cdHNldERpc2FibGVkSXRlbTogKG5hbWUsIGRpc2FibGVkKSAtPlxuXHRcdEBpbnB1dC5zZXREaXNhYmxlZChuYW1lLCBkaXNhYmxlZClcblx0XHRyZXR1cm5cblxuXG5cdHJlbmRlckNvbnRyb2w6IChjdCkgLT5cblx0XHRAZ2V0SW5wdXQoKS5yZW5kZXIoY3QpXG5cdFx0cmV0dXJuXG5cblxuXHRhZnRlclJlbmRlckNvbnRyb2w6IC0+XG5cdFx0QHNldEl0ZW1zKEBnZXRJdGVtcygpKVxuXHRcdEBpbnB1dC5zZXRWYWx1ZShAdmFsdWUpXG5cdFx0QGlucHV0LnNldERpc2FibGVkKEBkaXNhYmxlZClcblx0XHRAaW5wdXQub24gJ2NoYW5nZScsID0+IEBzZXRWYWx1ZShAaW5wdXQuZ2V0VmFsdWUoKSlcblx0XHRAaW5wdXQub24gJ2JsdXInLCA9PiBAdmFsaWRhdGUoKVxuXHRcdHJldHVyblxuXG5cbm1vZHVsZS5leHBvcnRzID0gUmFkaW9MaXN0Q29udHJvbCIsIkJhc2VTZWxlY3RDb250cm9sID0gcmVxdWlyZSAnLi9CYXNlU2VsZWN0Q29udHJvbCdcblNlbGVjdCA9IHJlcXVpcmUgJy4uLy4uL2lucHV0L1NlbGVjdCdcblxuXG5jbGFzcyBTZWxlY3RDb250cm9sIGV4dGVuZHMgQmFzZVNlbGVjdENvbnRyb2xcblxuXHR4dHlwZTogJ3NlbGVjdGJveCdcblx0cmVxdWlyZVByb21wdEl0ZW06IHRydWVcblxuXG5cdGNyZWF0ZUlucHV0OiAoKSAtPlxuXHRcdHJldHVybiBuZXcgU2VsZWN0XG5cdFx0XHRpZDogQGlkKyctaW5wdXQnXG5cblxubW9kdWxlLmV4cG9ydHMgPSBTZWxlY3RDb250cm9sIiwiQmFzZUlucHV0Q29udHJvbCA9IHJlcXVpcmUgJy4vQmFzZUlucHV0Q29udHJvbCdcblNsaWRlciA9IHJlcXVpcmUgJy4uLy4uL2lucHV0L1NsaWRlcidcblxuXG5jbGFzcyBTbGlkZXJDb250cm9sIGV4dGVuZHMgQmFzZUlucHV0Q29udHJvbFxuXG5cdHh0eXBlOiBcInNsaWRlclwiXG5cdG1pbjogMFxuXHRtYXg6IDEwMFxuXHRzdGVwOiAxXG5cdHZhbHVlOiAwXG5cdG1vZGU6ICdzbGlkZXInXG5cdGtub2JSZW5kZXJlcjogdW5kZWZpbmVkXG5cdHNlbGVjdGlvblJlbmRlcmVyOiB1bmRlZmluZWRcblxuXG5cdHNldFZhbHVlOiAodmFsdWUpIC0+XG5cdFx0QGlucHV0LnNldFZhbHVlKHZhbHVlKVxuXHRcdHN1cGVyKEBpbnB1dC5nZXRWYWx1ZSgpKSAjIHZhbHVlIGlzIGZpeGVkIGJ5IHNsaWRlclxuXHRcdHJldHVyblxuXG5cblx0Y3JlYXRlSW5wdXQ6IC0+XG5cdFx0aW5wdXQgPSBuZXcgU2xpZGVyXG5cdFx0XHRpZDogQGlkKydJbnB1dCdcblx0XHRcdG1vZGU6IEBtb2RlXG5cdFx0XHRpbnB1dE5hbWU6IEBuYW1lXG5cdFx0XHRzdGVwOiBAc3RlcFxuXHRcdFx0bWluOiBAbWluXG5cdFx0XHRtYXg6IEBtYXhcblx0XHRcdGtub2JSZW5kZXJlcjogQGtub2JSZW5kZXJlclxuXHRcdFx0c2VsZWN0aW9uUmVuZGVyZXI6IEBzZWxlY3Rpb25SZW5kZXJlclxuXG5cdFx0aW5wdXQub24gJ2NoYW5nZScsIChzbGlkZXIsIHZhbHVlKT0+XG5cdFx0XHRAc2V0VmFsdWUodmFsdWUpXG5cdFx0XHRyZXR1cm5cblxuXHRcdGlucHV0Lm9uICdzbGlkZScsIChzbGlkZXIsIHZhbHVlKT0+XG5cdFx0XHRAZW1pdCgnaW5wdXRjaGFuZ2UnLCB0aGlzLCB2YWx1ZSlcblx0XHRcdHJldHVyblxuXG5cdFx0cmV0dXJuIGlucHV0XG5cblxubW9kdWxlLmV4cG9ydHMgPSBTbGlkZXJDb250cm9sIiwiQmFzZVRleHRDb250cm9sID0gcmVxdWlyZSAnLi9CYXNlVGV4dENvbnRyb2wnXG5cblxuY2xhc3MgVGV4dENvbnRyb2wgZXh0ZW5kcyBCYXNlVGV4dENvbnRyb2xcblxuXHRpc1RleHRGaWVsZDogdHJ1ZVxuXHR4dHlwZTogJ3RleHRmaWVsZCdcblxuXG5cdGluaXRSdWxlczogIC0+XG5cdFx0c3VwZXIoKVxuXHRcdHN3aXRjaCBAdHlwZVxuXHRcdFx0d2hlbiAnZW1haWwnIHRoZW4gQHJ1bGVzLmFkZFJ1bGUoJ2VtYWlsJylcblx0XHRcdHdoZW4gJ3VybCcgdGhlbiBAcnVsZXMuYWRkUnVsZSgndXJsJylcblx0XHRcdHdoZW4gJ2RhdGUnIHRoZW4gQHJ1bGVzLmFkZFJ1bGUoJ2RhdGUnKVxuXHRcdHJldHVyblxuXG5cblx0b25TcGVjaWFsa2V5OiAoY29udHJvbCwga2V5LCBlKSAtPlxuXHRcdGlmIGtleSBpcyAnZW50ZXInXG5cdFx0XHRAc2V0VmFsdWUoQGdldFJhd1ZhbHVlKCksIHRydWUpXG5cdFx0cmV0dXJuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBUZXh0Q29udHJvbCIsIkJhc2VUZXh0Q29udHJvbCA9IHJlcXVpcmUgJy4vQmFzZVRleHRDb250cm9sJ1xuVGV4dEFyZWEgPSByZXF1aXJlICcuLi8uLi9pbnB1dC9UZXh0QXJlYSdcblxuXG5jbGFzcyBUZXh0QXJlYUNvbnRyb2wgZXh0ZW5kcyBCYXNlVGV4dENvbnRyb2xcblxuXHR4dHlwZTogXCJ0ZXh0YXJlYVwiXG5cdGlzVGV4dEFyZWFGaWVsZDogdHJ1ZVxuXHRoZWlnaHQ6IG51bGxcblx0cmVzaXplOiBcInZlcnRpY2FsXCJcblxuXG5cdGNyZWF0ZUlucHV0OiAtPlxuXHRcdGlucHV0ID0gbmV3IFRleHRBcmVhXG5cdFx0XHRpZDogQGlkKyctaW5wdXQnXG5cdFx0XHRpbnB1dE5hbWU6IEBuYW1lXG5cdFx0XHRoZWlnaHQ6IEBoZWlnaHRcblx0XHRcdHJlYWRvbmx5OiBAcmVhZG9ubHlcblx0XHRcdGRpc2FibGVkOiBAZGlzYWJsZWRcblx0XHRcdHJlc2l6ZTogQHJlc2l6ZVxuXHRcdFx0cGxhY2Vob2xkZXI6IEBwbGFjZWhvbGRlclxuXG5cdFx0QGhlaWdodCA9IG51bGxcblx0XHRyZXR1cm4gaW5wdXRcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFRleHRBcmVhQ29udHJvbCIsIkJhc2VDb250cm9sID0gcmVxdWlyZSAnLi9CYXNlQ29udHJvbCdcblRvZ2dsZUlucHV0ID0gcmVxdWlyZSAnLi4vLi4vaW5wdXQvVG9nZ2xlJ1xuXG5jbGFzcyBUb2dnbGVDb250cm9sIGV4dGVuZHMgQmFzZUNvbnRyb2xcblxuXHR4dHlwZTogJ3RvZ2dsZSdcblx0b25TdGF0ZTogdW5kZWZpbmVkXG5cdG9mZlN0YXRlOiB1bmRlZmluZWRcblx0b25UZXh0OiB1bmRlZmluZWRcblx0b2ZmVGV4dDogdW5kZWZpbmVkXG5cdHNpemU6IHVuZGVmaW5lZFxuXHR2YWx1ZTogZmFsc2VcblxuXG5cdGNyZWF0ZUlucHV0OiAtPlxuXHRcdHJldHVybiBuZXcgVG9nZ2xlSW5wdXRcblx0XHRcdGlkOiBAaWQrJy1pbnB1dCdcblx0XHRcdGlucHV0TmFtZTogQG5hbWVcblx0XHRcdHNpemU6IEBzaXplXG5cdFx0XHRvblN0YXRlOiBAb25TdGF0ZVxuXHRcdFx0b2ZmU3RhdGU6IEBvZmZTdGF0ZVxuXHRcdFx0b25UZXh0OiBAb25UZXh0XG5cdFx0XHRvZmZUZXh0OiBAb2ZmVGV4dFxuXG5cblx0c2V0VmFsdWU6ICh2YWx1ZSkgLT5cblx0XHRAaW5wdXQuc2V0VmFsdWUodmFsdWUpXG5cdFx0c3VwZXIodmFsdWUpXG5cdFx0cmV0dXJuXG5cblxuXHRzZXREaXNhYmxlZDogKGRpc2FibGVkKSAtPlxuXHRcdEBpbnB1dC5zZXREaXNhYmxlZChkaXNhYmxlZClcblx0XHRzdXBlcihkaXNhYmxlZClcblx0XHRyZXR1cm5cblxuXG5cdHNldFJlYWRvbmx5OiAocmVhZG9ubHkpIC0+XG5cdFx0QGlucHV0LnNldFJlYWRvbmx5KHJlYWRvbmx5KVxuXHRcdHJldHVyblxuXG5cblx0cmVuZGVyQ29udHJvbDogKGN0KSAtPlxuXHRcdEBnZXRJbnB1dCgpLnJlbmRlcihjdClcblx0XHRyZXR1cm5cblxuXG5cdGFmdGVyUmVuZGVyQ29udHJvbDogLT5cblx0XHRAaW5wdXQuc2V0VmFsdWUoQHZhbHVlKVxuXHRcdEBpbnB1dC5zZXREaXNhYmxlZChAZGlzYWJsZWQpXG5cdFx0QGlucHV0LnNldFJlYWRvbmx5KEByZWFkb25seSlcblx0XHRAaW5wdXQub24gJ2NoYW5nZScsID0+IEBzZXRWYWx1ZShAaW5wdXQuZ2V0VmFsdWUoKSlcblx0XHRyZXR1cm5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IFRvZ2dsZUNvbnRyb2wiLCJleHBvcnRzID1cblx0IyBjb21tb25cblx0UnVsZXM6IHJlcXVpcmUgJy4vUnVsZXMnXG5cdFZhbGlkYXRvcnM6IHJlcXVpcmUgJy4vVmFsaWRhdG9ycydcblxuXHQjIGNvbnRhaW5lcnNcblx0Y29udGFpbmVyOlxuXHRcdEJhc2VDb250YWluZXI6IHJlcXVpcmUgJy4vY29udGFpbmVyL0Jhc2VDb250YWluZXInXG5cdFx0RmllbGRzZXQ6IHJlcXVpcmUgJy4vY29udGFpbmVyL0ZpZWxkc2V0J1xuXHRcdEZvcm06IHJlcXVpcmUgJy4vY29udGFpbmVyL0Zvcm0nXG5cblx0IyByZW5kZXJlclxuXHRyZW5kZXI6XG5cdFx0Rm9ybVJlbmRlcmVyRmFjdG9yeTogcmVxdWlyZSAnLi9yZW5kZXIvRm9ybVJlbmRlcmVyRmFjdG9yeSdcblx0XHREZWZhdWx0UmVuZGVyZXI6IHJlcXVpcmUgJy4vcmVuZGVyL0RlZmF1bHRSZW5kZXJlcidcblx0XHRJbmxpbmVSZW5kZXJlcjogcmVxdWlyZSAnLi9yZW5kZXIvSW5saW5lUmVuZGVyZXInXG5cblx0IyBjb250cm9sc1xuXHRjb250cm9sOlxuXHRcdEJhc2VDb250cm9sOiByZXF1aXJlICcuL2NvbnRyb2wvQmFzZUNvbnRyb2wnXG5cdFx0QmFzZUlucHV0Q29udHJvbDogcmVxdWlyZSAnLi9jb250cm9sL0Jhc2VJbnB1dENvbnRyb2wnXG5cdFx0QmFzZVRleHRDb250cm9sOiByZXF1aXJlICcuL2NvbnRyb2wvQmFzZVRleHRDb250cm9sJ1xuXHRcdENoZWNrYm94OiByZXF1aXJlICcuL2NvbnRyb2wvQ2hlY2tib3gnXG5cdFx0Q2hlY2tib3hMaXN0OiByZXF1aXJlICcuL2NvbnRyb2wvQ2hlY2tib3hMaXN0J1xuXHRcdFJhZGlvTGlzdDogcmVxdWlyZSAnLi9jb250cm9sL1JhZGlvTGlzdCdcblx0XHRTZWxlY3Q6IHJlcXVpcmUoJy4vY29udHJvbC9TZWxlY3QnKVxuXHRcdENvbWJvOiByZXF1aXJlKCcuL2NvbnRyb2wvQ29tYm8nKVxuXHRcdENvbG9yOiByZXF1aXJlKCcuL2NvbnRyb2wvQ29sb3InKVxuXHRcdERhdGU6IHJlcXVpcmUoJy4vY29udHJvbC9EYXRlJylcblx0XHREYXRlUmFuZ2U6IHJlcXVpcmUoJy4vY29udHJvbC9EYXRlUmFuZ2UnKVxuXHRcdE51bWJlcjogcmVxdWlyZSgnLi9jb250cm9sL051bWJlcicpXG5cdFx0U2xpZGVyOiByZXF1aXJlKCcuL2NvbnRyb2wvU2xpZGVyJylcblx0XHRUZXh0OiByZXF1aXJlKCcuL2NvbnRyb2wvVGV4dCcpXG5cdFx0VGV4dEFyZWE6IHJlcXVpcmUoJy4vY29udHJvbC9UZXh0QXJlYScpXG5cdFx0VG9nZ2xlOiByZXF1aXJlKCcuL2NvbnRyb2wvVG9nZ2xlJylcblx0XHREcm9wU2VsZWN0OiByZXF1aXJlKCcuL2NvbnRyb2wvRHJvcFNlbGVjdCcpXG5cdFx0QnV0dG9uR3JvdXA6IHJlcXVpcmUoJy4vY29udHJvbC9CdXR0b25Hcm91cCcpXG5cdFx0QnV0dG9uOiByZXF1aXJlKCcuL2NvbnRyb2wvQnV0dG9ucycpLkJ1dHRvbkNvbnRyb2xcblx0XHRTdWJtaXRCdXR0b246IHJlcXVpcmUoJy4vY29udHJvbC9CdXR0b25zJykuU3VibWl0QnV0dG9uXG5cdFx0UmVzZXRCdXR0b246IHJlcXVpcmUoJy4vY29udHJvbC9CdXR0b25zJykuUmVzZXRCdXR0b25cblxuXG4jIHJlZ2lzdGVyIGFkZCBtZXRob2RcbkJhc2VDb250YWluZXIgPSBleHBvcnRzLmNvbnRhaW5lci5CYXNlQ29udGFpbmVyXG5CYXNlQ29udGFpbmVyLnJlZ2lzdGVyQ29udHJvbCgnY29udGFpbmVyJywgQmFzZUNvbnRhaW5lcilcbkJhc2VDb250YWluZXIucmVnaXN0ZXJDb250cm9sKCdkYXRlJywgZXhwb3J0cy5jb250cm9sLkRhdGUpXG5CYXNlQ29udGFpbmVyLnJlZ2lzdGVyQ29udHJvbCgnZGF0ZVJhbmdlJywgZXhwb3J0cy5jb250cm9sLkRhdGVSYW5nZSlcbkJhc2VDb250YWluZXIucmVnaXN0ZXJDb250cm9sKCd0ZXh0JywgZXhwb3J0cy5jb250cm9sLlRleHQpXG5CYXNlQ29udGFpbmVyLnJlZ2lzdGVyQ29udHJvbCgndGV4dGFyZWEnLCBleHBvcnRzLmNvbnRyb2wuVGV4dEFyZWEpXG5CYXNlQ29udGFpbmVyLnJlZ2lzdGVyQ29udHJvbCgnY29sb3InLCBleHBvcnRzLmNvbnRyb2wuQ29sb3IpXG5CYXNlQ29udGFpbmVyLnJlZ2lzdGVyQ29udHJvbCgnbnVtYmVyJywgZXhwb3J0cy5jb250cm9sLk51bWJlcilcbkJhc2VDb250YWluZXIucmVnaXN0ZXJDb250cm9sKCdzbGlkZXInLCBleHBvcnRzLmNvbnRyb2wuU2xpZGVyKVxuQmFzZUNvbnRhaW5lci5yZWdpc3RlckNvbnRyb2woJ2NvbWJvJywgZXhwb3J0cy5jb250cm9sLkNvbWJvKVxuQmFzZUNvbnRhaW5lci5yZWdpc3RlckNvbnRyb2woJ3NlbGVjdCcsIGV4cG9ydHMuY29udHJvbC5TZWxlY3QpXG5CYXNlQ29udGFpbmVyLnJlZ2lzdGVyQ29udHJvbCgnY2hlY2tib3gnLCBleHBvcnRzLmNvbnRyb2wuQ2hlY2tib3gpXG5CYXNlQ29udGFpbmVyLnJlZ2lzdGVyQ29udHJvbCgnY2hlY2tib3hMaXN0JywgZXhwb3J0cy5jb250cm9sLkNoZWNrYm94TGlzdClcbkJhc2VDb250YWluZXIucmVnaXN0ZXJDb250cm9sKCdyYWRpb0xpc3QnLCBleHBvcnRzLmNvbnRyb2wuUmFkaW9MaXN0KVxuQmFzZUNvbnRhaW5lci5yZWdpc3RlckNvbnRyb2woJ3RvZ2dsZScsIGV4cG9ydHMuY29udHJvbC5Ub2dnbGUpXG5CYXNlQ29udGFpbmVyLnJlZ2lzdGVyQ29udHJvbCgnZHJvcFNlbGVjdCcsIGV4cG9ydHMuY29udHJvbC5Ecm9wU2VsZWN0KVxuQmFzZUNvbnRhaW5lci5yZWdpc3RlckNvbnRyb2woJ2J1dHRvbkdyb3VwJywgZXhwb3J0cy5jb250cm9sLkJ1dHRvbkdyb3VwKVxuQmFzZUNvbnRhaW5lci5yZWdpc3RlckNvbnRyb2woJ2J1dHRvbicsIGV4cG9ydHMuY29udHJvbC5CdXR0b24pXG5CYXNlQ29udGFpbmVyLnJlZ2lzdGVyQ29udHJvbCgnc3VibWl0JywgZXhwb3J0cy5jb250cm9sLlN1Ym1pdEJ1dHRvbilcbkJhc2VDb250YWluZXIucmVnaXN0ZXJDb250cm9sKCdyZXNldCcsIGV4cG9ydHMuY29udHJvbC5SZXNldEJ1dHRvbilcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzIiwiY2xhc3MgRGVmYXVsdFJlbmRlcmVyIGV4dGVuZHMgTWl3by5PYmplY3RcblxuXHRmb3JtQ2xzOiAnaG9yaXpvbnRhbCdcblx0YmFzZUNvbFNpemU6IDhcblxuXG5cdHJlbmRlckZvcm06IChmb3JtKSAtPlxuXHRcdGlmIEBmb3JtQ2xzXG5cdFx0XHRmb3JtLmVsLmFkZENsYXNzKCdmb3JtLScrQGZvcm1DbHMpXG5cdFx0aWYgZm9ybS5wcmV2ZW50QXV0b0xvZ2luXG5cdFx0XHR1c2VybmFtZSA9IG5ldyBFbGVtZW50KCdpbnB1dCcsIHtuYW1lOidfdXNlcm5hbWUnLCBzdHlsZXM6e2Rpc3BsYXk6J25vbmUnfX0pXG5cdFx0XHR1c2VybmFtZS5pbmplY3QoZm9ybS5lbClcblx0XHRcdHVzZXJuYW1lID0gbmV3IEVsZW1lbnQoJ2lucHV0Jywge25hbWU6J19wYXNzd29yZCcsIHR5cGU6J3Bhc3N3b3JkJywgc3R5bGVzOntkaXNwbGF5Oidub25lJ319KVxuXHRcdFx0dXNlcm5hbWUuaW5qZWN0KGZvcm0uZWwpXG5cdFx0cmV0dXJuXG5cblxuXHRyZW5kZXJCdXR0b25zOiAoYnV0dG9ucywgY3QpIC0+XG5cdFx0Y3QuYWRkQ2xhc3MoJ2Zvcm0tYWN0aW9ucycpXG5cdFx0aWYgY3QuZ2VuZXJhdGVkICYmIEBiYXNlQ29sU2l6ZVxuXHRcdFx0Y3QuYWRkQ2xhc3MoXCJjb2wtc20tb2Zmc2V0LSN7MTItQGJhc2VDb2xTaXplfVwiKVxuXHRcdFx0Y3QuYWRkQ2xhc3MoXCJjb2wtc20tI3tAYmFzZUNvbFNpemV9XCIpXG5cdFx0Zm9yIGJ1dHRvbiBpbiBidXR0b25zXG5cdFx0XHRidXR0b24ucmVuZGVyKGN0KVxuXHRcdHJldHVyblxuXG5cblx0cmVuZGVyR3JvdXA6IChjb250cm9sLCBjdCkgLT5cblx0XHRpZiAhY29udHJvbC5ncm91cEVsXG5cdFx0XHRjb250cm9sLmdyb3VwRWwgPSBjb250cm9sLmVsXG5cdFx0XHRjb250cm9sLmdyb3VwRWwuaW5qZWN0KGN0KVxuXHRcdFx0Y29udHJvbC5ncm91cEVsLmFkZENsYXNzKCdmb3JtLWdyb3VwJylcblxuXHRcdGlmICFjb250cm9sLnZpc2libGVcblx0XHRcdGNvbnRyb2wuZ3JvdXBFbC5zZXRWaXNpYmxlKGZhbHNlKVxuXG5cdFx0Y29udHJvbC5lbCA9IGNvbnRyb2wuZ3JvdXBFbFxuXG5cdFx0aWYgIWNvbnRyb2wubGFiZWxSZW5kZXJlZFxuXHRcdFx0QHJlbmRlckxhYmVsKGNvbnRyb2wsIGNvbnRyb2wuZ3JvdXBFbClcblxuXHRcdGlmICFjb250cm9sLmNvbnRyb2xzUmVuZGVyZWRcblx0XHRcdEByZW5kZXJDb250cm9scyhjb250cm9sLCBjb250cm9sLmdyb3VwRWwpXG5cdFx0ZWxzZSBpZiAhY29udHJvbC5jb250cm9sUmVuZGVyZWRcblx0XHRcdEByZW5kZXJDb250cm9sKGNvbnRyb2wsIGNvbnRyb2wuY29udHJvbHNFbClcblx0XHRlbHNlIGlmICFjb250cm9sLmlucHV0UmVuZGVyZWRcblx0XHRcdGNvbnRyb2wuZ2V0SW5wdXQoKS5yZXBsYWNlKGNvbnRyb2wuaW5wdXRFbClcblx0XHRyZXR1cm5cblxuXG5cdHJlbmRlckxhYmVsOiAoY29udHJvbCwgY3QpIC0+XG5cdFx0bGFiZWxFbCA9IGNvbnRyb2wucmVuZGVyTGFiZWwoY3QpXG5cdFx0aWYgbGFiZWxFbFxuXHRcdFx0bGFiZWxFbC5hZGRDbGFzcygnY29udHJvbC1sYWJlbCcpXG5cdFx0XHRpZiBAYmFzZUNvbFNpemVcblx0XHRcdFx0bGFiZWxFbC5hZGRDbGFzcygnY29sLXNtLScrKDEyLUBiYXNlQ29sU2l6ZSkpXG5cdFx0cmV0dXJuXG5cblxuXHRyZW5kZXJDb250cm9sczogKGNvbnRyb2wsIGN0KSAtPlxuXHRcdGlmICFjb250cm9sLmNvbnRyb2xzRWxcblx0XHRcdGNvbnRyb2xzRWwgPSBuZXcgRWxlbWVudCgnZGl2Jylcblx0XHRcdGNvbnRyb2xzRWwuaW5qZWN0KGN0KVxuXHRcdFx0Y29udHJvbHNFbC5hZGRDbGFzcygnZm9ybS1jb250cm9scycpXG5cdFx0XHRpZiBAYmFzZUNvbFNpemVcblx0XHRcdFx0Y29udHJvbHNFbC5hZGRDbGFzcygnY29sLXNtLScrQGJhc2VDb2xTaXplKVxuXHRcdFx0Y29udHJvbC5jb250cm9sc0VsID0gY29udHJvbHNFbFxuXHRcdGNvbnRyb2xzRWwgPSBjb250cm9sLmNvbnRyb2xzRWxcblxuXHRcdCMgbGFiZWwgd2FzIG5vdCByZW5kZXJlZFxuXHRcdGlmICFjb250cm9sc0VsLmdldFByZXZpb3VzKCcuY29udHJvbC1sYWJlbCcpICYmIEBiYXNlQ29sU2l6ZVxuXHRcdFx0Y29udHJvbHNFbC5hZGRDbGFzcygnY29sLXNtLW9mZnNldC0nKygxMi1AYmFzZUNvbFNpemUpKVxuXG5cdFx0aWYgY29udHJvbC5oZWxwXG5cdFx0XHRoZWxwRWwgPSBuZXcgRWxlbWVudCBcInNwYW5cIixcblx0XHRcdFx0cGFyZW50OiBjb250cm9sc0VsXG5cdFx0XHRcdGNsczogXCJoZWxwLWJsb2NrXCJcblx0XHRcdFx0aHRtbDogY29udHJvbC5oZWxwXG5cdFx0XHRjb250cm9sLmhlbHBFbCA9IGhlbHBFbFxuXG5cdFx0QHJlbmRlckNvbnRyb2woY29udHJvbCwgY29udHJvbHNFbClcblxuXHRcdGlmIGNvbnRyb2wuZGVzY1xuXHRcdFx0ZGVzY0VsID0gbmV3IEVsZW1lbnQgXCJkaXZcIixcblx0XHRcdFx0cGFyZW50OiBjb250cm9sc0VsXG5cdFx0XHRcdGNsczogXCJoZWxwLWJsb2NrXCJcblx0XHRcdFx0aHRtbDogY29udHJvbC5kZXNjXG5cdFx0XHRjb250cm9sLmRlc2NFbCA9IGRlc2NFbFxuXHRcdHJldHVyblxuXG5cblx0cmVuZGVyQ29udHJvbDogKGNvbnRyb2wsIGN0KSAtPlxuXHRcdGlmICFjb250cm9sLmNvbnRyb2xFbFxuXHRcdFx0aW5wdXRDdCA9IG5ldyBFbGVtZW50KCdkaXYnKVxuXHRcdFx0aW5wdXRDdC5pbmplY3QoY3QpXG5cdFx0XHRjb250cm9sLmNvbnRyb2xFbCA9IGlucHV0Q3RcblxuXHRcdGNvbnRyb2wucmVuZGVyQ29udHJvbChjb250cm9sLmNvbnRyb2xFbClcblx0XHRyZXR1cm5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IERlZmF1bHRSZW5kZXJlciIsImNsYXNzIEZvcm1SZW5kZXJlckZhY3RvcnlcblxuXHRkZWZpbmVzOiBudWxsXG5cblxuXHRjb25zdHJ1Y3RvcjogKCkgLT5cblx0XHRAZGVmaW5lcyA9IHt9XG5cblxuXHRyZWdpc3RlcjogKG5hbWUsIGZuKSAtPlxuXHRcdEBkZWZpbmVzW25hbWVdID0gZm5cblx0XHRyZXR1cm5cblxuXG5cdGNyZWF0ZTogKHR5cGUsIG9wdGlvbnMpIC0+XG5cdFx0aWYgIUBkZWZpbmVzW3R5cGVdXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJSZXF1aXJlZCBmb3JtIHJlbmRlcmVyICcje3R5cGV9JyBpcyBub3QgcmVnaXN0ZXJlZCBpbiBGb3JtUmVuZGVyZXJGYWN0b3J5XCIpXG5cdFx0cmV0dXJuIG5ldyBAZGVmaW5lc1t0eXBlXShvcHRpb25zKVxuXG5cbm1vZHVsZS5leHBvcnRzID0gRm9ybVJlbmRlcmVyRmFjdG9yeSIsImNsYXNzIElubGluZVJlbmRlcmVyXG5cblx0b3B0aW9uczogbnVsbFxuXG5cblx0Y29uc3RydWN0b3I6ICgpIC0+XG5cdFx0QG9wdGlvbnMgPSB7fVxuXG5cblx0cmVuZGVyRm9ybTogKGZvcm0pIC0+XG5cdFx0Zm9ybS5lbC5hZGRDbGFzcygnZm9ybS1pbmxpbmUnKVxuXHRcdHJldHVyblxuXG5cblx0cmVuZGVyQnV0dG9uczogKGJ1dHRvbnMsIGN0KSAtPlxuXHRcdGZvciBidXR0b24gaW4gYnV0dG9ucyB0aGVuIGJ1dHRvbi5yZW5kZXIoY3QpXG5cdFx0cmV0dXJuXG5cblxuXHRyZW5kZXJHcm91cDogKGNvbnRyb2wsIGN0KSAtPlxuXHRcdGlmICFjb250cm9sLmdyb3VwRWxcblx0XHRcdGNvbnRyb2wuZ3JvdXBFbCA9IGNvbnRyb2wuZWxcblx0XHRcdGNvbnRyb2wuZ3JvdXBFbC5pbmplY3QoY3QpXG5cdFx0XHRjb250cm9sLmdyb3VwRWwuYWRkQ2xhc3MoJ2Zvcm0tZ3JvdXAnKVxuXG5cdFx0aWYgY29udHJvbC5pc0JveENvbnRyb2xcblx0XHRcdGNvbnRyb2wuZ3JvdXBFbC5hZGRDbGFzcygnbWFyZ2luLW5vJylcblxuXHRcdGlmICFjb250cm9sLmxhYmVsUmVuZGVyZWRcblx0XHRcdEByZW5kZXJMYWJlbChjb250cm9sLCBjb250cm9sLmdyb3VwRWwpXG5cblx0XHRpZiAhY29udHJvbC5jb250cm9sc1JlbmRlcmVkXG5cdFx0XHRAcmVuZGVyQ29udHJvbHMoY29udHJvbCwgY29udHJvbC5ncm91cEVsKVxuXHRcdGVsc2UgaWYgIWNvbnRyb2wuY29udHJvbFJlbmRlcmVkXG5cdFx0XHRAcmVuZGVyQ29udHJvbChjb250cm9sLCBjb250cm9sLmNvbnRyb2xzRWwpXG5cdFx0ZWxzZSBpZiAhY29udHJvbC5pbnB1dFJlbmRlcmVkXG5cdFx0XHRjb250cm9sLmdldElucHV0KCkucmVwbGFjZShjb250cm9sLmlucHV0RWwpXG5cdFx0cmV0dXJuXG5cblxuXHRyZW5kZXJMYWJlbDogKGNvbnRyb2wsIGN0KSAtPlxuXHRcdGxhYmVsRWwgPSBjb250cm9sLnJlbmRlckxhYmVsKGN0KVxuXHRcdGlmIGxhYmVsRWxcblx0XHRcdGxhYmVsRWwuYWRkQ2xhc3MoJ3NyLW9ubHknKVxuXHRcdHJldHVyblxuXG5cblx0cmVuZGVyQ29udHJvbHM6IChjb250cm9sLCBjdCkgLT5cblx0XHRpZiAhY29udHJvbC5jb250cm9sc0VsXG5cdFx0XHRjb250cm9sc0VsID0gbmV3IEVsZW1lbnQoJ2RpdicpXG5cdFx0XHRjb250cm9sc0VsLmluamVjdChjdClcblx0XHRcdGNvbnRyb2xzRWwuYWRkQ2xhc3MoJ2Zvcm0tY29udHJvbHMnKVxuXHRcdFx0Y29udHJvbC5jb250cm9sc0VsID0gY29udHJvbHNFbFxuXG5cdFx0QHJlbmRlckNvbnRyb2woY29udHJvbCwgY29udHJvbC5jb250cm9sc0VsKVxuXHRcdHJldHVyblxuXG5cblx0cmVuZGVyQ29udHJvbDogKGNvbnRyb2wsIGN0KSAtPlxuXHRcdGlmICFjb250cm9sLmNvbnRyb2xFbFxuXHRcdFx0aW5wdXRDdCA9IG5ldyBFbGVtZW50KCdkaXYnKVxuXHRcdFx0aW5wdXRDdC5pbmplY3QoY3QpXG5cdFx0XHRjb250cm9sLmNvbnRyb2xFbCA9IGlucHV0Q3RcblxuXHRcdGNvbnRyb2wucmVuZGVyQ29udHJvbChjb250cm9sLmNvbnRyb2xFbClcblx0XHRyZXR1cm5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IElubGluZVJlbmRlcmVyIiwiY2xhc3MgQWN0aW9uIGV4dGVuZHMgTWl3by5PYmplY3RcblxuXHRuYW1lOiBudWxsXG5cdHRleHQ6IG51bGxcblx0Y2FsbGJhY2s6IG51bGxcblx0aW5saW5lOiBmYWxzZVxuXHRjb25maXJtOiBmYWxzZVxuXHRjb25maXJtUGxhY2VtZW50OiBudWxsXG5cdGRpdmlkZXI6IGZhbHNlXG5cbm1vZHVsZS5leHBvcnRzID0gQWN0aW9uIiwiU2VsZWN0aW9uTW9kZWwgPSByZXF1aXJlICcuLi9zZWxlY3Rpb24vU2VsZWN0aW9uTW9kZWwnXG5HcmlkUmVuZGVyZXIgPSByZXF1aXJlICcuL3JlbmRlcmVyL0dyaWRSZW5kZXJlcidcbkNoZWNrZXJDb2x1bW4gPSByZXF1aXJlICcuL2NvbHVtbi9DaGVja2VyQ29sdW1uJ1xuQWN0aW9uQ29sdW1uID0gcmVxdWlyZSAnLi9jb2x1bW4vQWN0aW9uQ29sdW1uJ1xuT3BlcmF0aW9ucyA9IHJlcXVpcmUgJy4vT3BlcmF0aW9ucydcblBhZ2luYXRvciA9IHJlcXVpcmUgJy4uL3BhZ2luYXRpb24vUGFnaW5hdG9yJ1xuUGFuZSA9IHJlcXVpcmUgJy4uL3BhbmVsL1BhbmUnXG5cblxuY2xhc3MgR3JpZCBleHRlbmRzIFBhbmVcblxuXHQjIEBldmVudCByZW5kZXIgKGdyaWQpXG5cdCMgQGV2ZW50IHJlbmRlcmhlYWRlciAoZ3JpZCwgdGgsIGNvbHVtbilcblx0IyBAZXZlbnQgYmVmb3Jlcm93cmVuZGVyIChncmlkLCB0Ym9keSwgcmVjb3JkLCBpbmRleClcblx0IyBAZXZlbnQgcm93cmVuZGVyIChncmlkLCB0ciwgcmVjb3JkLCBpbmRleClcblx0IyBAZXZlbnQgYmVmb3JlY2VsbHJlbmRlciAoZ3JpZCwgdHIsIHZhbHVlLCByZWNvcmQpXG5cdCMgQGV2ZW50IGNlbGxyZW5kZXIgKGdyaWQsIHRkLCB2YWx1ZSwgcmVjb3JkKVxuXHQjIEBldmVudCBjZWxsY2xpY2sgKGdyaWQsIHRkLCByZWNvcmQsIGluZm8sIGUpXG5cdCMgQGV2ZW50IGNlbGxkYmxjbGljayAoZ3JpZCwgdGQsIHJlY29yZCwgaW5mbywgZSlcblx0IyBAZXZlbnQgZGVzdHJveXJvdyAoZ3JpZCwgdHIsIGluZGV4KVxuXHQjIEBldmVudCBkZXN0cm95Y2VsbCAoZ3JpZCwgdGQpXG5cdCMgQGV2ZW50IHJlZnJlc2ggKGdyaWQpXG5cdCMgQGV2ZW50IGFjdGlvbiAoZ3JpZCwgbmFtZSwgcmVjb3Jkcylcblx0IyBAZXZlbnQgc2VsZWN0aW9uY2hhbmdlIChncmlkLCBzbSwgc2VsZWN0aW9uKVxuXHQjIEBldmVudCBiZWZvcmVzeW5jIChncmlkLCBncm91cHMpXG5cdCMgQGV2ZW50IHN5bmMgKGdyaWQsIHBvc2l0aW9ucylcblx0IyBAZXZlbnQgYWZ0ZXJzeW5jIChncmlkKVxuXG5cdGlzR3JpZDogdHJ1ZVxuXHR4dHlwZTogJ2dyaWQnXG5cdGNvbmRlbnNlZDogZmFsc2Vcblx0c3RyaXBlOiBmYWxzZVxuXHRub3dyYXA6IHRydWVcblx0cm93Y2xpY2thYmxlOiBmYWxzZVxuXHRtYXNrT25Mb2FkOiBmYWxzZVxuXHR2ZXJ0aWNhbEFsaWduOiBudWxsICMgdG9wIG9yIG1pZGRsZShieSBkZWZhdWx0KVxuXHRzdG9yZTogbnVsbFxuXHRyZW5kZXJlcjogbnVsbFxuXHRzZWxlY3RhYmxlOiBmYWxzZVxuXHRzZWxlY3RvcjogXCJhdXRvXCJcblx0c2VsZWN0aW9uOiBcIm11bHRpXCJcblx0Z3JvdXBCeTogbnVsbFxuXHRwYWdpbmF0b3I6IGZhbHNlXG5cdCMgQGNmZyBzdHJpbmcgRGVmYXVsdCBhY3Rpb24gYnV0dG9uIHNpemUuIFlvdSBjYW4gc2V0IHNpemUgYnkgYm9vdHN0cmFwOiAneHMnLCAnc20nLCAuLi4gRGVmYXVsdCBpcyAnc20nXG5cdGFjdGlvbkJ0blNpemU6IG51bGxcblx0cm9sZTogJ2dyaWQnXG5cdHNpemU6ICdtZCdcblxuXHRsYXlvdXQ6IGZhbHNlXG5cdGJhc2VDbHM6IFwiZ3JpZFwiXG5cdGNoZWNrZXI6IG51bGxcblx0b3BlcmF0aW9uczogbnVsbFxuXHRzZWxlY3Rpb25Nb2RlbDogbnVsbFxuXHRoZWFkZXJFbDogbnVsbFxuXHRib2R5RWw6IG51bGxcblx0Zm9vdGVyRWw6IG51bGxcblx0bGFzdEFkZGVkQ29sdW1uOiBudWxsXG5cdGFjdGlvbkNvbHVtbkluZGV4OiAwXG5cblxuXHRAcmVnaXN0ZXJDb2x1bW46IChjb2x1bW5OYW1lLCBmbikgLT5cblx0XHRpZiAhZm4gdGhlbiB0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBpbiByZWdpc3RyeSBjb250cm9sICN7Y29udHJvbE5hbWV9LCBjb25zdHJ1Y3RvciBpcyB1bmRlZmluZWRcIilcblx0XHRhZGRNZXRob2QgPSAnYWRkJytjb2x1bW5OYW1lLmNhcGl0YWxpemUoKVxuXHRcdEBwcm90b3R5cGVbYWRkTWV0aG9kXSA9IChuYW1lLCBjb25maWcgPSB7fSkgLT5cblx0XHRcdHJldHVybiBAYWRkQ29sdW1uKG5hbWUsIG5ldyBmbihjb25maWcpKVxuXHRcdHJldHVyblxuXG5cblx0YWZ0ZXJJbml0OiAtPlxuXHRcdHN1cGVyXG5cdFx0aWYgQG1hc2tPbkxvYWRcblx0XHRcdEBzaG93TWFzaygpXG5cblx0XHRpZiBAc3RvcmVcblx0XHRcdGlmIFR5cGUuaXNTdHJpbmcoQHN0b3JlKVxuXHRcdFx0XHRAc2V0U3RvcmUobWl3by5zdG9yZShAc3RvcmUpKVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHRAc2V0U3RvcmUoQHN0b3JlKVxuXG5cdFx0aWYgQHJlbmRlcmVyXG5cdFx0XHRAcmVuZGVyZXJPcHRpb25zID0gQHJlbmRlcmVyXG5cdFx0XHRAcmVuZGVyZXIgPSBudWxsXG5cblx0XHRjb250ZW50RWwgPSBAZ2V0Q29udGVudEVsKClcblx0XHRjb250ZW50RWwuYWRkQ2xhc3MoQGdldEJhc2VDbHMoJ2NvbnRhaW5lcicpKVxuXG5cdFx0QGhlYWRlckVsID0gbmV3IEVsZW1lbnQgXCJkaXZcIixcblx0XHRcdHBhcmVudDogY29udGVudEVsXG5cdFx0XHRjbHM6IEBnZXRCYXNlQ2xzKFwiaGVhZGVyXCIpXG5cblx0XHRAbWFpbkVsID0gbmV3IEVsZW1lbnQgXCJkaXZcIixcblx0XHRcdHBhcmVudDogY29udGVudEVsXG5cdFx0XHRjbHM6IEBnZXRCYXNlQ2xzKFwibWFpblwiKVxuXG5cdFx0QGJvZHlFbCA9IG5ldyBFbGVtZW50IFwiZGl2XCIsXG5cdFx0XHRwYXJlbnQ6IEBtYWluRWxcblx0XHRcdGNsczogQGdldEJhc2VDbHMoXCJib2R5XCIpXG5cblx0XHRAZm9vdGVyRWwgPSBuZXcgRWxlbWVudCBcImRpdlwiLFxuXHRcdFx0cGFyZW50OiBjb250ZW50RWxcblx0XHRcdGNsczogQGdldEJhc2VDbHMoXCJmb290ZXJcIilcblxuXHRcdEBjb250ZW50RWwgPSBAYm9keUVsXG5cdFx0QHNjcm9sbGFibGVDdCA9IEBtYWluRWxcblx0XHRAc2Nyb2xsYWJsZUVsID0gQGJvZHlFbFxuXHRcdHJldHVyblxuXG5cblx0YWRkZWRDb21wb25lbnQ6IChjb2x1bW4pIC0+XG5cdFx0QGxhc3RBZGRlZENvbHVtbiA9IGNvbHVtblxuXHRcdHJldHVyblxuXG5cblx0YWRkQ29sdW1uOiAobmFtZSwgY29sdW1uKSAtPlxuXHRcdGlmICFjb2x1bW4uaXNDb2x1bW5cblx0XHRcdHRocm93IG5ldyBFcnJvcihcIk9iamVjdCBpcyBub3QgaW5zdGFuY2Ugb2YgY29sdW1uXCIpXG5cdFx0cmV0dXJuIEBhZGQobmFtZSwgY29sdW1uKVxuXG5cblx0YWRkQ2hlY2tlckNvbHVtbjogKG5hbWUsIGNvbmZpZykgLT5cblx0XHRyZXR1cm4gQGFkZENvbHVtbihuYW1lLCBuZXcgQ2hlY2tlckNvbHVtbihjb25maWcpKVxuXG5cblx0YWRkQWN0aW9uQ29sdW1uOiAobmFtZSwgY29uZmlnKSAtPlxuXHRcdHJldHVybiBAYWRkQ29sdW1uKG5hbWUsIG5ldyBBY3Rpb25Db2x1bW4oY29uZmlnKSlcblxuXG5cdGFkZE9wZXJhdGlvbjogKG5hbWUsIGNvbmZpZykgLT5cblx0XHRyZXR1cm4gQGdldE9wZXJhdGlvbnMoKS5hZGRBY3Rpb24obmFtZSwgY29uZmlnKVxuXG5cblx0YWRkQWN0aW9uOiAobmFtZSwgY29uZmlnKSAtPlxuXHRcdHJldHVybiBAZ2V0QWN0aW9uQ29sdW1uKCkuYWRkQWN0aW9uKG5hbWUsIGNvbmZpZylcblxuXG5cdGdldEFjdGlvbkNvbHVtbjogLT5cblx0XHRpZiAhQGxhc3RBZGRlZENvbHVtbi5pc0FjdGlvbkNvbHVtblxuXHRcdFx0QGFkZEFjdGlvbkNvbHVtbignYWN0aW9ucycrQGFjdGlvbkNvbHVtbkluZGV4KVxuXHRcdFx0QGFjdGlvbkNvbHVtbkluZGV4Kytcblx0XHRyZXR1cm4gQGxhc3RBZGRlZENvbHVtblxuXG5cblx0Z2V0T3BlcmF0aW9uczogLT5cblx0XHRpZiAhQG9wZXJhdGlvbnNcblx0XHRcdEBvcGVyYXRpb25zID0gbmV3IE9wZXJhdGlvbnModGhpcylcblx0XHRyZXR1cm4gQG9wZXJhdGlvbnNcblxuXG5cdGdldENvbHVtbnM6IC0+XG5cdFx0cmV0dXJuIEBnZXRDb21wb25lbnRzKCkudG9BcnJheSgpXG5cblxuXHRzZXRTZWxlY3Rpb25Nb2RlbDogKEBzZWxlY3Rpb25Nb2RlbCkgLT5cblx0XHRpZiAhQHN0b3JlIHRoZW4gdGhyb3cgbmV3IEVycm9yKFwiQmVmb3JlIHNldCBzZWxlY3Rpb24gbW9kZWwsIGZpcnN0IHNldCBzdG9yZVwiKVxuXHRcdEBzZWxlY3Rpb25Nb2RlbC5zZXRTdG9yZShAc3RvcmUpXG5cdFx0QG1vbihzZWxlY3Rpb25Nb2RlbCwgJ2NoYW5nZScsICdvblNlbGVjdGlvbk1vZGVsQ2hhbmdlJylcblx0XHRyZXR1cm5cblxuXG5cdGdldFNlbGVjdGlvbk1vZGVsOiAtPlxuXHRcdHJldHVybiBAc2VsZWN0aW9uTW9kZWxcblxuXG5cdG9uU2VsZWN0aW9uTW9kZWxDaGFuZ2U6IChzbSwgc2VsZWN0aW9uKSAtPlxuXHRcdEBlbWl0KCdzZWxlY3Rpb25jaGFuZ2UnLCB0aGlzLCBzbSwgc2VsZWN0aW9uKVxuXHRcdHJldHVyblxuXG5cblx0c2V0U2VsZWN0b3I6IChAc2VsZWN0b3IpIC0+XG5cdFx0QHNlbGVjdG9yLnNldEdyaWQodGhpcylcblx0XHRAc2VsZWN0b3Iuc2V0U2VsZWN0aW9uTW9kZWwoQGdldFNlbGVjdGlvbk1vZGVsKCkpXG5cdFx0cmV0dXJuXG5cblxuXHRvbk9wZXJhdGlvblN1Ym1pdDogKGFjdGlvbikgLT5cblx0XHRyZWNvcmRzID0gQGdldFNlbGVjdGlvbk1vZGVsKCkuZ2V0UmVjb3JkcygpXG5cdFx0YWN0aW9uLmNhbGxiYWNrKHJlY29yZHMpIGlmIGFjdGlvbi5jYWxsYmFja1xuXHRcdEBlbWl0KFwiYWN0aW9uXCIsIHRoaXMsIGFjdGlvbi5uYW1lLCByZWNvcmRzKVxuXHRcdHJldHVyblxuXG5cblx0b25BY3Rpb25TdWJtaXQ6IChhY3Rpb24sIHJlY29yZCkgLT5cblx0XHRhY3Rpb24uY2FsbGJhY2socmVjb3JkKSBpZiBhY3Rpb24uY2FsbGJhY2tcblx0XHRAZW1pdChcImFjdGlvblwiLCB0aGlzLCBhY3Rpb24ubmFtZSwgW3JlY29yZF0pXG5cdFx0cmV0dXJuXG5cblxuXHRzaG93TWFzazogLT5cblx0XHRpZiAhQGxvYWRNYXNrXG5cdFx0XHRAbG9hZE1hc2sgPSBtaXdvLm1hc2suY3JlYXRlKHRoaXMpXG5cdFx0QGxvYWRNYXNrLnNob3coKVxuXHRcdHJldHVyblxuXG5cblx0aGlkZU1hc2s6IC0+XG5cdFx0aWYgQGxvYWRNYXNrXG5cdFx0XHRAbG9hZE1hc2suaGlkZSgpXG5cdFx0cmV0dXJuXG5cblxuXHRzZXRTdG9yZTogKHN0b3JlKSAtPlxuXHRcdEBtdW5vbihAc3RvcmUsIHN0b3JlLCAnYWRkJywgJ29uU3RvcmVBZGQnKVxuXHRcdEBtdW5vbihAc3RvcmUsIHN0b3JlLCAncmVtb3ZlJywgJ29uU3RvcmVSZW1vdmUnKVxuXHRcdEBtdW5vbihAc3RvcmUsIHN0b3JlLCAncmVmcmVzaCcsICdvblN0b3JlUmVmcmVzaCcpXG5cdFx0QG11bm9uKEBzdG9yZSwgc3RvcmUsICd1cGRhdGUnLCAnb25TdG9yZVVwZGF0ZScpXG5cdFx0QG11bm9uKEBzdG9yZSwgc3RvcmUsICdiZWZvcmVsb2FkJywgJ29uU3RvcmVCZWZvcmVsb2FkJylcblx0XHRAbXVub24oQHN0b3JlLCBzdG9yZSwgJ2xvYWQnLCAnb25TdG9yZUxvYWQnKVxuXHRcdEBtdW5vbihAc3RvcmUsIHN0b3JlLCAncmVsb2FkJywgJ29uU3RvcmVSZWxvYWQnKVxuXHRcdEBzdG9yZSA9IHN0b3JlXG5cdFx0cmV0dXJuXG5cblxuXHRnZXRTdG9yZTogLT5cblx0XHRyZXR1cm4gQHN0b3JlXG5cblxuXHRvblN0b3JlQWRkOiAoc3RvcmUsIHJlY29yZCkgLT5cblx0XHRAcmVuZGVyZXIucmVjb3JkQWRkZWQocmVjb3JkKSAgaWYgQHJlbmRlcmVkXG5cdFx0cmV0dXJuXG5cblxuXHRvblN0b3JlUmVtb3ZlOiAoc3RvcmUsIHJlY29yZCkgLT5cblx0XHRAcmVuZGVyZXIucmVjb3JkUmVtb3ZlZChyZWNvcmQpICBpZiBAcmVuZGVyZWRcblx0XHRyZXR1cm5cblxuXG5cdG9uU3RvcmVVcGRhdGU6IChzdG9yZSwgcmVjb3JkKSAtPlxuXHRcdEByZW5kZXJlci5yZWNvcmRVcGRhdGVkKHJlY29yZCkgIGlmIEByZW5kZXJlZFxuXHRcdHJldHVyblxuXG5cblx0c2V0QXV0b1N5bmM6IChhdXRvU3luYykgLT5cblx0XHRAZ2V0UmVuZGVyZXIoKS5zZXRBdXRvU3luYyhhdXRvU3luYylcblx0XHRyZXR1cm5cblxuXG5cdG9uU3RvcmVSZWZyZXNoOiAtPlxuXHRcdEByZWZyZXNoKClcblx0XHRyZXR1cm5cblxuXG5cdG9uU3RvcmVCZWZvcmVsb2FkOiAtPlxuXHRcdEBsb2FkTWFzay5zaG93KCkgIGlmIEBsb2FkTWFzayAmJiBAbWFza09uTG9hZFxuXHRcdHJldHVyblxuXG5cblx0b25TdG9yZUxvYWQ6IC0+XG5cdFx0QHJlZnJlc2goKVxuXHRcdEBsb2FkTWFzay5oaWRlKCkgIGlmIEBsb2FkTWFza1xuXHRcdHJldHVyblxuXG5cblx0b25TdG9yZVJlbG9hZDogLT5cblx0XHRAcmVmcmVzaCgpXG5cdFx0QGxvYWRNYXNrLmhpZGUoKSAgaWYgQGxvYWRNYXNrXG5cdFx0cmV0dXJuXG5cblxuXHRyZWZyZXNoOiAtPlxuXHRcdEByZW5kZXJlci5yZWZyZXNoKCkgIGlmIEByZW5kZXJlZFxuXHRcdHJldHVyblxuXG5cblx0c3luYzogLT5cblx0XHRAcmVuZGVyZXIuc3luY1Jvd3MoKSAgaWYgQHJlbmRlcmVkXG5cdFx0cmV0dXJuXG5cblxuXHRnZXRSZWNvcmRzOiAtPlxuXHRcdHJldHVybiBAc3RvcmUuZ2V0UmVjb3JkcygpXG5cblxuXHRkb1JlbmRlcjogLT5cblx0XHRpZiBAc2VsZWN0YWJsZSBvciBAb3BlcmF0aW9uc1xuXHRcdFx0aWYgIUBzZWxlY3Rpb25Nb2RlbFxuXHRcdFx0XHRpZiBUeXBlLmlzU3RyaW5nKEBzZWxlY3Rpb24pXG5cdFx0XHRcdFx0Y29uZmlnID0ge3R5cGU6IEBzZWxlY3Rpb259XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRjb25maWcgPSBAc2VsZWN0aW9uIHx8IHt9XG5cdFx0XHRcdEBzZXRTZWxlY3Rpb25Nb2RlbChuZXcgU2VsZWN0aW9uTW9kZWwoY29uZmlnKSlcblxuXHRcdFx0aWYgIVR5cGUuaXNPYmplY3QoQHNlbGVjdG9yKSB8fCAhQHNlbGVjdG9yLmlzU2VsZWN0b3Jcblx0XHRcdFx0aWYgVHlwZS5pc1N0cmluZyhAc2VsZWN0b3IpXG5cdFx0XHRcdFx0dHlwZSA9IEBzZWxlY3RvclxuXHRcdFx0XHRcdGNvbmZpZyA9IG51bGxcblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdHR5cGUgPSBAc2VsZWN0b3IudHlwZVxuXHRcdFx0XHRcdGNvbmZpZyA9IEBzZWxlY3RvclxuXHRcdFx0XHRpZiB0eXBlIGlzICdhdXRvJ1xuXHRcdFx0XHRcdHR5cGUgPSBpZiBAb3BlcmF0aW9ucyB0aGVuICdjaGVjaycgZWxzZSAncm93J1xuXHRcdFx0XHRAc2V0U2VsZWN0b3IobWl3by5zZXJ2aWNlKCdzZWxlY3RvckZhY3RvcnknKS5jcmVhdGUodHlwZSwgY29uZmlnKSlcblxuXHRcdFx0aWYgQHNlbGVjdG9yLmNoZWNrZXJSZXF1aXJlZFxuXHRcdFx0XHRAY2hlY2tlciA9IEBhZGRDaGVja2VyQ29sdW1uKCdjaGVja2VyJylcblxuXHRcdEBnZXRSZW5kZXJlcigpLnJlbmRlcigpXG5cdFx0cmV0dXJuXG5cblxuXHRhZnRlclJlbmRlcjogLT5cblx0XHRzdXBlcigpXG5cdFx0QGdldFJlbmRlcmVyKCkuYWZ0ZXJSZW5kZXIoKVxuXHRcdCMgT24gcmVmcmVzaCBpcyBjYWxsZWQgd2hlbiBTdG9yZSBpcyBsb2FkZWQuIElmIFN0b3JlIHdhcyBsb2FkZWQgYmVmb3JlIGdyaWQgcmVuZGVyXG5cdFx0IyB0aGVuIGlzIG5lZWQgdG8gc2ltdWxhdGUgcmVmcmVzaCBldmVudCBieSBvblJlZnJlc2goKS5cblx0XHRAb25SZWZyZXNoKCkgaWYgQHN0b3JlLmxvYWRlZFxuXHRcdHJldHVyblxuXG5cblx0Z2V0UmVuZGVyZXI6IC0+XG5cdFx0aWYgIUByZW5kZXJlclxuXHRcdFx0QHJlbmRlcmVyID0gQGNyZWF0ZVJlbmRlcmVyKEByZW5kZXJlck9wdGlvbnMpXG5cdFx0cmV0dXJuIEByZW5kZXJlclxuXG5cblx0Y3JlYXRlUmVuZGVyZXI6IChvcHRpb25zKS0+XG5cdFx0cmV0dXJuIG5ldyBHcmlkUmVuZGVyZXIodGhpcywgb3B0aW9ucylcblxuXG5cdGNyZWF0ZUNvbXBvbmVudFBhZ2luYXRvcjogLT5cblx0XHRjb25maWcgPSBpZiBAcGFnaW5hdG9yIGlzIHRydWUgdGhlbiB7fSBlbHNlIEBwYWdpbmF0b3Jcblx0XHRwYWdpbmF0b3IgPSBuZXcgUGFnaW5hdG9yKGNvbmZpZylcblx0XHRwYWdpbmF0b3Iuc2V0U3RvcmUoQHN0b3JlKSBpZiBAc3RvcmVcblx0XHRyZXR1cm4gcGFnaW5hdG9yXG5cblxuXHRvblJlZnJlc2g6IC0+XG5cdFx0QGVtaXQoXCJyZWZyZXNoXCIsIHRoaXMpXG5cdFx0cmV0dXJuXG5cblxuXHRkb0Rlc3Ryb3k6IC0+XG5cdFx0QHJlbmRlcmVyLmRlc3Ryb3koKSBpZiBAcmVuZGVyZXJcblx0XHRAc2VsZWN0b3IuZGVzdHJveSgpIGlmIEBzZWxlY3RvclxuXHRcdEBzZWxlY3Rpb25Nb2RlbC5kZXN0cm95KCkgaWYgQHNlbGVjdGlvbk1vZGVsXG5cdFx0QHNlbGVjdGlvbk1vZGVsID0gbnVsbFxuXHRcdEByZW5kZXJlciA9IG51bGxcblx0XHRAc2VsZWN0b3IgPSBudWxsXG5cdFx0QHN0b3JlID0gbnVsbFxuXHRcdHN1cGVyXG5cblxubW9kdWxlLmV4cG9ydHMgPSBHcmlkIiwiQWN0aW9uID0gcmVxdWlyZSAnLi9BY3Rpb24nXG5CdXR0b24gPSByZXF1aXJlICcuLi9idXR0b25zL0J1dHRvbidcblNlbGVjdCA9IHJlcXVpcmUgJy4uL2lucHV0L1NlbGVjdCdcblBvcG92ZXJTdWJtaXQgPSByZXF1aXJlICcuL3V0aWxzL1BvcG92ZXJTdWJtaXQnXG5cblxuY2xhc3MgT3BlcmF0aW9ucyBleHRlbmRzIE1pd28uQ29tcG9uZW50XG5cblx0Y29tcG9uZW50Q2xzOiAnZ3JpZC1vcGVyYXRpb25zJ1xuXHRhY3Rpb25zOiBudWxsXG5cdHNlbGVjdDogbnVsbFxuXHRzdWJtaXQ6IG51bGxcblxuXG5cdGNvbnN0cnVjdG9yOiAoQGdyaWQsIGNvbmZpZyktPlxuXHRcdHN1cGVyKGNvbmZpZylcblx0XHRAYWN0aW9ucyA9IHt9XG5cblxuXHRhZGRBY3Rpb246IChuYW1lLCBjb25maWcpIC0+XG5cdFx0YWN0aW9uID0gbmV3IEFjdGlvbihjb25maWcpXG5cdFx0YWN0aW9uLm5hbWUgPSBuYW1lXG5cdFx0QGFjdGlvbnNbbmFtZV0gPSBhY3Rpb25cblx0XHRyZXR1cm4gYWN0aW9uXG5cblxuXHRkb1JlbmRlcjogKCkgLT5cblx0XHRAc2VsZWN0ID0gbmV3IFNlbGVjdCh7aWQ6QGlkKyctb3BlcmF0aW9uJ30pXG5cdFx0QHNlbGVjdC5yZW5kZXIoQGVsKVxuXHRcdEBzZWxlY3QuYWRkT3B0aW9uKGFjdGlvbi5uYW1lLCBhY3Rpb24udGV4dCkgIGZvciBuYW1lLGFjdGlvbiBvZiBAYWN0aW9uc1xuXG5cdFx0QHN1Ym1pdCA9IG5ldyBCdXR0b25cblx0XHRcdHRleHQ6IG1pd28udHIoXCJtaXdvLmdyaWQuZXhlY3V0ZVwiKVxuXHRcdFx0aGFuZGxlcjogPT5cblx0XHRcdFx0YWN0aW9uID0gQGFjdGlvbnNbQHNlbGVjdC5nZXRWYWx1ZSgpXVxuXHRcdFx0XHRAb25PcGVyYXRpb25TdWJtaXQoYWN0aW9uKVxuXHRcdFx0XHRyZXR1cm5cblx0XHRAc3VibWl0LnJlbmRlcihAZWwpXG5cdFx0cmV0dXJuXG5cblxuXHRvbk9wZXJhdGlvblN1Ym1pdDogKGFjdGlvbikgLT5cblx0XHRpZiAhYWN0aW9uLmNvbmZpcm1cblx0XHRcdEBncmlkLm9uT3BlcmF0aW9uU3VibWl0KGFjdGlvbilcblx0XHRlbHNlXG5cdFx0XHRAcG9wb3ZlciA9IG5ldyBQb3BvdmVyU3VibWl0XG5cdFx0XHRcdHJlbmRlclRvOiBtaXdvLmJvZHlcblx0XHRcdFx0dGFyZ2V0OiBAc3VibWl0LmVsXG5cdFx0XHRcdHRpdGxlOiBtaXdvLnRyKFwibWl3by5ncmlkLmNvbmZpcm1cIilcblx0XHRcdFx0cGxhY2VtZW50OiBhY3Rpb24uY29uZmlybVBsYWNlbWVudCB8fCAndG9wJ1xuXHRcdFx0XHRvblN1Ym1pdDogKCkgPT4gQGdyaWQub25PcGVyYXRpb25TdWJtaXQoYWN0aW9uKVxuXHRcdFx0QHBvcG92ZXIuc2hvdygpXG5cdFx0cmV0dXJuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBPcGVyYXRpb25zIiwiQ29sdW1uID0gcmVxdWlyZSAnLi9Db2x1bW4nXG5BY3Rpb24gPSByZXF1aXJlICcuLi9BY3Rpb24nXG5CdXR0b24gPSByZXF1aXJlICcuLi8uLi9idXR0b25zL0J1dHRvbidcbkRyb3Bkb3duQnV0dG9uID0gcmVxdWlyZSAnLi4vLi4vYnV0dG9ucy9Ecm9wZG93bkJ1dHRvbidcblBvcG92ZXJTdWJtaXQgPSByZXF1aXJlICcuLi91dGlscy9Qb3BvdmVyU3VibWl0J1xuXG5cbmNsYXNzIEFjdGlvbkNvbHVtbiBleHRlbmRzIENvbHVtblxuXG5cdHh0eXBlOiAnYWN0aW9uY29sdW1uJ1xuXHRhY3Rpb25zOiBudWxsXG5cdGFsaWduOiAncmlnaHQnXG5cdGNvbENsczogJ2FjdGlvbnMnXG5cdGlzQWN0aW9uQ29sdW1uOiB0cnVlXG5cdGJ0blNpemU6IG51bGxcblxuXHQjIGRpc2FibGUgdXBkYXRlIGNlbGwgaWYgcm93IGlzIHVwZGF0ZWRcblx0cHJldmVudFVwZGF0ZUNlbGw6IHRydWVcblxuXHRwb3BvdmVyOiBudWxsXG5cdHBvcG92ZXJDZWxsOiBudWxsXG5cblxuXHRjb25zdHJ1Y3RvcjogKCkgLT5cblx0XHRAYWN0aW9ucyA9IHt9XG5cblxuXHRhdHRhY2hlZENvbnRhaW5lcjogKGdyaWQpIC0+XG5cdFx0QGJ0blNpemUgPSBncmlkLmFjdGlvbkJ0blNpemUgfHwgJ3NtJyAgaWYgIUBidG5TaXplXG5cdFx0cmV0dXJuXG5cblxuXHRhZGRBY3Rpb246IChuYW1lLCBjb25maWcpIC0+XG5cdFx0YWN0aW9uID0gbmV3IEFjdGlvbihjb25maWcpXG5cdFx0YWN0aW9uLm5hbWUgPSBuYW1lXG5cdFx0QGFjdGlvbnNbbmFtZV0gPSBhY3Rpb25cblx0XHRyZXR1cm4gYWN0aW9uXG5cblxuXHRyZW1vdmVBY3Rpb246IChuYW1lKSAtPlxuXHRcdGRlbGV0ZSBAYWN0aW9uc1tuYW1lXVxuXHRcdHJldHVybiB0aGlzXG5cblxuXHRvblJlbmRlckNlbGw6ICh0ZCwgdmFsdWUsIHJlY29yZCwgcm93SW5kZXgpIC0+XG5cdFx0aW5saW5lID0gW11cblx0XHRsaXN0ID0gW11cblx0XHRidXR0b25zID0gW11cblxuXHRcdGZvciBuYW1lLCBhY3Rpb24gb2YgQGFjdGlvbnNcblx0XHRcdGlmIGFjdGlvbi5pbmxpbmVcblx0XHRcdFx0aW5saW5lLnB1c2goYWN0aW9uKVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHRsaXN0LnB1c2goYWN0aW9uKVxuXG5cdFx0Zm9yIGFjdGlvbiBpbiBpbmxpbmVcblx0XHRcdGJ0biA9IG5ldyBCdXR0b25cblx0XHRcdFx0c2l6ZTogQGJ0blNpemVcblx0XHRcdFx0bmFtZTogYWN0aW9uLm5hbWVcblx0XHRcdFx0dGV4dDogYWN0aW9uLnRleHRcblx0XHRcdFx0aGFuZGxlcjogKGJ0bikgPT5cblx0XHRcdFx0XHRAb25BY3Rpb25DbGljayhAYWN0aW9uc1tidG4ubmFtZV0sIHJlY29yZCwgdGQsIGJ0bilcblx0XHRcdFx0XHRyZXR1cm5cblx0XHRcdGJ0bi5yZW5kZXIodGQpXG5cdFx0XHRidXR0b25zLnB1c2goYnRuKVxuXG5cdFx0aWYgbGlzdC5sZW5ndGggPiAwXG5cdFx0XHRidG4gPSBuZXcgRHJvcGRvd25CdXR0b25cblx0XHRcdFx0c2l6ZTogQGJ0blNpemVcblx0XHRcdGZvciBhY3Rpb24gaW4gbGlzdFxuXHRcdFx0XHRidG4uYWRkRGl2aWRlcigpIGlmIGFjdGlvbi5kaXZpZGVyXG5cdFx0XHRcdGJ0bi5hZGRJdGVtIGFjdGlvbi5uYW1lLCBhY3Rpb24udGV4dCwgKGl0ZW0pPT5cblx0XHRcdFx0XHRAb25BY3Rpb25DbGljayhAYWN0aW9uc1tpdGVtLm5hbWVdLCByZWNvcmQsIHRkLCBidG4pXG5cdFx0XHRcdFx0cmV0dXJuXG5cdFx0XHRidG4ucmVuZGVyKHRkKVxuXHRcdFx0YnV0dG9ucy5wdXNoKGJ0bilcblxuXHRcdHRkLnN0b3JlKCdidXR0b25zJywgYnV0dG9ucylcblx0XHRyZXR1cm5cblxuXG5cdG9uRGVzdHJveUNlbGw6ICh0ZCkgLT5cblx0XHRidXR0b25zID0gdGQucmV0cmlldmUoJ2J1dHRvbnMnKVxuXHRcdGZvciBidXR0b24gaW4gYnV0dG9ucyB0aGVuIGJ1dHRvbi5kZXN0cm95KClcblx0XHR0ZC5lbGltaW5hdGUoJ2J1dHRvbnMnKVxuXHRcdGlmIEBwb3BvdmVyQ2VsbCAmJiBAcG9wb3ZlckNlbGwgaXMgdGQgdGhlbiBAY2xvc2VQb3BvdmVyKClcblx0XHRyZXR1cm5cblxuXG5cdG9uQWN0aW9uQ2xpY2s6IChhY3Rpb24sIHJlY29yZCwgdGQsIGJ0bikgLT5cblx0XHRpZiAhYWN0aW9uLmNvbmZpcm1cblx0XHRcdEBnZXRHcmlkKCkub25BY3Rpb25TdWJtaXQoYWN0aW9uLCByZWNvcmQpXG5cdFx0ZWxzZVxuXHRcdFx0QGNsb3NlUG9wb3ZlcigpXG5cdFx0XHRAcG9wb3ZlciA9IG5ldyBQb3BvdmVyU3VibWl0XG5cdFx0XHRcdHJlbmRlclRvOiBtaXdvLmJvZHlcblx0XHRcdFx0dGFyZ2V0OiBidG4uZWxcblx0XHRcdFx0dGl0bGU6IG1pd28udHIoXCJtaXdvLmdyaWQuY29uZmlybVwiKVxuXHRcdFx0XHRwbGFjZW1lbnQ6IGFjdGlvbi5jb25maXJtUGxhY2VtZW50IHx8ICdsZWZ0J1xuXHRcdFx0XHRvblN1Ym1pdDogKCk9PiBAZ2V0R3JpZCgpLm9uQWN0aW9uU3VibWl0KGFjdGlvbiwgcmVjb3JkKVxuXHRcdFx0XHRvbkNhbmNlbDogKCk9PiBAY2xvc2VQb3BvdmVyKClcblx0XHRcdEBwb3BvdmVyLnNob3coKVxuXHRcdFx0QHBvcG92ZXJDZWxsID0gdGRcblx0XHRyZXR1cm5cblxuXG5cdGNsb3NlUG9wb3ZlcjogKCkgLT5cblx0XHRpZiAhQHBvcG92ZXIgdGhlbiByZXR1cm5cblx0XHRAcG9wb3Zlci5kZXN0cm95KClcblx0XHRAcG9wb3ZlciA9IG51bGxcblx0XHRAcG9wb3ZlckNlbGwgPSBudWxsXG5cdFx0cmV0dXJuXG5cbm1vZHVsZS5leHBvcnRzID0gQWN0aW9uQ29sdW1uIiwiQ29sdW1uID0gcmVxdWlyZSAnLi9Db2x1bW4nXG5cblxuY2xhc3MgQ2hlY2tDb2x1bW4gZXh0ZW5kcyBDb2x1bW5cblxuXHR4dHlwZTogXCJjaGVja2NvbHVtblwiXG5cdGFsaWduOiBcImNlbnRlclwiXG5cdHdpZHRoOiA1MFxuXHRpY29uVHJ1ZTogXCJnbHlwaGljb24gZ2x5cGhpY29uLW9rXCJcblx0aWNvbkZhbHNlOiBcIlwiXG5cblxuXHRmb3JtYXRWYWx1ZTogKHZhbHVlKSAtPlxuXHRcdGlmIHZhbHVlXG5cdFx0XHRyZXR1cm4gKGlmIEBpY29uVHJ1ZSB0aGVuIFwiPGkgY2xhc3M9XFxcIlwiICsgQGljb25UcnVlICsgXCJcXFwiPjwvaT5cIiBlbHNlIFwiXCIpXG5cdFx0ZWxzZVxuXHRcdFx0cmV0dXJuIChpZiBAaWNvbkZhbHNlIHRoZW4gXCI8aSBjbGFzcz1cXFwiXCIgKyBAaWNvbkZhbHNlICsgXCJcXFwiPjwvaT5cIiBlbHNlIFwiXCIpXG5cblxubW9kdWxlLmV4cG9ydHMgPSBDaGVja0NvbHVtbiIsIkNvbHVtbiA9IHJlcXVpcmUgJy4vQ29sdW1uJ1xuQ2hlY2tib3ggPSByZXF1aXJlICcuLi8uLi9pbnB1dC9DaGVja2JveCdcblxuXG5jbGFzcyBDaGVja2VyQ29sdW1uIGV4dGVuZHMgQ29sdW1uXG5cblx0eHR5cGU6IFwiY2hlY2tlcmNvbHVtblwiXG5cdGFsaWduOiBcImNlbnRlclwiXG5cdHdpZHRoOiA1MFxuXHRjb2xDbHM6ICdjaGVja2VyJ1xuXHRpc0NoZWNrZXJDb2x1bW46IHRydWVcblx0QHJhbmRJZDogMFxuXG5cdCMgZGlzYWJsZSB1cGRhdGUgY2VsbCBpZiByb3cgaXMgdXBkYXRlZFxuXHRwcmV2ZW50VXBkYXRlQ2VsbDogdHJ1ZVxuXG5cblx0b25SZW5kZXJDZWxsOiAodGQsIHZhbHVlLCByZWNvcmQpIC0+XG5cdFx0Y2hlY2tib3ggPSBuZXcgQ2hlY2tib3hcblx0XHRcdGlkOiBAZ2V0R3JpZCgpLmlkLnRvU3RyaW5nKCkrXCItY2hlY2tlci1cIisocmVjb3JkLmlkIHx8ICdybmQnKyhDaGVja2VyQ29sdW1uLnJhbmRJZCsrKSlcblx0XHRjaGVja2JveC5yZW5kZXIodGQpXG5cdFx0Y2hlY2tib3gub24gJ2NoYW5nZScsIChjaGVja2VyLCB2YWx1ZSk9PlxuXHRcdFx0QGVtaXQoXCJyb3djaGVja1wiLCB0aGlzLCB0ZC5nZXRQYXJlbnQoJ3RyJyksIHZhbHVlKVxuXHRcdFx0cmV0dXJuXG5cdFx0dGQuc2V0KFwiZGlzYWJsZWNsaWNrXCIsIHRydWUpXG5cdFx0dGQuc3RvcmUoJ2NoZWNrZXInLCBjaGVja2JveClcblx0XHRyZXR1cm5cblxuXG5cdG9uRGVzdHJveUNlbGw6ICh0ZCkgLT5cblx0XHRjaGVja2JveCA9IHRkLnJldHJpZXZlKCdjaGVja2VyJylcblx0XHRjaGVja2JveC5kZXN0cm95KClcblx0XHR0ZC5lbGltaW5hdGUoJ2NoZWNrZXInKVxuXHRcdHJldHVyblxuXG5cblx0b25SZW5kZXJIZWFkZXI6ICh0aCkgLT5cblx0XHRjaGVja2JveCA9IG5ldyBDaGVja2JveFxuXHRcdFx0aWQ6IEBnZXRHcmlkKCkuaWQudG9TdHJpbmcoKSsnLWNoZWNrZXItYWxsJ1xuXHRcdGNoZWNrYm94LnJlbmRlcih0aClcblx0XHRjaGVja2JveC5vbiAnY2hhbmdlJywgKGNoZWNrZXIsIHZhbHVlKT0+XG5cdFx0XHRAZW1pdChcImhlYWRlcmNoZWNrXCIsIHRoaXMsIHZhbHVlKVxuXHRcdFx0cmV0dXJuXG5cdFx0dGguc3RvcmUoJ2NoZWNrZXInLCBjaGVja2JveClcblx0XHRyZXR1cm5cblxuXG5cdGdldFJvd0NoZWNrZXI6IChyZWNvcmQpIC0+XG5cdFx0Zm9yIHRyIGluIEBnZXRHcmlkKCkudGJvZHlFbC5nZXRDaGlsZHJlbigpXG5cdFx0XHRpZiB0ci5yZXRyaWV2ZSgncmVjb3JkJykgaXMgcmVjb3JkXG5cdFx0XHRcdHJldHVybiB0ci5nZXRFbGVtZW50KCd0ZC5ncmlkLWNvbC1jaGVja2VyJykucmV0cmlldmUoJ2NoZWNrZXInKVxuXHRcdHJldHVybiBudWxsXG5cblxuXHRnZXRIZWFkQ2hlY2tlcjogLT5cblx0XHRyZXR1cm4gQGdldEdyaWQoKS5oZWFkZXJFbC5nZXRFbGVtZW50KCd0cjpmaXJzdC1jaGlsZCB0aC5ncmlkLWNvbC1jaGVja2VyJykucmV0cmlldmUoJ2NoZWNrZXInKVxuXG5cblx0c2V0Q2hlY2tlZFJvdzogKHJlY29yZCwgY2hlY2tlZCkgLT5cblx0XHRAZ2V0Um93Q2hlY2tlcihyZWNvcmQpLnNldENoZWNrZWQoY2hlY2tlZClcblx0XHRyZXR1cm5cblxuXG5cdHNldERpc2FibGVkUm93OiAocmVjb3JkLCBkaXNhYmxlZCkgLT5cblx0XHRAZ2V0Um93Q2hlY2tlcihyZWNvcmQpLnNldERpc2FibGVkKGRpc2FibGVkKVxuXHRcdHJldHVyblxuXG5cblx0c2V0Q2hlY2tlZEhlYWRlcjogKGNoZWNrZWQpIC0+XG5cdFx0QGdldEhlYWRDaGVja2VyKCkuc2V0Q2hlY2tlZChjaGVja2VkKVxuXHRcdHJldHVyblxuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBDaGVja2VyQ29sdW1uIiwiY2xhc3MgQ29sdW1uIGV4dGVuZHMgTWl3by5Db21wb25lbnRcblxuXHRpc0NvbHVtbjogdHJ1ZVxuXHR0ZXh0OiAnJ1xuXHR0aXRsZTogJydcblx0dmlzaWJsZTogdHJ1ZVxuXHRzb3J0YWJsZTogZmFsc2Vcblx0cmVuZGVyZXI6IG51bGxcblx0YWxpZ246ICdsZWZ0J1xuXHRlbXB0eVRleHQ6ICcnXG5cdHdpZHRoVHlwZTogJ2F1dG8nXG5cdHdpZHRoOiBudWxsXG5cdGZpdDogbnVsbFxuXHRkYXRhSW5kZXg6ICcnXG5cdHRpdGxlSW5kZXg6IG51bGxcblxuXG5cdGFmdGVySW5pdDogLT5cblx0XHRzdXBlcigpXG5cdFx0aWYgQGZpdFxuXHRcdFx0QHdpZHRoVHlwZSA9ICdmaXQnXG5cdFx0XHRkZWxldGUgQGZpdFxuXHRcdHJldHVyblxuXG5cblx0Z2V0R3JpZDogLT5cblx0XHRyZXR1cm4gQGNvbnRhaW5lclxuXG5cblx0Z2V0RGF0YUluZGV4OiAtPlxuXHRcdHJldHVybiBAZGF0YUluZGV4IHx8IEBuYW1lXG5cblxuXHRyZW5kZXJIZWFkZXI6ICh2YWx1ZSwgcmVjb3JkKSAtPlxuXHRcdHJldHVybiBAdGV4dFxuXG5cblx0cmVuZGVyVmFsdWU6ICh2YWx1ZSwgcmVjb3JkKSAtPlxuXHRcdGlmIEByZW5kZXJlclxuXHRcdFx0aHRtbCA9IEByZW5kZXJlcih2YWx1ZSwgcmVjb3JkKVxuXHRcdGVsc2Vcblx0XHRcdGlmIHZhbHVlIGlzICcnIG9yIHZhbHVlIGlzIHVuZGVmaW5lZCBvciB2YWx1ZSBpcyBudWxsXG5cdFx0XHRcdGh0bWwgPSBAZW1wdHlUZXh0XG5cdFx0XHRlbHNlXG5cdFx0XHRcdGh0bWwgPSBAZm9ybWF0VmFsdWUodmFsdWUsIHJlY29yZClcblx0XHRyZXR1cm4gaHRtbFxuXG5cblx0Zm9ybWF0VmFsdWU6ICh2YWx1ZSwgcmVjb3JkKSAtPlxuXHRcdHJldHVybiB2YWx1ZVxuXG5cblx0YWZ0ZXJSZW5kZXI6IChyZW5kZXJlciwgZ3JpZCkgLT5cblx0XHRyZXR1cm5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbHVtbiIsIkNvbHVtbiA9IHJlcXVpcmUgJy4vQ29sdW1uJ1xuXG5cbmNsYXNzIERhdGVDb2x1bW4gZXh0ZW5kcyBDb2x1bW5cblxuXHR4dHlwZTogJ2RhdGVjb2x1bW4nXG5cdGFsaWduOiAncmlnaHQnXG5cdGVtcHR5VGV4dDogJ04vQSdcblx0Zm9ybWF0OiAnJWMnXG5cblxuXHRmb3JtYXRWYWx1ZTogKHZhbHVlLCByZWNvcmQpIC0+XG5cdFx0aWYgVHlwZS5pc0RhdGUodmFsdWUpXG5cdFx0XHRyZXR1cm4gaWYgdmFsdWUuZm9ybWF0IHRoZW4gdmFsdWUuZm9ybWF0KHRoaXMuZm9ybWF0KSBlbHNlIHZhbHVlLnRvRGF0ZVN0cmluZygpXG5cdFx0ZWxzZVxuXHRcdFx0cmV0dXJuIHZhbHVlXG5cblxubW9kdWxlLmV4cG9ydHMgPSBEYXRlQ29sdW1uIiwiQ29sdW1uID0gcmVxdWlyZSAnLi9Db2x1bW4nXG5cblxuY2xhc3MgTnVtYmVyQ29sdW1uIGV4dGVuZHMgQ29sdW1uXG5cblx0eHR5cGU6ICdudW1iZXJjb2x1bW4nXG5cdGFsaWduOiAncmlnaHQnXG5cblxubW9kdWxlLmV4cG9ydHMgPSBOdW1iZXJDb2x1bW4iLCJDb2x1bW4gPSByZXF1aXJlICcuL0NvbHVtbidcblxuXG5jbGFzcyBUZXh0Q29sdW1uIGV4dGVuZHMgQ29sdW1uXG5cblx0eHR5cGU6ICd0ZXh0Y29sdW1uJ1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBUZXh0Q29sdW1uIiwiQ29sdW1uID0gcmVxdWlyZSAnLi9Db2x1bW4nXG5Ub2dnbGVJbnB1dCA9IHJlcXVpcmUgJy4uLy4uL2lucHV0L1RvZ2dsZSdcblxuXG5jbGFzcyBUb2dnbGVDb2x1bW4gZXh0ZW5kcyBDb2x1bW5cblxuXHR4dHlwZTogJ3RvZ2dsZWNvbHVtbidcblx0YWxpZ246J2NlbnRlcidcblx0d2lkdGg6IDExMFxuXHRvblN0YXRlOiB1bmRlZmluZWRcblx0b2ZmU3RhdGU6IHVuZGVmaW5lZFxuXHRvblRleHQ6IHVuZGVmaW5lZFxuXHRvZmZUZXh0OiB1bmRlZmluZWRcblx0c2l6ZTogdW5kZWZpbmVkXG5cblx0cmVuZGVyVmFsdWU6ICh2YWx1ZSwgcm93KSAtPlxuXHRcdGlucHV0ID0gbmV3IFRvZ2dsZUlucHV0XG5cdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdG9uU3RhdGU6IEBvblN0YXRlXG5cdFx0XHRvZmZTdGF0ZTogQG9mZlN0YXRlXG5cdFx0XHRvblRleHQ6IEBvblRleHRcblx0XHRcdG9mZlRleHQ6IEBvZmZUZXh0XG5cdFx0XHRzaXplOiBAc2l6ZVxuXHRcdGlucHV0Lm9uICdiZWZvcmVjaGFuZ2UnLCA9PlxuXHRcdFx0QGVtaXQoJ2JlZm9yZWNoYW5nZScsIHRoaXMsIGlucHV0LCByb3cpXG5cdFx0XHRyZXR1cm5cblx0XHRpbnB1dC5vbiAnY2hhbmdlJywgPT5cblx0XHRcdHJvdy5zZXQoQGdldERhdGFJbmRleCgpLCBpbnB1dC5nZXRWYWx1ZSgpKVxuXHRcdFx0cmV0dXJuXG5cdFx0cmV0dXJuIGlucHV0XG5cblxubW9kdWxlLmV4cG9ydHMgPSBUb2dnbGVDb2x1bW5cbiIsImV4cG9ydHMgPVxuXG5cdEdyaWQ6IHJlcXVpcmUgKCcuL0dyaWQnKVxuXHRBY3Rpb246IHJlcXVpcmUgKCcuL0FjdGlvbicpXG5cdE9wZXJhdGlvbnM6IHJlcXVpcmUgKCcuL09wZXJhdGlvbnMnKVxuXG5cdGNvbHVtbjpcblx0XHRDb2x1bW46IHJlcXVpcmUgKCcuL2NvbHVtbi9Db2x1bW4nKVxuXHRcdE51bWJlckNvbHVtbjogcmVxdWlyZSAoJy4vY29sdW1uL051bWJlckNvbHVtbicpXG5cdFx0RGF0ZUNvbHVtbjogcmVxdWlyZSAoJy4vY29sdW1uL0RhdGVDb2x1bW4nKVxuXHRcdENoZWNrQ29sdW1uOiByZXF1aXJlICgnLi9jb2x1bW4vQ2hlY2tDb2x1bW4nKVxuXHRcdENoZWNrZXJDb2x1bW46IHJlcXVpcmUgKCcuL2NvbHVtbi9DaGVja2VyQ29sdW1uJylcblx0XHRUZXh0Q29sdW1uOiByZXF1aXJlICgnLi9jb2x1bW4vVGV4dENvbHVtbicpXG5cdFx0VG9nZ2xlQ29sdW1uOiByZXF1aXJlICgnLi9jb2x1bW4vVG9nZ2xlQ29sdW1uJylcblx0XHRBY3Rpb25Db2x1bW46IHJlcXVpcmUgKCcuL2NvbHVtbi9BY3Rpb25Db2x1bW4nKVxuXG5cdHJlbmRlcmVyOlxuXHRcdEdyaWRSZW5kZXJlcjogcmVxdWlyZSAoJy4vcmVuZGVyZXIvR3JpZFJlbmRlcmVyJylcblx0XHRXaWR0aE1hbmFnZXI6IHJlcXVpcmUgKCcuL3JlbmRlcmVyL1dpZHRoTWFuYWdlcicpXG5cblx0dXRpbHM6XG5cdFx0UG9wb3ZlclN1Ym1pdDogcmVxdWlyZSAoJy4vdXRpbHMvUG9wb3ZlclN1Ym1pdCcpXG5cblxuIyByZWdpc3RlciBhZGQgbWV0aG9kXG5HcmlkID0gZXhwb3J0cy5HcmlkXG5HcmlkLnJlZ2lzdGVyQ29sdW1uKCdudW1iZXJDb2x1bW4nLCBleHBvcnRzLmNvbHVtbi5OdW1iZXJDb2x1bW4pXG5HcmlkLnJlZ2lzdGVyQ29sdW1uKCdkYXRlQ29sdW1uJywgZXhwb3J0cy5jb2x1bW4uRGF0ZUNvbHVtbilcbkdyaWQucmVnaXN0ZXJDb2x1bW4oJ2NoZWNrQ29sdW1uJywgZXhwb3J0cy5jb2x1bW4uQ2hlY2tDb2x1bW4pXG5HcmlkLnJlZ2lzdGVyQ29sdW1uKCd0ZXh0Q29sdW1uJywgZXhwb3J0cy5jb2x1bW4uVGV4dENvbHVtbilcbkdyaWQucmVnaXN0ZXJDb2x1bW4oJ3RvZ2dsZUNvbHVtbicsIGV4cG9ydHMuY29sdW1uLlRvZ2dsZUNvbHVtbilcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMiLCJXaWR0aE1hbmFnZXIgPSByZXF1aXJlICcuL1dpZHRoTWFuYWdlcidcblxuXG5jbGFzcyBHcmlkUmVuZGVyZXIgZXh0ZW5kcyBNaXdvLk9iamVjdFxuXG5cdCMgQGNmZyB7TnVtYmVyfVxuXHRkYmxjbGlja2RlbGF5OiAwXG5cdCMgQGNmZyB7Qm9vbGVhbn1cblx0YXV0b1N5bmM6IHRydWVcblx0IyBAY2ZnIHtOdW1iZXJ9XG5cdGF1dG9TeW5jSW50ZXJ2YWw6IG51bGxcblxuXHQjIHByaXZhdGUgcHJvcGVydGllc1xuXHRncmlkOiBudWxsXG5cdGNvbHVtbnM6IG51bGxcblx0dGhlYWQ6IG51bGxcblx0dGZvb3Q6IG51bGxcblx0dGJvZHk6IG51bGxcblx0dGZpbHRlcnM6IG51bGxcblx0d2lkdGhNYW5hZ2VyOiBudWxsXG5cdGNlbGxDbGlja1RpbWVvdXRJZDogbnVsbFxuXG5cblx0Y29uc3RydWN0b3I6IChAZ3JpZCwgY29uZmlnKSAtPlxuXHRcdHN1cGVyKGNvbmZpZylcblx0XHRAY29sdW1ucyA9IFtdXG5cdFx0QHdpZHRoTWFuYWdlciA9IG5ldyBXaWR0aE1hbmFnZXIodGhpcywgQHdpZHRoTWFuYWdlcilcblxuXHRcdGlmIEBhdXRvU3luY0ludGVydmFsXG5cdFx0XHRAc3luY1Jvd3NJbnRlcnZhbCA9IHNldEludGVydmFsICgpPT5cblx0XHRcdFx0aWYgQHJlcXVpcmVkU3luY1Jvd3Ncblx0XHRcdFx0XHRAc3luY1Jvd3MoKVxuXHRcdFx0XHRyZXR1cm5cblx0XHRcdCwgQGF1dG9TeW5jSW50ZXJ2YWxcblx0XHRyZXR1cm5cblxuXG5cdHJlbmRlcjogLT5cblx0XHRncmlkID0gQGdyaWRcblx0XHRncmlkLm9uKFwicGFyZW50c2hvd25cIiwgQGJvdW5kKCdvbkdyaWRQYXJlbnRTaG93bicpKVxuXHRcdGdyaWQub24oXCJzZWxlY3Rpb25jaGFuZ2VcIiwgQGJvdW5kKCdvblNlbGVjdGlvbkNoYW5nZWQnKSlcblxuXHRcdCMgcHJlcGFyZSBjb2x1bW5zLCBjaGVja2VyIHB1bGwgdG8gYmVnaW5cblx0XHRmb3IgY29sdW1uIGluIGdyaWQuZ2V0Q29sdW1ucygpXG5cdFx0XHRpZiBjb2x1bW4uaXNDaGVja2VyQ29sdW1uXG5cdFx0XHRcdEBjb2x1bW5zLnB1c2goY29sdW1uKVxuXHRcdGZvciBjb2x1bW4gaW4gZ3JpZC5nZXRDb2x1bW5zKClcblx0XHRcdGlmICFjb2x1bW4uaXNDaGVja2VyQ29sdW1uXG5cdFx0XHRcdEBjb2x1bW5zLnB1c2goY29sdW1uKVxuXG5cdFx0IyBoZWFkZXIgVEFCTEVcblx0XHR0aGVhZFRhYmxlID0gbmV3IEVsZW1lbnQoXCJ0YWJsZVwiKVxuXHRcdHRoZWFkVGFibGUuaW5qZWN0KGdyaWQuaGVhZGVyRWwpXG5cdFx0IyBoZWFkZXIgdGl0bGVzXG5cdFx0QHJlbmRlckhlYWRlcih0aGVhZFRhYmxlKVxuXHRcdCMgaGVhZGVyIGZpbHRlcnNcblx0XHRAcmVuZGVyRmlsdGVycyh0aGVhZFRhYmxlKVxuXG5cdFx0IyBib2R5IFRBQkxFXG5cdFx0dGJvZHlUYWJsZSA9IG5ldyBFbGVtZW50KFwidGFibGVcIilcblx0XHR0Ym9keVRhYmxlLmluamVjdChncmlkLmJvZHlFbClcblx0XHQjIGJvZHkgY2xhc3Nlc1xuXHRcdGJvZHlFbCA9IGdyaWQuYm9keUVsXG5cdFx0Ym9keUVsLmFkZENsYXNzKCdncmlkLXN0cmlwZScpICBpZiBncmlkLnN0cmlwZVxuXHRcdGJvZHlFbC5hZGRDbGFzcygnZ3JpZC1jb25kZW5zZWQnKSAgaWYgZ3JpZC5jb25kZW5zZWRcblx0XHRib2R5RWwuYWRkQ2xhc3MoJ2dyaWQtbm93cmFwJykgIGlmIGdyaWQubm93cmFwXG5cdFx0Ym9keUVsLmFkZENsYXNzKCdncmlkLXJvd2NsaWNrYWJsZScpICBpZiBncmlkLnJvd2NsaWNrYWJsZVxuXHRcdGJvZHlFbC5hZGRDbGFzcygnZ3JpZC1hbGlnbi0nK2dyaWQudmVydGljYWxBbGlnbikgIGlmIGdyaWQudmVydGljYWxBbGlnblxuXHRcdGJvZHlFbC5hZGRDbGFzcygnZ3JpZC0nK2dyaWQuc2l6ZSkgIGlmIGdyaWQuc2l6ZVxuXHRcdCMgYm9keSByb3dzXG5cdFx0QHJlbmRlckJvZHkodGJvZHlUYWJsZSlcblxuXHRcdCMgZm9vdGVyXG5cdFx0QHJlbmRlckZvb3RlcihncmlkLmZvb3RlckVsKVxuXG5cdFx0IyBmaW5pc2ggcmVuZGVyaW5nXG5cdFx0Z3JpZC5lbWl0KFwicmVuZGVyXCIsIGdyaWQpXG5cdFx0Zm9yIGNvbHVtbiBpbiBAY29sdW1ucyB0aGVuIGNvbHVtbi5hZnRlclJlbmRlcigpXG5cdFx0cmV0dXJuXG5cblxuXHRhZnRlclJlbmRlcjogLT5cblx0XHRAd2lkdGhNYW5hZ2VyLmFjdHVhbGl6ZSgpXG5cdFx0cmV0dXJuXG5cblxuXHRyZWZyZXNoOiAtPlxuXHRcdEBkZXN0cm95Um93cyhAdGJvZHkpXG5cdFx0QHJlbmRlckJvZHkoQHRib2R5KVxuXHRcdEBncmlkLm9uUmVmcmVzaCgpXG5cdFx0QHdpZHRoTWFuYWdlci5hY3R1YWxpemUoKVxuXHRcdHJldHVyblxuXG5cblx0c2V0QXV0b1N5bmM6IChAYXV0b1N5bmMpIC0+XG5cdFx0aWYgQGF1dG9TeW5jXG5cdFx0XHRAc3luY1Jvd3MoKVxuXHRcdHJldHVyblxuXG5cblx0cmVjb3JkQWRkZWQ6IChyZWNvcmQpIC0+XG5cdFx0dHIgPSBAcmVuZGVyUm93KEB0Ym9keSwgcmVjb3JkLCBAdGJvZHkuZ2V0Q2hpbGRyZW4oKS5sZW5ndGgpICAjIHB1c2ggdG8gZW5kIGFuZCB0aGVuIHN5bmMgcm93IHBvc2l0aW9uc1xuXHRcdEByZXF1aXJlU3luY1Jvd3MoKSBpZiBAYXV0b1N5bmNcblx0XHRAd2lkdGhNYW5hZ2VyLmFjdHVhbGl6ZSh0cilcblx0XHRyZXR1cm5cblxuXG5cdHJlY29yZFJlbW92ZWQ6IChyZWNvcmQpIC0+XG5cdFx0dHIgPSBAZ2V0Um93QnlSZWNvcmQocmVjb3JkKVxuXHRcdGlmIHRyXG5cdFx0XHRAZGVzdHJveVJvdyh0cilcblx0XHRcdEByZXF1aXJlU3luY1Jvd3MoKSBpZiBAYXV0b1N5bmNcblx0XHRyZXR1cm5cblxuXG5cdHJlY29yZFVwZGF0ZWQ6IChyZWNvcmQpIC0+XG5cdFx0dHIgPSBAZ2V0Um93QnlSZWNvcmQocmVjb3JkKVxuXHRcdGlmIHRyXG5cdFx0XHRAdXBkYXRlUm93KHRyLCByZWNvcmQpXG5cdFx0ZWxzZVxuXHRcdFx0QHJlbmRlclJvdyhAdGJvZHksIHJlY29yZClcblx0XHRAcmVxdWlyZVN5bmNSb3dzKCkgaWYgQGF1dG9TeW5jXG5cdFx0cmV0dXJuXG5cblxuXHRyZW5kZXJIZWFkZXI6ICh0aGVhZFRhYmxlKSAtPlxuXHRcdHRoZWFkID0gbmV3IEVsZW1lbnQoXCJ0aGVhZFwiLCB7Y2xzOiBcImdyaWQtaGVhZGVyc1wifSlcblx0XHR0aGVhZC5pbmplY3QodGhlYWRUYWJsZSlcblx0XHRAdGhlYWQgPSB0aGVhZFxuXG5cdFx0dHIgPSBuZXcgRWxlbWVudChcInRyXCIpLmluamVjdCh0aGVhZClcblx0XHRmb3IgY29sdW1uIGluIEBjb2x1bW5zXG5cdFx0XHR0aCA9IG5ldyBFbGVtZW50KFwidGhcIikuaW5qZWN0KHRyKVxuXHRcdFx0dGguYWRkQ2xhc3MoJ3RleHQtJytjb2x1bW4uYWxpZ24pXG5cdFx0XHR0aC5hZGRDbGFzcygnZ3JpZC1jb2wtJytjb2x1bW4uY29sQ2xzKSBpZiBjb2x1bW4uY29sQ2xzXG5cdFx0XHR0aC5zZXQoXCJjb2x1bW5cIiwgY29sdW1uLm5hbWUpXG5cdFx0XHR0aC5zZXQoXCJodG1sXCIsICc8c3BhbiB0aXRsZT1cIicrKGNvbHVtbi50aXRsZSB8fCBjb2x1bW4udGV4dCkrJ1wiIGRhdGEtdG9nZ2xlPVwidG9vbHRpcFwiPicrY29sdW1uLnJlbmRlckhlYWRlcigpKyc8L3NwYW4+Jylcblx0XHRcdHRoLnNldFZpc2libGUoZmFsc2UpIGlmICFjb2x1bW4udmlzaWJsZVxuXG5cdFx0XHRjb2x1bW4ub25SZW5kZXJIZWFkZXIodGgpIGlmIGNvbHVtbi5vblJlbmRlckhlYWRlclxuXHRcdFx0QGdyaWQuZW1pdChcImhlYWRlcnJlbmRlclwiLCBAZ3JpZCwgdGgsIGNvbHVtbilcblx0XHRyZXR1cm5cblxuXG5cdHJlbmRlckZpbHRlcnM6ICh0aGVhZFRhYmxlKSAtPlxuXHRcdCMgQHRmaWx0ZXJzID0gbmV3IEVsZW1lbnQoXCJ0Ym9keVwiLCB7Y2xzOiBcImdyaWQtZmlsdGVyc1wifSlcblx0XHQjIEB0ZmlsdGVycy5pbmplY3QodGhlYWRUYWJsZSlcblx0XHQjIG5vdCBpbXBsZW1lbnRlZCB5ZXRcblx0XHRyZXR1cm5cblxuXG5cdHJlbmRlckJvZHk6ICh0Ym9keVRhYmxlKSAtPlxuXHRcdGdyaWQgPSBAZ3JpZFxuXHRcdHJlY29yZHMgPSBncmlkLmdldFJlY29yZHMoKVxuXG5cdFx0dGJvZHkgPSBuZXcgRWxlbWVudChcInRib2R5XCIsIHtjbHM6IFwiZ3JpZC1yb3dzXCJ9KVxuXHRcdHRib2R5LmluamVjdCh0Ym9keVRhYmxlKVxuXHRcdHRib2R5Lm9uKFwiY2xpY2s6cmVsYXkodHIuZ3JpZC1yb3ctZGF0YSB0ZClcIiwgQGJvdW5kKCdvbkNlbGxDbGljaycpKVxuXHRcdHRib2R5Lm9uKFwiZGJsY2xpY2s6cmVsYXkodHIuZ3JpZC1yb3ctZGF0YSB0ZClcIiwgQGJvdW5kKCdvbkNlbGxEYmxDbGljaycpKVxuXHRcdGdyaWQudGJvZHlFbCA9IEB0Ym9keSA9IHRib2R5XG5cblx0XHRpZiBncmlkLmdyb3VwQnlcblx0XHRcdGdyb3VwcyA9IHt9XG5cdFx0XHQjIGdyb3VwIHJlY29yZHNcblx0XHRcdGZvciByZWNvcmQgaW4gcmVjb3Jkc1xuXHRcdFx0XHR2YWx1ZSA9IHJlY29yZC5nZXQoZ3JpZC5ncm91cEJ5KVxuXHRcdFx0XHRncm91cHNbdmFsdWVdID0gW10gIGlmICFncm91cHNbdmFsdWVdXG5cdFx0XHRcdGdyb3Vwc1t2YWx1ZV0ucHVzaChyZWNvcmQpXG5cblx0XHRcdCMgbm90aWZ5IGJ5IGdyaWQgKGdyb3VwcyBvcmRlciBjYW4gYmUgY2hhbmdlZClcblx0XHRcdGdyaWQuZW1pdCgnYmVmb3Jlc3luYycsIGdyaWQsIGdyb3VwcylcblxuXHRcdFx0IyByZW5kZXIgZ3JvdXBlZCByZWNvcmRzXG5cdFx0XHRmb3IgbmFtZSxyZWNvcmRzIG9mIGdyb3Vwc1xuXHRcdFx0XHRAcmVuZGVyR3JvdXAodGJvZHksIG5hbWUpXG5cdFx0XHRcdEByZW5kZXJSb3dzKHRib2R5LCByZWNvcmRzKVxuXHRcdGVsc2Vcblx0XHRcdEByZW5kZXJSb3dzKHRib2R5LCByZWNvcmRzKVxuXG5cdFx0QHJlaW5kZXhSb3dzKClcblx0XHRncmlkLmVtaXQoJ2FmdGVyc3luYycsIGdyaWQpXG5cdFx0cmV0dXJuXG5cblxuXHRyZW5kZXJHcm91cDogKHRib2R5LCBuYW1lKSAtPlxuXHRcdHRyID0gbmV3IEVsZW1lbnQoXCJ0clwiLCB7Y2xzOiBcImdyaWQtcm93LWdyb3VwXCIsIHBhcmVudDp0Ym9keSwgJ2RhdGEtZ3JvdXAnOm5hbWV9KVxuXHRcdHRyLnN0b3JlKFwicm93aWRcIiwgJ2dyb3VwLScrbmFtZSlcblx0XHR0ZCA9IG5ldyBFbGVtZW50KFwidGRcIiwge2h0bWw6IG5hbWUsIGNvbHNwYW46IEBjb2x1bW5zLmxlbmd0aCwgcGFyZW50OiB0cn0pXG5cdFx0QGdyaWQuZW1pdChcImdyb3VwcmVuZGVyXCIsIEBncmlkLCB0ZCwgbmFtZSlcblx0XHRyZXR1cm5cblxuXG5cdHJlbmRlclJvd3M6ICh0Ym9keSwgcmVjb3JkcykgLT5cblx0XHRmb3IgcmVjb3JkLGluZGV4IGluIHJlY29yZHNcblx0XHRcdEByZW5kZXJSb3codGJvZHksIHJlY29yZCwgaW5kZXgpXG5cdFx0cmV0dXJuXG5cblxuXHRyZW5kZXJSb3c6ICh0Ym9keSwgcmVjb3JkLCBpbmRleCkgLT5cblx0XHR0ciA9IG5ldyBFbGVtZW50KFwidHJcIiwge2NsczogXCJncmlkLXJvdy1kYXRhXCJ9KVxuXHRcdHRyLnN0b3JlKFwicmVjb3JkXCIsIHJlY29yZClcblx0XHR0ci5zdG9yZShcInJvd2lkXCIsIHJlY29yZC5nZXRJZCgpKVxuXHRcdHRyLnNldChcImRhdGEtcm93XCIsIHJlY29yZC5nZXRJZCgpKVxuXHRcdHRyLmluamVjdCh0Ym9keSlcblxuXHRcdCMgcmVuZGVyIHJvd1xuXHRcdGZvciBjb2x1bW4gaW4gQGNvbHVtbnNcblx0XHRcdEByZW5kZXJDZWxsKHRyLCByZWNvcmQsIGNvbHVtbilcblxuXHRcdCMgbm90aWZ5IGFmdGVyIHJvdyByZW5kZXJlZFxuXHRcdEBncmlkLmVtaXQoXCJyb3dyZW5kZXJcIiwgQGdyaWQsIHRyLCByZWNvcmQsIGluZGV4KVxuXHRcdHJldHVybiB0clxuXG5cblx0dXBkYXRlUm93OiAodHIsIHJlY29yZCkgLT5cblx0XHRpZiAhdHIucmV0cmlldmUoXCJyb3dpZFwiKVxuXHRcdFx0dHIuc2V0KFwiZGF0YS1yb3dcIiwgcmVjb3JkLmdldElkKCkpXG5cdFx0XHR0ci5zdG9yZShcInJvd2lkXCIsIHJlY29yZC5nZXRJZCgpKVxuXG5cdFx0Y2VsbHMgPSB7fVxuXHRcdGZvciB0ZCBpbiB0ci5nZXRFbGVtZW50cygndGQnKVxuXHRcdFx0Y2VsbHNbdGQuZ2V0KCdjb2x1bW4nKV0gPSB0ZFxuXG5cdFx0IyB1cGRhdGUgY2VsbHNcblx0XHRmb3IgY29sdW1uIGluIEBjb2x1bW5zXG5cdFx0XHRAdXBkYXRlQ2VsbChjZWxsc1tjb2x1bW4ubmFtZV0sIHJlY29yZCwgY29sdW1uKSAgaWYgIWNvbHVtbi5wcmV2ZW50VXBkYXRlQ2VsbFxuXG5cdFx0IyBub3RpZnkgYWZ0ZXIgcm93IHJlbmRlcmVkXG5cdFx0QGdyaWQuZW1pdChcInJvd3JlbmRlclwiLCBAZ3JpZCwgdHIsIHJlY29yZClcblx0XHRyZXR1cm5cblxuXG5cdHJlbmRlckNlbGw6ICh0ciwgcmVjb3JkLCBjb2x1bW4pIC0+XG5cdFx0dGQgPSBuZXcgRWxlbWVudChcInRkXCIpLmluamVjdCh0cilcblx0XHR0ZC5hZGRDbGFzcygnZ3JpZC1jb2wtJytjb2x1bW4uY29sQ2xzKSBpZiBjb2x1bW4uY29sQ2xzXG5cdFx0dGQuYWRkQ2xhc3MoXCJ0ZXh0LVwiICsgY29sdW1uLmFsaWduKVxuXHRcdHRkLnN0b3JlKFwiZGF0YUluZGV4XCIsIGNvbHVtbi5nZXREYXRhSW5kZXgoKSlcblx0XHR0ZC5zZXQoXCJjb2x1bW5cIiwgY29sdW1uLm5hbWUpXG5cdFx0dGQuc2V0KFwidGl0bGVcIiwgcmVjb3JkLmdldChjb2x1bW4udGl0bGVJbmRleCkpICBpZiBjb2x1bW4udGl0bGVJbmRleFxuXHRcdHRkLnNldFZpc2libGUoZmFsc2UpIGlmICFjb2x1bW4udmlzaWJsZVxuXHRcdEB1cGRhdGVDZWxsKHRkLCByZWNvcmQsIGNvbHVtbilcblx0XHRyZXR1cm5cblxuXG5cdHVwZGF0ZUNlbGw6ICh0ZCwgcmVjb3JkLCBjb2x1bW4pIC0+XG5cdFx0ZGF0YUluZGV4ID0gY29sdW1uLmdldERhdGFJbmRleCgpXG5cdFx0dmFsdWUgPSByZWNvcmQuZ2V0KGRhdGFJbmRleClcblx0XHRyZW5kZXJlZCA9IGNvbHVtbi5yZW5kZXJWYWx1ZSh2YWx1ZSwgcmVjb3JkKVxuXHRcdGlmIFR5cGUuaXNPYmplY3QocmVuZGVyZWQpICYmIHJlbmRlcmVkLmlzQ29tcG9uZW50XG5cdFx0XHR0ZC5lbXB0eSgpXG5cdFx0XHRyZW5kZXJlZC5yZW5kZXIodGQpXG5cdFx0ZWxzZVxuXHRcdFx0dGQuc2V0KCdodG1sJywgcmVuZGVyZWQpXG5cdFx0Y29sdW1uLm9uUmVuZGVyQ2VsbCh0ZCwgdmFsdWUsIHJlY29yZCkgaWYgY29sdW1uLm9uUmVuZGVyQ2VsbFxuXHRcdEBncmlkLmVtaXQoJ2NlbGxyZW5kZXInLCBAZ3JpZCwgdGQsIHZhbHVlLCByZWNvcmQpXG5cdFx0cmV0dXJuXG5cblxuXHRkZXN0cm95Um93czogKHRib2R5KSAtPlxuXHRcdGZvciB0ciBpbiB0Ym9keS5nZXRFbGVtZW50cyhcInRyXCIpXG5cdFx0XHRpZiB0ci5oYXNDbGFzcygnZ3JpZC1yb3ctZ3JvdXAnKVxuXHRcdFx0XHR0ci5kZXN0cm95KClcblx0XHRcdGVsc2Vcblx0XHRcdFx0QGRlc3Ryb3lSb3codHIpXG5cdFx0cmV0dXJuXG5cblxuXHRkZXN0cm95Um93OiAodHIpIC0+XG5cdFx0cmVjb3JkID0gdHIucmV0cmlldmUoJ3JlY29yZCcpXG5cdFx0dHIuZWxpbWluYXRlKCdyZWNvcmQnKVxuXHRcdHRyLmVsaW1pbmF0ZSgncm93aWQnKVxuXHRcdEBncmlkLmVtaXQoJ3Jvd2Rlc3Ryb3knLCBAZ3JpZCwgdHIpXG5cdFx0Zm9yIHRkIGluIHRyLmdldEVsZW1lbnRzKCd0ZCcpXG5cdFx0XHRAZGVzdHJveUNlbGwodGQsIHJlY29yZClcblx0XHR0ci5kZXN0cm95KClcblx0XHRyZXR1cm5cblxuXG5cdGRlc3Ryb3lDZWxsOiAodGQsIHJlY29yZCkgLT5cblx0XHRuYW1lID0gdGQuZ2V0KCdjb2x1bW4nKVxuXHRcdGNvbHVtbiA9IEBncmlkLmdldChuYW1lKVxuXHRcdGNvbHVtbi5vbkRlc3Ryb3lDZWxsKHRkLCByZWNvcmQpIGlmIGNvbHVtbi5vbkRlc3Ryb3lDZWxsXG5cdFx0QGdyaWQuZW1pdCgnY2VsbGRlc3Ryb3knLCBAZ3JpZCwgdGQpXG5cdFx0dGQuZWxpbWluYXRlKCdkYXRhSW5kZXgnKVxuXHRcdHJldHVyblxuXG5cblx0cmVxdWlyZVN5bmNSb3dzOiAtPlxuXHRcdGlmIEBzeW5jUm93c0ludGVydmFsXG5cdFx0XHRAcmVxdWlyZWRTeW5jUm93cyA9IHRydWUgIyBzeW5jZWQgYnkgaW50ZXJ2YWwgY2FsbGJhY2tcblx0XHRlbHNlXG5cdFx0XHRAc3luY1Jvd3MoKVxuXHRcdHJldHVyblxuXG5cblx0c3luY1Jvd3M6IC0+XG5cdFx0Z3JpZCA9IEBncmlkXG5cdFx0cmVjb3JkcyA9IGdyaWQuZ2V0UmVjb3JkcygpXG5cblx0XHQjIHJlc2V0IHJlcXVpcmUgc3luYyBmbGFnXG5cdFx0QHJlcXVpcmVkU3luY1Jvd3MgPSBmYWxzZVxuXG5cdFx0IyBwcmVwYXJlIGRhdGFcblx0XHRpZiBncmlkLmdyb3VwQnlcblx0XHRcdGdyb3VwcyA9IHt9XG5cdFx0XHRmb3IgcmVjb3JkIGluIHJlY29yZHNcblx0XHRcdFx0dmFsdWUgPSByZWNvcmQuZ2V0KGdyaWQuZ3JvdXBCeSlcblx0XHRcdFx0Z3JvdXBzW3ZhbHVlXSA9IFtdICBpZiAhZ3JvdXBzW3ZhbHVlXVxuXHRcdFx0XHRncm91cHNbdmFsdWVdLnB1c2gocmVjb3JkKVxuXG5cdFx0IyBub3RpZnkgYnkgZ3JpZCAoZ3JvdXBzIG9yZGVyIGNhbiBiZSBjaGFuZ2VkKVxuXHRcdGdyaWQuZW1pdCgnYmVmb3Jlc3luYycsIGdyaWQsIGdyb3VwcylcblxuXHRcdCMgY3JlYXRlIHJvd3MgcG9zaXRpb25zXG5cdFx0aWYgIWdyaWQuZ3JvdXBCeVxuXHRcdFx0cG9zaXRpb25zID0gW11cblx0XHRcdGZvciByZWMgaW4gcmVjb3Jkc1xuXHRcdFx0XHRwb3NpdGlvbnMucHVzaChyZWMuZ2V0SWQoKSlcblx0XHRlbHNlXG5cdFx0XHRmb3IgbmFtZSwgcmVjb3JkcyBvZiBncm91cHNcblx0XHRcdFx0Z3JvdXBSb3cgPSBAdGJvZHkuZ2V0Q2hpbGRyZW4oXCJ0ci5ncmlkLXJvdy1ncm91cFtkYXRhLWdyb3VwPScje25hbWV9J11cIilbMF1cblx0XHRcdFx0aWYgIWdyb3VwUm93XG5cdFx0XHRcdFx0QHJlbmRlckdyb3VwKEB0Ym9keSwgbmFtZSlcblxuXHRcdFx0Zm9yIGdyb3VwUm93IGluIEB0Ym9keS5nZXRDaGlsZHJlbigndHIuZ3JpZC1yb3ctZ3JvdXAnKVxuXHRcdFx0XHRncm91cE5hbWUgPSBncm91cFJvdy5nZXQoJ2RhdGEtZ3JvdXAnKVxuXHRcdFx0XHRpZiAhZ3JvdXBzW2dyb3VwTmFtZV1cblx0XHRcdFx0XHRncm91cFJvdy5kZXN0cm95KClcblxuXHRcdFx0cG9zaXRpb25zID0gW107XG5cdFx0XHRmb3IgbmFtZSwgcmVjb3JkcyBvZiBncm91cHNcblx0XHRcdFx0cG9zaXRpb25zLnB1c2goJ2dyb3VwLScrbmFtZSlcblx0XHRcdFx0Zm9yIHJlY29yZCBpbiByZWNvcmRzXG5cdFx0XHRcdFx0cG9zaXRpb25zLnB1c2gocmVjb3JkLmdldElkKCkpXG5cblx0XHQjIG5vdGlmeSBieSBncmlkIChwb3NpdGlvbnMgY2FuIGJlIGNoYW5nZWQpXG5cdFx0Z3JpZC5lbWl0KCdzeW5jJywgZ3JpZCwgcG9zaXRpb25zKVxuXG5cdFx0IyBwYXJzZSByb3dzIGJ5IGlkc1xuXHRcdHJvd3MgPSB7fVxuXHRcdGZvciByb3cgaW4gQHRib2R5LmdldENoaWxkcmVuKClcblx0XHRcdHJvd3Nbcm93LnJldHJpZXZlKCdyb3dpZCcpXSA9IHJvd1xuXG5cdFx0IyBiaS1kaXJlY3Rpb25hbCBzb3J0aW5nXG5cdFx0Y2hhbmdlZCA9IGZhbHNlXG5cdFx0bGVuID0gcG9zaXRpb25zLmxlbmd0aFxuXHRcdGxpbWl0ID0gTWF0aC5yb3VuZChsZW4vMilcblx0XHRmb3IgaSBpbiBbMC4ubGltaXRdIGJ5ICsxXG5cdFx0XHRpZCA9IHBvc2l0aW9ucy5zaGlmdCgpXG5cdFx0XHRyb3cgPSByb3dzW2lkXVxuXHRcdFx0aWYgcm93XG5cdFx0XHRcdGlmIEBzeW5jUm93KHJvdywgaSlcblx0XHRcdFx0XHRjaGFuZ2VkID0gdHJ1ZVxuXG5cdFx0XHRpZCA9IHBvc2l0aW9ucy5wb3AoKVxuXHRcdFx0cm93ID0gcm93c1tpZF1cblx0XHRcdGlmIHJvd1xuXHRcdFx0XHRpZiBAc3luY1Jvdyhyb3csIGxlbi1pLTEpXG5cdFx0XHRcdFx0Y2hhbmdlZCA9IHRydWVcblxuXHRcdCMgY2hlY2sgaWYgcmVpbmRleCBpcyBuZWVkZWRcblx0XHRpZiBjaGFuZ2VkXG5cdFx0XHRAcmVpbmRleFJvd3MoKVxuXG5cdFx0Z3JpZC5lbWl0KCdhZnRlcnN5bmMnLCBncmlkKVxuXHRcdHJldHVyblxuXG5cblx0c3luY1JvdzogKHJvdywgcG9zaXRpb24pIC0+XG5cdFx0aWYgcm93LmdldEluZGV4KCkgaXMgcG9zaXRpb25cblx0XHRcdHJldHVybiBmYWxzZVxuXHRcdGlmIHBvc2l0aW9uIGlzIDBcblx0XHRcdHJvdy5pbmplY3QoQHRib2R5LCAndG9wJylcblx0XHRlbHNlXG5cdFx0XHRwcmV2Um93ID0gQHRib2R5LmdldENoaWxkcmVuKCd0cjpudGgtY2hpbGQoXCInK3Bvc2l0aW9uKydcIiknKVswXVxuXHRcdFx0cm93LmluamVjdChwcmV2Um93LCAnYWZ0ZXInKVxuXHRcdHJldHVybiB0cnVlXG5cblxuXHRyZWluZGV4Um93czogLT5cblx0XHRpbmRleCA9IDBcblx0XHRmb3Igcm93IGluIEB0Ym9keS5nZXRDaGlsZHJlbigndHIuZ3JpZC1yb3ctZGF0YScpXG5cdFx0XHRyb3cuc2V0KCdyb3ctaW5kZXgnLCBpbmRleCsrKVxuXHRcdHJldHVyblxuXG5cblx0cmVuZGVyRm9vdGVyOiAoZm9vdGVyRWwpIC0+XG5cdFx0c2hvd0Zvb3RlciA9IGZhbHNlXG5cblx0XHRpZiBAZ3JpZC5wYWdpbmF0b3Jcblx0XHRcdHBhZ2luYXRvciA9IEBncmlkLmdldCgncGFnaW5hdG9yJylcblx0XHRcdHBhZ2luYXRvci5lbC5hZGRDbGFzcygnZ3JpZC1wYWdpbmF0b3InKVxuXHRcdFx0cGFnaW5hdG9yLnJlbmRlcihmb290ZXJFbClcblxuXHRcdGlmIEBncmlkLm9wZXJhdGlvbnNcblx0XHRcdHNob3dGb290ZXIgPSB0cnVlXG5cdFx0XHRoYXNTZWxlY3Rpb24gPSBAZ3JpZC5nZXRTZWxlY3Rpb25Nb2RlbCgpLmhhc1NlbGVjdGlvbigpXG5cdFx0XHRAZ3JpZC5vcGVyYXRpb25zLnJlbmRlcihmb290ZXJFbClcblx0XHRcdEBncmlkLm9wZXJhdGlvbnMuc2V0VmlzaWJsZShoYXNTZWxlY3Rpb24pXG5cblx0XHRpZiAhc2hvd0Zvb3RlclxuXHRcdFx0Zm9vdGVyRWwuaGlkZSgpXG5cdFx0XHRAZ3JpZC5lbC5hZGRDbGFzcygnZ3JpZC1ub2Zvb3RlcicpXG5cdFx0cmV0dXJuXG5cblxuXHRvblNlbGVjdGlvbkNoYW5nZWQ6IChncmlkLCBzbSwgc2VsZWN0aW9uKSAtPlxuXHRcdGhhc1NlbGVjdGlvbiA9IHNlbGVjdGlvbi5sZW5ndGggPiAwXG5cdFx0aWYgQGdyaWQub3BlcmF0aW9uc1xuXHRcdFx0QGdyaWQub3BlcmF0aW9ucy5zZXRWaXNpYmxlKGhhc1NlbGVjdGlvbilcblx0XHRyZXR1cm5cblxuXG5cdG9uQ2VsbENsaWNrOiAoZSwgdGQpIC0+XG5cdFx0aWYgdGQuZ2V0KCdkaXNhYmxlY2xpY2snKSB0aGVuIHJldHVyblxuXHRcdGlmIGUudGFyZ2V0LnRhZ05hbWUgaXMgJ0EnIHRoZW4gcmV0dXJuXG5cblx0XHRjbGVhclRpbWVvdXQoQGNlbGxDbGlja1RpbWVvdXRJZClcblx0XHRAY2VsbENsaWNrVGltZW91dElkID0gKD0+XG5cdFx0XHRpbmZvID0gQGdldENlbGxJbmZvKHRkKVxuXHRcdFx0QGdyaWQuZW1pdCgnY2VsbGNsaWNrJywgQGdyaWQsIHRkLCBpbmZvLnJlY29yZCwgaW5mbywgZSlcblx0XHRcdEBncmlkLmVtaXQoJ3Jvd2NsaWNrJywgQGdyaWQsIGluZm8ucmVjb3JkLCBpbmZvLCBlKVxuXHRcdFx0cmV0dXJuXG5cdFx0KS5kZWxheShAZGJsY2xpY2tkZWxheSlcblx0XHRyZXR1cm5cblxuXG5cdG9uQ2VsbERibENsaWNrOiAoZSwgdGQpIC0+XG5cdFx0aWYgdGQuZ2V0KCdkaXNhYmxlY2xpY2snKSB0aGVuIHJldHVyblxuXHRcdGlmIGUudGFyZ2V0LnRhZ05hbWUgaXMgXCJBXCIgdGhlbiByZXR1cm5cblxuXHRcdGNsZWFyVGltZW91dChAY2VsbENsaWNrVGltZW91dElkKVxuXHRcdGluZm8gPSBAZ2V0Q2VsbEluZm8odGQpXG5cdFx0QGdyaWQuZW1pdCgnY2VsbGRibGNsaWNrJywgQGdyaWQsIHRkLCBpbmZvLnJlY29yZCwgaW5mbywgZSlcblx0XHRAZ3JpZC5lbWl0KCdyb3dkYmxjbGljaycsIEBncmlkLCBpbmZvLnJlY29yZCwgaW5mbywgZSlcblx0XHRyZXR1cm5cblxuXG5cdGdldENlbGxJbmZvOiAodGQpIC0+XG5cdFx0dHIgPSB0ZC5nZXRQYXJlbnQoKVxuXHRcdGRhdGFJbmRleCA9IHRkLnJldHJpZXZlKCdkYXRhSW5kZXgnKVxuXHRcdHJlY29yZCA9IHRyLnJldHJpZXZlKCdyZWNvcmQnKVxuXHRcdHJldHVybiB7XG5cdFx0XHR0cjogdHJcblx0XHRcdGNlbGxJbmRleDogdGQuZ2V0SW5kZXgoKVxuXHRcdFx0cm93SW5kZXg6IHRyLmdldEluZGV4KClcblx0XHRcdHJlY29yZDogcmVjb3JkXG5cdFx0XHR2YWx1ZTogcmVjb3JkLmdldChkYXRhSW5kZXgpXG5cdFx0XHRkYXRhSW5kZXg6IGRhdGFJbmRleFxuXHRcdFx0Y29sdW1uOiB0ZC5nZXQoJ2NvbHVtbicpXG5cdFx0fVxuXG5cblx0Z2V0Um93QnlJZDogKGlkKSAtPlxuXHRcdGZvciB0ciBpbiBAdGJvZHkuZ2V0Q2hpbGRyZW4oJ3RyJylcblx0XHRcdGlmIHRyLnJldHJpZXZlKCdyb3dpZCcpIGlzIGlkXG5cdFx0XHRcdHJldHVybiB0clxuXHRcdHJldHVybiBudWxsXG5cblxuXHRnZXRSb3dCeVJlY29yZDogKHJlY29yZCkgLT5cblx0XHRmb3IgdHIgaW4gQHRib2R5LmdldENoaWxkcmVuKCd0cicpXG5cdFx0XHRpZiB0ci5yZXRyaWV2ZSgncmVjb3JkJykgaXMgcmVjb3JkXG5cdFx0XHRcdHJldHVybiB0clxuXHRcdHJldHVybiBudWxsXG5cblxuXHRvbkdyaWRQYXJlbnRTaG93bjogLT5cblx0XHR3bSA9IEB3aWR0aE1hbmFnZXJcblx0XHR3bS53aWR0aHMgPSBudWxsICMgcmVzZXQgd2lkdGhzXG5cdFx0d20uYWN0dWFsaXplKClcblx0XHRyZXR1cm5cblxuXG5cdGRvRGVzdHJveTogLT5cblx0XHRAd2lkdGhNYW5hZ2VyLmRlc3Ryb3koKVxuXHRcdEBncmlkLnVuKCdwYXJlbnRzaG93bicsIEBib3VuZCgnb25HcmlkUGFyZW50U2hvd24nKSlcblx0XHRAZ3JpZC51bignc2VsZWN0aW9uY2hhbmdlJywgQGJvdW5kKCdvblNlbGVjdGlvbkNoYW5nZWQnKSlcblx0XHRAZGVzdHJveVJvd3MoQHRib2R5KVxuXHRcdEBncmlkID0gQHRib2R5ID0gQHRmaWx0ZXJzID0gQHRoZWFkID0gQHRmb290ID0gbnVsbFxuXHRcdHN1cGVyKClcblx0XHRyZXR1cm5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IEdyaWRSZW5kZXJlciIsImNsYXNzIFdpZHRoTWFuYWdlciBleHRlbmRzIE1pd28uT2JqZWN0XG5cblx0ZGVmYXVsdEZpdFdpZHRoOiAxMDBcblx0cmVuZGVyZXI6IG51bGxcblx0d2lkdGhzOiBudWxsXG5cblxuXHRjb25zdHJ1Y3RvcjogKEByZW5kZXJlciwgY29uZmlnKSAtPlxuXHRcdHN1cGVyKGNvbmZpZylcblx0XHR3aW5kb3cub24oXCJyZXNpemVcIiwgQGJvdW5kKFwib25XaW5kb3dSZXNpemVcIikpXG5cdFx0cmV0dXJuXG5cblxuXHRhY3R1YWxpemU6ICh0cikgLT5cblx0XHRpZiAhQHdpZHRoc1xuXHRcdFx0QHdpZHRocyA9IEBkZXRlY3RXaWR0aHMoKVxuXG5cdFx0aWYgdHJcblx0XHRcdCMgdXBkYXRlIG9ubHkgcm93IGJ5IGFyZ3VtZW50XG5cdFx0XHRAYWN0dWFsaXplUm93KHRyLCBAd2lkdGhzKVxuXHRcdGVsc2Vcblx0XHRcdCMgdXBkYXRlIGhlYWRlciBzaXplc1xuXHRcdFx0QGFjdHVhbGl6ZVJvdyhAcmVuZGVyZXIudGhlYWQuZ2V0Q2hpbGRyZW4oJ3RyJylbMF0sIEB3aWR0aHMpXG5cdFx0XHQjIHVwZGF0ZSBib2R5IHNpemVzIG9mIGZpcnN0IHZpc2libGUgcm93IChvbmx5IDEgaXMgcmVxdWlyZWQpXG5cdFx0XHRmb3Igcm93IGluIEByZW5kZXJlci50Ym9keS5nZXRDaGlsZHJlbihcInRyLmdyaWQtcm93LWRhdGFcIilcblx0XHRcdFx0QGFjdHVhbGl6ZVJvdyhyb3csIEB3aWR0aHMpXG5cdFx0cmV0dXJuXG5cblxuXHRhY3R1YWxpemVSb3c6ICh0ciwgd2lkdGhzKSAtPlxuXHRcdGZvciBuYW1lLHdpZHRoIG9mIHdpZHRoc1xuXHRcdFx0aWYgd2lkdGggaXNudCBudWxsXG5cdFx0XHRcdHRyLmdldENoaWxkcmVuKFwiW2NvbHVtbj1cXFwiXCIgKyBuYW1lICsgXCJcXFwiXVwiKS5zZXRTdHlsZXNcblx0XHRcdFx0XHR3aWR0aDogd2lkdGhcblx0XHRcdFx0XHRtYXhXaWR0aDogd2lkdGhcblx0XHRyZXR1cm5cblxuXG5cdG9uV2luZG93UmVzaXplOiAtPlxuXHRcdEB3aWR0aHMgPSBudWxsXG5cdFx0QGFjdHVhbGl6ZSgpXG5cdFx0cmV0dXJuXG5cblxuXHRkZXRlY3RXaWR0aHM6IC0+XG5cdFx0cmVuZGVyZXIgPSBAcmVuZGVyZXJcblx0XHRmcmVlV2lkdGggPSByZW5kZXJlci5ncmlkLmJvZHlFbC5nZXRXaWR0aCgpXG5cdFx0dG90YWxGaXQgPSAwXG5cdFx0d2lkdGhzID0ge31cblx0XHRpc0ZpdCA9IGZhbHNlXG5cdFx0Y29sdW1ucyA9IFtdXG5cblx0XHRmb3IgY29sdW1uIGluIHJlbmRlcmVyLmNvbHVtbnNcblx0XHRcdGlmIGNvbHVtbi5pc1Zpc2libGUoKVxuXHRcdFx0XHRjb2x1bW5zLnB1c2goY29sdW1uKVxuXHRcdFx0XHRpZiBjb2x1bW4ud2lkdGhUeXBlIGlzIFwiZml0XCJcblx0XHRcdFx0XHRpc0ZpdCA9IHRydWVcblxuXHRcdCMgY2FsY3VsYXRlIHNpemVzXG5cdFx0d2lsZENvdW50ID0gMFxuXHRcdGZvciBjb2x1bW4gaW4gY29sdW1uc1xuXHRcdFx0bmFtZSA9IGNvbHVtbi5uYW1lXG5cdFx0XHRpZiBjb2x1bW4ud2lkdGhUeXBlIGlzIFwiYXV0b1wiXG5cdFx0XHRcdGlmIGNvbHVtbi53aWR0aFxuXHRcdFx0XHRcdHdpZHRoc1tuYW1lXSA9IGNvbHVtbi53aWR0aFxuXHRcdFx0XHRlbHNlIGlmIGlzRml0XG5cdFx0XHRcdFx0d2lkdGhzW25hbWVdID0gQGRlZmF1bHRGaXRXaWR0aFxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0d2lkdGhzW25hbWVdID0gbnVsbFxuXHRcdFx0XHRcdHdpbGRDb3VudCsrXG5cdFx0XHRcdGlmIHdpZHRoc1tuYW1lXVxuXHRcdFx0XHRcdGZyZWVXaWR0aCAtPSB3aWR0aHNbbmFtZV1cblx0XHRcdGlmIGNvbHVtbi53aWR0aFR5cGUgaXMgXCJmaXRcIlxuXHRcdFx0XHR3aWR0aHNbbmFtZV0gPSBudWxsXG5cdFx0XHRcdHRvdGFsRml0ICs9IChpZiBjb2x1bW4ud2lkdGggdGhlbiBjb2x1bW4ud2lkdGggZWxzZSAxKVxuXG5cdFx0Zm9yIGNvbHVtbiBpbiBjb2x1bW5zXG5cdFx0XHRpZiBjb2x1bW4ud2lkdGhUeXBlIGlzIFwiZml0XCJcblx0XHRcdFx0Zml0V2lkdGggPSAoKGZyZWVXaWR0aCAqIGNvbHVtbi53aWR0aCkgLyB0b3RhbEZpdCkucm91bmQoKVxuXHRcdFx0XHRpZiBmaXRXaWR0aCA8IGNvbHVtbi5taW5XaWR0aFxuXHRcdFx0XHRcdHdpZHRoc1tjb2x1bW4ubmFtZV0gPSBjb2x1bW4ubWluV2lkdGhcblx0XHRcdFx0XHRmcmVlV2lkdGggLT0gY29sdW1uLm1pbldpZHRoXG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHR3aWR0aHNbY29sdW1uLm5hbWVdID0gZml0V2lkdGhcblxuXHRcdFx0XHQjIHdpbGQgY29sdW1uIC0gdW5zZXBjaWZpZWQgd2lkdGhcblx0XHRcdGVsc2UgaWYgY29sdW1uLndpZHRoVHlwZSBpcyBcImF1dG9cIlxuXHRcdFx0XHRpZiB3aWR0aHNbY29sdW1uLm5hbWVdIGlzIG51bGxcblx0XHRcdFx0XHR3aWR0aHNbY29sdW1uLm5hbWVdID0gKGZyZWVXaWR0aCAvIHdpbGRDb3VudCkucm91bmQoKVxuXG5cdFx0cmV0dXJuIHdpZHRoc1xuXG5cblx0ZG9EZXN0cm95OiAtPlxuXHRcdHdpbmRvdy51bihcInJlc2l6ZVwiLCBAYm91bmQoXCJvbldpbmRvd1Jlc2l6ZVwiKSlcblx0XHRAcmVuZGVyZXIgPSBudWxsXG5cdFx0c3VwZXIoKVxuXHRcdHJldHVyblxuXG5cbm1vZHVsZS5leHBvcnRzID0gV2lkdGhNYW5hZ2VyXG5cblxuIiwiUG9wb3ZlciA9IHJlcXVpcmUgJy4uLy4uL3RpcC9Qb3BvdmVyJ1xuQnV0dG9uID0gcmVxdWlyZSAnLi4vLi4vYnV0dG9ucy9CdXR0b24nXG5cblxuY2xhc3MgUG9wb3ZlclN1Ym1pdCBleHRlbmRzIFBvcG92ZXJcblxuXHRvblN1Ym1pdDogbnVsbFxuXHRvbkNhbmNlbDogbnVsbFxuXHR3aWR0aDogMTQ1XG5cblx0ZG9Jbml0OiAtPlxuXHRcdHN1cGVyXG5cdFx0QGVsLmFkZENsYXNzKCdncmlkLXBvcG92ZXItc3VibWl0JylcblxuXHRcdGJ1dHRvblllcyA9IG5ldyBCdXR0b25cblx0XHRcdHRleHQ6ICdZZXMnXG5cdFx0XHR0eXBlOiAncHJpbWFyeSdcblx0XHRcdGhhbmRsZXI6ID0+XG5cdFx0XHRcdEBvblN1Ym1pdCgpIGlmIEBvblN1Ym1pdFxuXHRcdFx0XHRAY2xvc2UoKVxuXHRcdFx0XHRyZXR1cm5cblx0XHRAYWRkKCd5ZXMnLCBidXR0b25ZZXMpXG5cblx0XHRidXR0b25ObyA9IG5ldyBCdXR0b25cblx0XHRcdHRleHQ6ICdObydcblx0XHRcdHR5cGU6ICdkZWZhdWx0J1xuXHRcdFx0aGFuZGxlcjogPT5cblx0XHRcdFx0QG9uQ2FuY2VsKCkgaWYgQG9uQ2FuY2VsXG5cdFx0XHRcdEBjbG9zZSgpXG5cdFx0XHRcdHJldHVyblxuXHRcdEBhZGQoJ25vJywgYnV0dG9uTm8pXG5cdFx0cmV0dXJuXG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IFBvcG92ZXJTdWJtaXQiLCJtaXdvLnJlZ2lzdGVyRXh0ZW5zaW9uKCdtaXdvLXVpJywgcmVxdWlyZSAnLi9EaUV4dGVuc2lvbicpXG5taXdvLnRyYW5zbGF0b3Iuc2V0VHJhbnNsYXRlcygnZW4nLCAnbWl3bycsIHJlcXVpcmUoJy4vdHJhbnNsYXRlcycpKVxuXG4jIGNsYXNzZXNcbk1pd28udWkgPSB7fVxuTWl3by5kcmFnID0gcmVxdWlyZSAnLi9kcmFnJ1xuTWl3by5ub3RpZnkgPSByZXF1aXJlICcuL25vdGlmeSdcbk1pd28uYnV0dG9ucyA9IHJlcXVpcmUgJy4vYnV0dG9ucydcbk1pd28ubmF2YmFyID0gcmVxdWlyZSAnLi9uYXZiYXInXG5NaXdvLmRyb3Bkb3duID0gcmVxdWlyZSAnLi9kcm9wZG93bidcbk1pd28uaW5wdXQgPSByZXF1aXJlICcuL2lucHV0J1xuTWl3by5waWNrZXIgPSByZXF1aXJlICcuL3BpY2tlcidcbk1pd28ucGFnaW5hdGlvbiA9IHJlcXVpcmUgJy4vcGFnaW5hdGlvbidcbk1pd28uZm9ybSA9IHJlcXVpcmUgJy4vZm9ybSdcbk1pd28ucGFuZWwgPSByZXF1aXJlICcuL3BhbmVsJ1xuTWl3by53aW5kb3cgPSByZXF1aXJlICcuL3dpbmRvdydcbk1pd28udGFicyA9IHJlcXVpcmUgJy4vdGFicydcbk1pd28uc2VsZWN0aW9uID0gcmVxdWlyZSAnLi9zZWxlY3Rpb24nXG5NaXdvLmdyaWQgPSByZXF1aXJlICcuL2dyaWQnXG5NaXdvLnRpcCA9IHJlcXVpcmUgJy4vdGlwJ1xuTWl3by5tYXNrID0gcmVxdWlyZSAnLi9tYXNrJ1xuTWl3by5wcm9ncmVzcyA9IHJlcXVpcmUgJy4vcHJvZ3Jlc3MnXG5NaXdvLnVpLnV0aWxzID0gcmVxdWlyZSAnLi91dGlscydcblxuIyBzaG9ydGN1dHNcbk1pd28uRm9ybSA9IE1pd28uZm9ybS5jb250YWluZXIuRm9ybVxuTWl3by5XaW5kb3cgPSBNaXdvLndpbmRvdy5XaW5kb3dcbk1pd28uRm9ybVdpbmRvdyA9IE1pd28ud2luZG93LkZvcm1XaW5kb3dcbk1pd28uVGFicyA9IE1pd28udGFicy5UYWJzXG5NaXdvLkdyaWQgPSBNaXdvLmdyaWQuR3JpZFxuTWl3by5QYW5lID0gTWl3by5wYW5lbC5QYW5lIiwiY2xhc3MgQmFzZUlucHV0IGV4dGVuZHMgTWl3by5Db21wb25lbnRcblxuXHRpc0lucHV0OiB0cnVlXG5cblxuXHRnZXRJbnB1dEVsOiAtPlxuXHRcdHJldHVybiBAaW5wdXRFbFxuXG5cblx0Z2V0SW5wdXRJZDogKG5hbWUgPSAnaW5wdXQnKS0+XG5cdFx0cmV0dXJuIEBpZCsnLScrbmFtZVxuXG5cblx0YWZ0ZXJSZW5kZXI6IC0+XG5cdFx0c3VwZXIoKVxuXHRcdEBmb2N1c0VsID0gQGdldElucHV0RWwoKSBpZiAhQGZvY3VzRWxcblx0XHRAc2V0RGlzYWJsZWQoQGRpc2FibGVkKVxuXHRcdHJldHVyblxuXG5cbm1vZHVsZS5leHBvcnRzID0gQmFzZUlucHV0IiwiQmFzZUlucHV0ID0gcmVxdWlyZSAnLi9CYXNlSW5wdXQnXG5cblxuY2xhc3MgQmFzZVRleHRJbnB1dCBleHRlbmRzIEJhc2VJbnB1dFxuXG5cdGVsOiAnaW5wdXQnXG5cdGRpc2FibGVkOiBmYWxzZVxuXHRyZWFkb25seTogZmFsc2Vcblx0cGxhY2Vob2xkZXI6IG51bGxcblx0dGFiaW5kZXg6IDBcblx0aW5wdXROYW1lOiBudWxsXG5cdGNvbXBvbmVudENsczogJ2Zvcm0tY29udHJvbCdcblxuXG5cdGdldElucHV0RWw6IC0+XG5cdFx0cmV0dXJuIEBlbFxuXG5cblx0c2V0VmFsdWU6ICh2YWx1ZSkgLT5cblx0XHRAZWwuc2V0KFwidmFsdWVcIiwgdmFsdWUpXG5cdFx0cmV0dXJuXG5cblxuXHRnZXRWYWx1ZTogLT5cblx0XHRyZXR1cm4gQGVsLmdldChcInZhbHVlXCIpXG5cblxuXHRzZXREaXNhYmxlZDogKEBkaXNhYmxlZCkgLT5cblx0XHRAZWwuc2V0KFwiZGlzYWJsZWRcIiwgQGRpc2FibGVkKVxuXHRcdHJldHVyblxuXG5cblx0c2V0UmVhZG9ubHk6IChAcmVhZG9ubHkpIC0+XG5cdFx0QGVsLnNldChcInJlYWRvbmx5XCIsIEByZWFkb25seSlcblx0XHRyZXR1cm5cblxuXG5cdHNldFBsYWNlaG9sZGVyOiAoQHBsYWNlaG9sZGVyKSAtPlxuXHRcdEBlbC5zZXQoXCJwbGFjZWhvbGRlclwiLCBAcGxhY2Vob2xkZXIpXG5cdFx0cmV0dXJuXG5cblxuXHRkb1JlbmRlcjogLT5cblx0XHRAZWwuc2V0KFwidGFiaW5kZXhcIiwgQHRhYmluZGV4KVxuXHRcdEBlbC5zZXQoXCJuYW1lXCIsIEBpbnB1dE5hbWUgfHwgQG5hbWUpXG5cdFx0QGVsLnNldChcInBsYWNlaG9sZGVyXCIsIEBwbGFjZWhvbGRlcikgaWYgQHBsYWNlaG9sZGVyIGlzbnQgbnVsbFxuXHRcdEBlbC5zZXQoXCJyZWFkb25seVwiLCBAcmVhZG9ubHkpIGlmIEByZWFkb25seVxuXHRcdEBlbC5zZXQoXCJkaXNhYmxlZFwiLCBAZGlzYWJsZWQpIGlmIEBkaXNhYmxlZFxuXHRcdHJldHVyblxuXG5cbm1vZHVsZS5leHBvcnRzID0gQmFzZVRleHRJbnB1dCIsIkJhc2VJbnB1dCA9IHJlcXVpcmUgJy4vQmFzZUlucHV0J1xuXG5cbmNsYXNzIENoZWNrYm94IGV4dGVuZHMgQmFzZUlucHV0XG5cblx0eHR5cGU6ICdjaGVja2JveGlucHV0J1xuXHRiYXNlQ2xzOiAnY2hlY2tib3gnXG5cdGxhYmVsOiAnJ1xuXHRkaXNhYmxlZDogZmFsc2Vcblx0Y2hlY2tlZDogZmFsc2VcblxuXHRpbnB1dEVsOiBudWxsXG5cdGljb25FbDogbnVsbFxuXHRjaGVja2VyRWw6IG51bGxcblx0bGFiZWxFbDogbnVsbFxuXHR0ZXh0RWw6IG51bGxcblxuXG5cdGRvUmVuZGVyOiAtPlxuXHRcdEBlbC5zZXQgJ2h0bWwnLCBcIlwiXCJcblx0XHQ8bGFiZWwgbWl3by1yZWZlcmVuY2U9XCJsYWJlbEVsXCIgZm9yPScje0BnZXRJbnB1dElkKCl9Jz5cblx0XHRcdDxzcGFuIG1pd28tcmVmZXJlbmNlPVwiY2hlY2tlckVsXCIgY2xhc3M9XCJjaGVja2VyXCIgdGFiaW5kZXg9XCIwXCI+XG5cdFx0XHRcdDxpIG1pd28tcmVmZXJlbmNlPVwiaWNvbkVsXCIgY2xhc3M9XCJmYVwiPjwvaT5cblx0XHRcdFx0PGlucHV0IG1pd28tcmVmZXJlbmNlPVwiaW5wdXRFbFwiIHR5cGU9XCJjaGVja2JveFwiIGlkPScje0BnZXRJbnB1dElkKCl9JyB0YWJpbmRleD1cIi0xXCI+XG5cdFx0XHQ8L3NwYW4+XG5cdFx0XHQ8c3BhbiBtaXdvLXJlZmVyZW5jZT1cInRleHRFbFwiIGNsYXNzPVwibGFiZWwtdGV4dFwiPiN7QGxhYmVsfTwvc3Bhbj5cblx0XHQ8L2xhYmVsPlwiXCJcIlxuXHRcdHJldHVyblxuXG5cblx0YWZ0ZXJSZW5kZXI6IC0+XG5cdFx0c3VwZXIoKVxuXHRcdEBpbnB1dEVsLm9uICdjaGFuZ2UnLCA9PlxuXHRcdFx0aWYgQGRpc2FibGVkIHRoZW4gcmV0dXJuXG5cdFx0XHRAc2V0Q2hlY2tlZChAZ2V0VmFsdWUoKSlcblx0XHRcdEBlbWl0KCdjaGFuZ2UnLCB0aGlzLCBAZ2V0VmFsdWUoKSlcblx0XHRcdEBzZXRGb2N1cygpXG5cdFx0XHRyZXR1cm5cblxuXHRcdEBpbnB1dEVsLm9uICdmb2N1cycsID0+XG5cdFx0XHRpZiBAZGlzYWJsZWQgdGhlbiByZXR1cm5cblx0XHRcdEBzZXRGb2N1cygpXG5cdFx0XHRyZXR1cm5cblxuXHRcdEBjaGVja2VyRWwub24gJ2ZvY3VzJywgPT5cblx0XHRcdGlmIEBkaXNhYmxlZCB0aGVuIHJldHVyblxuXHRcdFx0QHNldEZvY3VzKClcblx0XHRcdHJldHVyblxuXG5cdFx0QGNoZWNrZXJFbC5vbiAna2V5ZG93bicsIChlKSA9PlxuXHRcdFx0aWYgQGRpc2FibGVkIHRoZW4gcmV0dXJuXG5cdFx0XHRpZiBlLmtleSBpcyAnc3BhY2UnIG9yIGUua2V5IGlzICdlbnRlcidcblx0XHRcdFx0ZS5zdG9wKClcblx0XHRcdFx0QHNldENoZWNrZWQoIUBjaGVja2VkKVxuXHRcdFx0cmV0dXJuXG5cblx0XHRAaW5wdXRFbC5vbiAnYmx1cicsID0+XG5cdFx0XHRpZiBAZGlzYWJsZWQgdGhlbiByZXR1cm5cblx0XHRcdEBibHVyKClcblx0XHRcdHJldHVyblxuXG5cdFx0QGZvY3VzRWwgPSBAY2hlY2tlckVsXG5cdFx0QHNldENoZWNrZWQoQGNoZWNrZWQpXG5cdFx0cmV0dXJuXG5cblxuXHRibHVyOiAtPlxuXHRcdHN1cGVyKClcblx0XHRAZWwucmVtb3ZlQ2xhc3MoJ2ZvY3VzJylcblx0XHRyZXR1cm5cblxuXG5cdHNldENoZWNrZWQ6IChAY2hlY2tlZCkgLT5cblx0XHRAZWwudG9nZ2xlQ2xhc3MoJ2NoZWNrZWQnLCBAY2hlY2tlZClcblx0XHRAaW5wdXRFbC5zZXQoJ2NoZWNrZWQnLCBAY2hlY2tlZClcblx0XHRAdXBkYXRlSWNvbkNscygpXG5cdFx0cmV0dXJuXG5cblxuXHRpc0NoZWNrZWQ6IC0+XG5cdFx0cmV0dXJuIEBjaGVja2VkXG5cblxuXHRzZXREaXNhYmxlZDogKEBkaXNhYmxlZCkgLT5cblx0XHRAZWwudG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJywgQGRpc2FibGVkKVxuXHRcdEBpbnB1dEVsLnNldCgnZGlzYWJsZWQnLCBAZGlzYWJsZWQpXG5cdFx0QGNoZWNrZXJFbC5zZXQoJ3RhYmluZGV4JywgLUBkaXNhYmxlZClcblx0XHRAdXBkYXRlSWNvbkNscygpXG5cdFx0cmV0dXJuXG5cblxuXHR1cGRhdGVJY29uQ2xzOiAtPlxuXHRcdEBpY29uRWwucmVtb3ZlQ2xhc3MoJ2ZhLWNoZWNrLXNxdWFyZS1vJykucmVtb3ZlQ2xhc3MoJ2ZhLXNxdWFyZS1vJykucmVtb3ZlQ2xhc3MoJ2ZhLWNoZWNrLXNxdWFyZScpLnJlbW92ZUNsYXNzKCdmYS1zcXVhcmUnKVxuXHRcdGlmIEBkaXNhYmxlZFxuXHRcdFx0QGljb25FbC5hZGRDbGFzcyhpZiBAY2hlY2tlZCB0aGVuICdmYS1jaGVjay1zcXVhcmUnIGVsc2UgJ2ZhLXNxdWFyZScpXG5cdFx0ZWxzZVxuXHRcdFx0QGljb25FbC5hZGRDbGFzcyhpZiBAY2hlY2tlZCB0aGVuICdmYS1jaGVjay1zcXVhcmUtbycgZWxzZSAnZmEtc3F1YXJlLW8nKVxuXHRcdHJldHVyblxuXG5cblx0c2V0TGFiZWw6IChsYWJlbCkgLT5cblx0XHRAdGV4dEVsLnNldCgndGV4dCcsIGxhYmVsKVxuXHRcdHJldHVyblxuXG5cblx0c2V0VmFsdWU6IChjaGVja2VkKSAtPlxuXHRcdEBzZXRDaGVja2VkKCEhY2hlY2tlZClcblx0XHRyZXR1cm5cblxuXG5cdGdldFZhbHVlOiAtPlxuXHRcdHJldHVybiBAaXNDaGVja2VkKClcblxuXG5tb2R1bGUuZXhwb3J0cyA9IENoZWNrYm94IiwiQ2hlY2tib3ggPSByZXF1aXJlICcuL0NoZWNrYm94J1xuXG5cbmNsYXNzIENoZWNrYm94TGlzdCBleHRlbmRzIE1pd28uQ29udGFpbmVyXG5cblx0eHR5cGU6ICdjaGVja2JveGxpc3RpbnB1dCdcblx0aXNJbnB1dDogdHJ1ZVxuXHRpbmxpbmU6IGZhbHNlXG5cdGJhc2VDbHM6ICdjaGVja2JveGxpc3QnXG5cblxuXHRzZXRDaGVja2VkOiAobmFtZSwgY2hlY2tlZCkgLT5cblx0XHRAZ2V0KG5hbWUpLnNldENoZWNrZWQoY2hlY2tlZClcblx0XHRyZXR1cm5cblxuXG5cdHNldERpc2FibGVkOiAobmFtZSwgZGlzYWJsZWQpIC0+XG5cdFx0aWYgVHlwZS5pc1N0cmluZyhuYW1lKVxuXHRcdFx0QGdldChuYW1lKS5zZXREaXNhYmxlZChkaXNhYmxlZClcblx0XHRlbHNlXG5cdFx0XHRkaXNhYmxlZCA9IG5hbWVcblx0XHRcdEBjb21wb25lbnRzLmVhY2ggKGNoZWNrYm94KT0+XG5cdFx0XHRcdGNoZWNrYm94LnNldERpc2FibGVkKGRpc2FibGVkKVxuXHRcdFx0XHRyZXR1cm5cblx0XHRyZXR1cm5cblxuXG5cdHNldFZhbHVlOiAodmFsdWUpIC0+XG5cdFx0QGNvbXBvbmVudHMuZWFjaCAoY2hlY2tib3gsIG5hbWUpPT5cblx0XHRcdGNoZWNrYm94LnNldENoZWNrZWQodmFsdWUuaW5kZXhPZihuYW1lKT49MClcblx0XHRcdHJldHVyblxuXHRcdHJldHVyblxuXG5cblx0Z2V0VmFsdWU6IC0+XG5cdFx0dmFsdWUgPSBbXVxuXHRcdEBjb21wb25lbnRzLmVhY2ggKGNoZWNrYm94LCBuYW1lKT0+XG5cdFx0XHRpZiBjaGVja2JveC5pc0NoZWNrZWQoKSAmJiAhY2hlY2tib3guZGlzYWJsZWRcblx0XHRcdFx0dmFsdWUucHVzaChuYW1lKVxuXHRcdFx0cmV0dXJuXG5cdFx0cmV0dXJuIHZhbHVlXG5cblxuXHRhZGRJdGVtOiAobmFtZSwgbGFiZWwpIC0+XG5cdFx0QGFkZChuYW1lLCBAY3JlYXRlQ2hlY2tib3gobmFtZSwgbGFiZWwpKVxuXHRcdHJldHVyblxuXG5cblx0Y3JlYXRlQ2hlY2tib3g6IChuYW1lLCBsYWJlbCkgLT5cblx0XHRjaGVja2JveCA9IG5ldyBDaGVja2JveFxuXHRcdFx0aWQ6IEBpZCsnLScrbmFtZVxuXHRcdFx0bGFiZWw6IGxhYmVsXG5cdFx0XHRjbHM6IGlmIEBpbmxpbmUgdGhlbiAnY2hlY2tib3gtaW5saW5lJyBlbHNlIG51bGxcblxuXHRcdGNoZWNrYm94Lm9uICdjaGFuZ2UnLCA9PlxuXHRcdFx0QGVtaXQoJ2NoYW5nZScsIHRoaXMpXG5cdFx0XHRyZXR1cm5cblxuXHRcdGNoZWNrYm94Lm9uICdibHVyJywgPT5cblx0XHRcdEBlbWl0KCdibHVyJywgdGhpcylcblx0XHRcdHJldHVyblxuXG5cdFx0Y2hlY2tib3gub24gJ2ZvY3VzJywgPT5cblx0XHRcdEBlbWl0KCdmb2N1cycsIHRoaXMpXG5cdFx0XHRyZXR1cm5cblxuXHRcdHJldHVybiBjaGVja2JveFxuXG5cblx0Y2xlYXI6IC0+XG5cdFx0QGNvbXBvbmVudHMuZWFjaCAoY29tcG9uZW50LCBuYW1lKSA9PlxuXHRcdFx0QHJlbW92ZUNvbXBvbmVudChuYW1lKVxuXHRcdFx0Y29tcG9uZW50LmRlc3Ryb3koKVxuXHRcdFx0cmV0dXJuXG5cdFx0cmV0dXJuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBDaGVja2JveExpc3QiLCJCdXR0b24gPSByZXF1aXJlICcuLi9idXR0b25zL0J1dHRvbidcbkJhc2VJbnB1dCA9IHJlcXVpcmUgJy4vQmFzZUlucHV0J1xuXG5cbmNsYXNzIENvbG9ySW5wdXQgZXh0ZW5kcyBCYXNlSW5wdXRcblxuXHR4dHlwZTogXCJjb2xvcmlucHV0XCJcblx0YmFzZUNsczogJ2NvbG9yZmllbGQnXG5cdHZhbHVlOiAnI2ZmZmZmZidcblx0cmVhZG9ubHk6IGZhbHNlXG5cdHJlc2V0dGFibGU6IGZhbHNlXG5cdHBpY2tlclBsYWNlbWVudDogJ2JvdHRvbSdcblxuXHRwb3BvdmVyOiBudWxsXG5cblxuXHRkb1JlbmRlcjogLT5cblx0XHRAZWwuYWRkQ2xhc3MoJ2NsZWFyZml4JylcblxuXHRcdEBpbnB1dEVsID0gbmV3IEVsZW1lbnQgJ2lucHV0Jyxcblx0XHRcdGlkOiBAZ2V0SW5wdXRJZCgpXG5cdFx0XHRjbHM6ICdmb3JtLWNvbnRyb2wgJytAZ2V0QmFzZUNscygnY29sb3InKVxuXHRcdFx0dHlwZTogJ2NvbG9yJ1xuXHRcdFx0dGFiaW5kZXg6IDBcblx0XHRcdHBhcmVudDogQGVsXG5cblx0XHRAdGV4dEVsID0gbmV3IEVsZW1lbnQgJ2lucHV0Jyxcblx0XHRcdGlkOiBAZ2V0SW5wdXRJZCgnY29sb3InKVxuXHRcdFx0Y2xzOiAnZm9ybS1jb250cm9sICcrQGdldEJhc2VDbHMoJ3RleHQnKVxuXHRcdFx0dHlwZTogJ3RleHQnXG5cdFx0XHR0YWJpbmRleDogLTFcblx0XHRcdHBhcmVudDogQGVsXG5cblx0XHRAcmVzZXRCdG4gPSBuZXcgQnV0dG9uXG5cdFx0XHRpY29uOiAncmVtb3ZlJ1xuXHRcdFx0dmlzaWJsZTogQHJlc2V0dGFibGVcblx0XHRcdGhhbmRsZXI6ID0+XG5cdFx0XHRcdEBlbWl0KCdyZXNldCcsIHRoaXMpXG5cdFx0XHRcdEBzZXRGb2N1cygpXG5cdFx0XHRcdHJldHVyblxuXHRcdEByZXNldEJ0bi5yZW5kZXIoQGVsKVxuXG5cdFx0QGlucHV0RWwub24gJ2NsaWNrJywgQGJvdW5kKCdvbklucHV0Q2xpY2snKVxuXHRcdEB0ZXh0RWwub24gJ21vdXNlZG93bicsIEBib3VuZCgnb25JbnB1dENsaWNrJylcblx0XHRyZXR1cm5cblxuXG5cdG9uSW5wdXRDbGljazogKGV2ZW50KSAtPlxuXHRcdGV2ZW50LnN0b3AoKVxuXHRcdEBzZXRGb2N1cygpIGlmIEBmb2N1c1xuXHRcdEBvcGVuUGlja2VyKClcblx0XHRyZXR1cm5cblxuXG5cdGFmdGVyUmVuZGVyOiAtPlxuXHRcdHN1cGVyKClcblx0XHRAaW5wdXRFbC5vbiAna2V5ZG93bicsIChldmVudCk9PlxuXHRcdFx0aWYgZXZlbnQua2V5IGlzICdzcGFjZScgb3IgZXZlbnQua2V5IGlzICdlbnRlcidcblx0XHRcdFx0ZXZlbnQuc3RvcCgpXG5cdFx0XHRcdEBvcGVuUGlja2VyKClcblx0XHRcdHJldHVyblxuXG5cdFx0QGlucHV0RWwub24gJ2ZvY3VzJywgPT5cblx0XHRcdEBzZXRGb2N1cygpXG5cdFx0XHRyZXR1cm5cblxuXHRcdEBpbnB1dEVsLm9uICdibHVyJywgPT5cblx0XHRcdEBibHVyKClcblx0XHRcdHJldHVyblxuXHRcdHJldHVyblxuXG5cblx0c2V0VmFsdWU6ICh2YWx1ZSkgLT5cblx0XHRAaW5wdXRFbC5zZXQoXCJ2YWx1ZVwiLCB2YWx1ZSlcblx0XHRAdGV4dEVsLnNldChcInZhbHVlXCIsIHZhbHVlKVxuXHRcdHJldHVybiB0aGlzXG5cblxuXHRnZXRWYWx1ZTogLT5cblx0XHRyZXR1cm4gQGlucHV0RWwuZ2V0KFwidmFsdWVcIilcblxuXG5cdHNldERpc2FibGVkOiAoZGlzYWJsZWQpIC0+XG5cdFx0c3VwZXIoZGlzYWJsZWQpXG5cdFx0QGlucHV0RWwuc2V0KCdkaXNhYmxlZCcsIGRpc2FibGVkKVxuXHRcdEB0ZXh0RWwuc2V0KCdkaXNhYmxlZCcsIGRpc2FibGVkKVxuXHRcdEByZXNldEJ0bi5zZXREaXNhYmxlZChkaXNhYmxlZClcblx0XHRyZXR1cm4gdGhpc1xuXG5cblx0c2V0UmVzZXR0YWJsZTogKEByZXNldHRhYmxlKSAtPlxuXHRcdEByZXNldEJ0bi5zZXRWaXNpYmxlKEByZXNldHRhYmxlKVxuXHRcdHJldHVybiB0aGlzXG5cblxuXHRvcGVuUGlja2VyOiAtPlxuXHRcdGlmIEBkaXNhYmxlZCB8fCBAcmVhZG9ubHkgdGhlbiByZXR1cm5cblx0XHRAcG9wb3ZlciA9IEBjcmVhdGVQaWNrZXIoKSBpZiAhQHBvcG92ZXJcblx0XHRAcG9wb3Zlci5zaG93KClcblx0XHRAcG9wb3Zlci5nZXQoJ3BpY2tlcicpLnNldENvbG9yKEBnZXRWYWx1ZSgpKVxuXHRcdHJldHVyblxuXG5cblx0aGlkZVBpY2tlcjogLT5cblx0XHRAcG9wb3Zlci5jbG9zZSgpXG5cdFx0cmV0dXJuXG5cblxuXHRjcmVhdGVQaWNrZXI6IC0+XG5cdFx0cG9wb3ZlciA9IG1pd28ucGlja2Vycy5jcmVhdGVQb3BvdmVyUGlja2VyICdjb2xvcicsXG5cdFx0XHR0YXJnZXQ6IEBpbnB1dEVsXG5cdFx0XHRwbGFjZW1lbnQ6IEBwaWNrZXJQbGFjZW1lbnRcblx0XHRwaWNrZXIgPSBwb3BvdmVyLmdldCgncGlja2VyJylcblx0XHRwaWNrZXIub24gJ2NoYW5nZWQnLCAocGlja2VyLCBoZXgpID0+XG5cdFx0XHR2YWx1ZSA9IEBmb3JtYXRDb2xvcihoZXgpXG5cdFx0XHRAZW1pdChcImNoYW5nZWRcIiwgdGhpcywgdmFsdWUpXG5cdFx0XHRyZXR1cm5cblx0XHRwaWNrZXIub24gJ3NlbGVjdGVkJywgKHBpY2tlciwgaGV4KSA9PlxuXHRcdFx0dmFsdWUgPSBAZm9ybWF0Q29sb3IoaGV4KVxuXHRcdFx0QHNldFZhbHVlKHZhbHVlKVxuXHRcdFx0QGVtaXQoJ3NlbGVjdGVkJywgdGhpcywgdmFsdWUpXG5cdFx0XHRAaGlkZVBpY2tlcigpXG5cdFx0XHRyZXR1cm5cblx0XHRwb3BvdmVyLm9uICdjbG9zZScsID0+XG5cdFx0XHRAcG9wb3ZlciA9IG51bGxcblx0XHRcdEBzZXRGb2N1cygpXG5cdFx0XHRAZW1pdChcImNoYW5nZWRcIiwgdGhpcywgQGdldFZhbHVlKCkpXG5cdFx0XHRyZXR1cm5cblx0XHRyZXR1cm4gcG9wb3ZlclxuXG5cblx0Zm9ybWF0Q29sb3I6IChjb2xvcikgLT5cblx0XHRyZXR1cm4gJyMnICsgY29sb3IudG9Mb3dlckNhc2UoKVxuXG5cblx0ZG9EZXN0cm95OiAtPlxuXHRcdEBwb3BvdmVyLmRlc3Ryb3koKSBpZiBAcG9wb3ZlclxuXHRcdEByZXNldEJ0bi5kZXN0cm95KCkgaWYgQHJlc2V0QnRuXG5cdFx0c3VwZXIoKVxuXG5cbm1vZHVsZS5leHBvcnRzID0gQ29sb3JJbnB1dCIsIlNjcmVlbk1hc2sgPSByZXF1aXJlICcuLi91dGlscy9TY3JlZW5NYXNrJ1xuQmFzZUlucHV0ID0gcmVxdWlyZSAnLi9CYXNlSW5wdXQnXG5cblxuY2xhc3MgQ29tYm9JbnB1dCBleHRlbmRzIEJhc2VJbnB1dFxuXG5cdHh0eXBlOiAnY29tYm9pbnB1dCdcblx0cm9sZTogJ2NvbWJvYm94J1xuXHRoaWRlU2VsZWN0ZWQ6IGZhbHNlXG5cdG11bHRpcGxlOiBmYWxzZVxuXHRoZWlnaHQ6IG51bGxcblx0cGxhY2Vob2xkZXI6ICcnXG5cdHByb21wdDogZmFsc2VcblxuXHRpdGVtczogbnVsbFxuXHRkaXNhYmxlZDogZmFsc2Vcblx0b3BlbmVkOiBmYWxzZVxuXHRpbnB1dEVsOiBudWxsXG5cdHJlc2V0RWw6IG51bGxcblx0ZHJvcGRvd25FbDogbnVsbFxuXHRkcm9wZG93bkl0ZW1zRWw6IG51bGxcblx0YWN0aXZlSXRlbUluZGV4OiAtMVxuXHRhY3RpdmVWYWx1ZUluZGV4OiAtMVxuXHRhY3RpdmU6IGZhbHNlXG5cdHNjcmVlbk1hc2s6IG51bGxcblxuXG5cdGNvbnN0cnVjdG9yOiAoY29uZmlnKSAtPlxuXHRcdHN1cGVyKGNvbmZpZylcblx0XHRAaXRlbXMgPSBbXVxuXHRcdHJldHVyblxuXG5cblx0YWZ0ZXJJbml0OiAtPlxuXHRcdHN1cGVyKClcblx0XHQjIGNyZWF0ZSBsYXlvdXRcblx0XHRAZWwuc2V0ICdodG1sJyxcblx0XHQnPGRpdiBjbGFzcz1cImNvbWJvLWlucHV0XCI+Jytcblx0XHRcdCc8c3BhbiBjbGFzcz1cImNvbWJvLWlucHV0LXRleHRcIj4nK0BwbGFjZWhvbGRlcisnPC9zcGFuPicrXG5cdFx0XHQnPHNwYW4gY2xhc3M9XCJjb21iby1pbnB1dC1yZXNldFwiIHN0eWxlPVwiZGlzcGxheTogbm9uZTtcIj48aSBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZVwiPjwvaT48L3NwYW4+Jytcblx0XHRcdCc8c3BhbiBjbGFzcz1cImNvbWJvLWlucHV0LWFycm93XCI+PGkgY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tZG93blwiPjwvaT48L3NwYW4+Jytcblx0XHQnPC9kaXY+Jytcblx0XHQnPGlucHV0IG5hbWU9XCInK0BuYW1lKydcIiBjbGFzcz1cInNjcmVlbi1vZmZcIiBpZD1cIicrQGlkKyctaW5wdXRcIiB0eXBlPVwidGV4dFwiIHJvbGU9XCJidXR0b25cIiBhcmlhLWhhc3BvcHVwPVwidHJ1ZVwiIGFyaWEtbGFiZWxsZWRieT1cIicrQGlkKyctaW5wdXRcIiB0YWJpbmRleD1cIi0xXCIgPidcblx0XHRAZWwuc2V0KCd0YWJpbmRleCcsIDApXG5cblx0XHQjIHJlZmVyZW5jZXNcblx0XHRAY29udHJvbCA9IEBlbC5nZXRFbGVtZW50KCcuY29tYm8taW5wdXQnKVxuXHRcdEBpbnB1dEVsID0gQGVsLmdldEVsZW1lbnQoJ2lucHV0Jylcblx0XHRAdGV4dEVsID0gQGVsLmdldEVsZW1lbnQoJy5jb21iby1pbnB1dC10ZXh0Jylcblx0XHRAcmVzZXRFbCA9IEBlbC5nZXRFbGVtZW50KCcuY29tYm8taW5wdXQtcmVzZXQnKVxuXG5cdFx0QHNjcmVlbk1hc2sgPSBuZXcgU2NyZWVuTWFzayAoKSA9PiBAY2xvc2UoKVxuXG5cdFx0IyBjcmVhdGUgZHJvcGRvd24gbGlzdFxuXHRcdEBkcm9wZG93bkVsID0gbmV3IEVsZW1lbnQgJ2RpdicsXG5cdFx0XHRjbHM6ICdjb21iby1kcm9wZG93bidcblx0XHRAZHJvcGRvd25JdGVtc0VsID0gbmV3IEVsZW1lbnQgJ2RpdicsXG5cdFx0XHRjbHM6ICdjb21iby1kcm9wZG93bi1pdGVtcydcblx0XHRcdHBhcmVudDogQGRyb3Bkb3duRWxcblx0XHRyZXR1cm5cblxuXG5cdGRvUmVuZGVyOiAtPlxuXHRcdEBlbC5hZGRDbGFzcygnZm9ybS1jb250cm9sIGNvbWJvIGNvbWJvLWVtcHR5Jylcblx0XHRAZWwuc2V0U3R5bGUoJ2hlaWdodCcsIEBoZWlnaHQpIGlmIEBoZWlnaHRcblxuXHRcdCMgYmluZCBldmVudHNcblx0XHRAZWwub24gJ21vdXNlZG93bicsIChldmVudCkgPT5cblx0XHRcdGlmIEBkaXNhYmxlZCB0aGVuIGV2ZW50LnN0b3AoKVxuXHRcdFx0cmV0dXJuXG5cblx0XHRAZWwub24gJ2NsaWNrJywgPT5cblx0XHRcdGlmIEBkaXNhYmxlZCB0aGVuIHJldHVyblxuXHRcdFx0QHNldEZvY3VzKClcblx0XHRcdEBvcGVuKClcblx0XHRcdHJldHVyblxuXHRcdEBlbC5vbiAnZm9jdXMnLCA9PlxuXHRcdFx0aWYgQGRpc2FibGVkIHRoZW4gcmV0dXJuXG5cdFx0XHRAc2V0Rm9jdXMoKVxuXHRcdFx0cmV0dXJuXG5cdFx0QGVsLm9uICdibHVyJywgPT5cblx0XHRcdGlmIEBkaXNhYmxlZCB0aGVuIHJldHVyblxuXHRcdFx0QGJsdXIoKVxuXHRcdFx0cmV0dXJuXG5cdFx0QGRyb3Bkb3duRWwub24gJ2NsaWNrOnJlbGF5KC5jb21iby1kcm9wZG93bi1pdGVtKScsIChldmVudCwgdGFyZ2V0KSA9PlxuXHRcdFx0ZXZlbnQuc3RvcCgpXG5cdFx0XHRpZiB0YXJnZXQuaGFzQ2xhc3MoJ2Rpc2FibGVkJykgdGhlbiByZXR1cm5cblx0XHRcdHZhbCA9IHRhcmdldC5nZXQoJ2RhdGEtdmFsdWUnKVxuXHRcdFx0QHNldFZhbHVlKChpZiBAbXVsdGlwbGUgdGhlbiBAZ2V0VmFsdWUoKS5pbmNsdWRlKHZhbCkgZWxzZSB2YWwpKVxuXHRcdFx0QGNsb3NlKClcblx0XHRcdHJldHVyblxuXHRcdEBkcm9wZG93bkVsLm9uICdtb3VzZWVudGVyOnJlbGF5KC5jb21iby1kcm9wZG93bi1pdGVtKScsIChldmVudCwgdGFyZ2V0KSA9PlxuXHRcdFx0ZXZlbnQuc3RvcCgpXG5cdFx0XHRpZiB0YXJnZXQuaGFzQ2xhc3MoJ2Rpc2FibGVkJykgdGhlbiByZXR1cm5cblx0XHRcdEBhY3RpdmF0ZUl0ZW0odGFyZ2V0LmdldCgnZGF0YS1pbmRleCcpKVxuXHRcdFx0cmV0dXJuXG5cdFx0QHRleHRFbC5vbiAnY2xpY2s6cmVsYXkoLmNvbWJvLWlucHV0LXRleHQgbGkpJywgKGV2ZW50LCB0YXJnZXQpID0+XG5cdFx0XHRpZiBAZGlzYWJsZWQgdGhlbiByZXR1cm5cblx0XHRcdGV2ZW50LnN0b3AoKVxuXHRcdFx0aWYgdGFyZ2V0Lmhhc0NsYXNzKCdkaXNhYmxlZCcpIHRoZW4gcmV0dXJuXG5cdFx0XHR2YWwgPSB0YXJnZXQuZ2V0KCdkYXRhLXZhbHVlJylcblx0XHRcdEBzZXRWYWx1ZShAZ2V0VmFsdWUoKS5lcmFzZSh2YWwpKVxuXHRcdFx0cmV0dXJuXG5cdFx0QHRleHRFbC5vbiAnbW91c2VlbnRlcjpyZWxheShsaSknLCAoZXZlbnQsIHRhcmdldCkgPT5cblx0XHRcdGlmIEBkaXNhYmxlZCB0aGVuIHJldHVyblxuXHRcdFx0ZXZlbnQuc3RvcCgpXG5cdFx0XHRpZiB0YXJnZXQuaGFzQ2xhc3MoJ2Rpc2FibGVkJykgdGhlbiByZXR1cm5cblx0XHRcdEBhY3RpdmF0ZVZhbHVlKHBhcnNlSW50KHRhcmdldC5nZXQoJ2RhdGEtaW5kZXgnKSkpXG5cdFx0XHRyZXR1cm5cblx0XHRAdGV4dEVsLm9uICdtb3VzZWxlYXZlOnJlbGF5KGxpKScsIChldmVudCwgdGFyZ2V0KSA9PlxuXHRcdFx0aWYgQGRpc2FibGVkIHRoZW4gcmV0dXJuXG5cdFx0XHRldmVudC5zdG9wKClcblx0XHRcdGlmIHRhcmdldC5oYXNDbGFzcygnZGlzYWJsZWQnKSB0aGVuIHJldHVyblxuXHRcdFx0QGFjdGl2YXRlVmFsdWUoLTEpXG5cdFx0XHRyZXR1cm5cblx0XHRAcmVzZXRFbC5vbiAnY2xpY2snLCAoZXZlbnQpID0+XG5cdFx0XHRpZiBAZGlzYWJsZWQgdGhlbiByZXR1cm5cblx0XHRcdGV2ZW50LnN0b3AoKVxuXHRcdFx0QHNldFZhbHVlKClcblx0XHRcdHJldHVyblxuXG5cdFx0QGtleUxpc3RlbmVyID0gbmV3IE1pd28udXRpbHMuS2V5TGlzdGVuZXIoQGVsLCAna2V5ZG93bicpXG5cdFx0QGtleUxpc3RlbmVyLm9uICdlc2MnLCAoKSA9PlxuXHRcdFx0aWYgQGRpc2FibGVkIHRoZW4gcmV0dXJuXG5cdFx0XHRAY2xvc2UoKVxuXHRcdFx0cmV0dXJuIHRydWVcblx0XHRAa2V5TGlzdGVuZXIub24gJ3VwJywgKCkgPT5cblx0XHRcdGlmIEBkaXNhYmxlZCB0aGVuIHJldHVyblxuXHRcdFx0QG9wZW4oKVxuXHRcdFx0QGFjdGl2YXRlUHJldkl0ZW0oKVxuXHRcdFx0cmV0dXJuIHRydWVcblx0XHRAa2V5TGlzdGVuZXIub24gJ2Rvd24nLCAoKSA9PlxuXHRcdFx0aWYgQGRpc2FibGVkIHRoZW4gcmV0dXJuXG5cdFx0XHRAb3BlbigpXG5cdFx0XHRAYWN0aXZhdGVOZXh0SXRlbSgpXG5cdFx0XHRyZXR1cm4gdHJ1ZVxuXHRcdEBrZXlMaXN0ZW5lci5vbiAnbGVmdCcsICgpID0+XG5cdFx0XHRpZiBAZGlzYWJsZWQgdGhlbiByZXR1cm5cblx0XHRcdEBhY3RpdmF0ZVByZXZWYWx1ZSgpIGlmIEBtdWx0aXBsZVxuXHRcdFx0cmV0dXJuIHRydWVcblx0XHRAa2V5TGlzdGVuZXIub24gJ3JpZ2h0JywgKCkgPT5cblx0XHRcdGlmIEBkaXNhYmxlZCB0aGVuIHJldHVyblxuXHRcdFx0QGFjdGl2YXRlTmV4dFZhbHVlKCkgaWYgQG11bHRpcGxlXG5cdFx0XHRyZXR1cm4gdHJ1ZVxuXHRcdEBrZXlMaXN0ZW5lci5vbiAnYmFja3NwYWNlJywgKCkgPT5cblx0XHRcdGlmIEBkaXNhYmxlZCB0aGVuIHJldHVyblxuXHRcdFx0aWYgIUBvcGVuZWRcblx0XHRcdFx0aWYgKGl0ZW0gPSBAZ2V0QWN0aXZlVmFsdWUoKSkgJiYgIWl0ZW0uaGFzQ2xhc3MoJ2Rpc2FibGVkJylcblx0XHRcdFx0XHR2YWwgPSBpdGVtLmdldCgnZGF0YS12YWx1ZScpXG5cdFx0XHRcdFx0QHNldFZhbHVlKEBnZXRWYWx1ZSgpLmVyYXNlKHZhbCkpXG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRAYWN0aXZhdGVMYXN0VmFsdWUoKVxuXHRcdFx0XHRcdGlmIChpdGVtID0gQGdldEFjdGl2ZVZhbHVlKCkpICYmICFpdGVtLmhhc0NsYXNzKCdkaXNhYmxlZCcpXG5cdFx0XHRcdFx0XHR2YWwgPSBpdGVtLmdldCgnZGF0YS12YWx1ZScpXG5cdFx0XHRcdFx0XHRAc2V0VmFsdWUoQGdldFZhbHVlKCkuZXJhc2UodmFsKSlcblx0XHRcdHJldHVybiB0cnVlXG5cdFx0QGtleUxpc3RlbmVyLm9uICdlbnRlcicsICgpID0+XG5cdFx0XHRpZiBAZGlzYWJsZWQgdGhlbiByZXR1cm5cblx0XHRcdGlmIEBvcGVuZWRcblx0XHRcdFx0aWYgKGl0ZW0gPSBAZ2V0QWN0aXZlSXRlbSgpKSAmJiAhaXRlbS5oYXNDbGFzcygnZGlzYWJsZWQnKVxuXHRcdFx0XHRcdHZhbCA9IGl0ZW0uZ2V0KCdkYXRhLXZhbHVlJylcblx0XHRcdFx0XHRAc2V0VmFsdWUoKGlmIEBtdWx0aXBsZSB0aGVuIEBnZXRWYWx1ZSgpLmluY2x1ZGUodmFsKSBlbHNlIHZhbCkpXG5cdFx0XHRcdFx0QGNsb3NlKClcblx0XHRcdFx0cmV0dXJuIHRydWVcblx0XHRcdHJldHVyblxuXG5cdFx0QGZvY3VzRWwgPSBAZWxcblx0XHRyZXR1cm5cblxuXG5cdHNldFZhbHVlOiAodmFsdWUsIHNpbGVudCkgLT5cblx0XHRpZiB2YWx1ZSBpcyB1bmRlZmluZWQgfHwgdmFsdWUgaXMgbnVsbFxuXHRcdFx0dmFsdWUgPSAnJ1xuXG5cdFx0aWYgIVR5cGUuaXNBcnJheSh2YWx1ZSlcblx0XHRcdHZhbHVlID0gW3ZhbHVlXVxuXG5cdFx0IyBzZXR1cCBkaXNwbGF5ZWQgdmFsdWVzXG5cdFx0aWYgQG11bHRpcGxlXG5cdFx0XHRjb250ZW50ID0gJzx1bD4nXG5cdFx0XHRjb250ZW50ICs9ICc8bGkgY2xhc3M9XCJjb21iby12YWx1ZVwiIGRhdGEtaW5kZXg9XCInK2krJ1wiIGRhdGEtdmFsdWU9XCInK3YrJ1wiID4nK0BnZXRJdGVtVGV4dCh2KSsnPGkgY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZVwiPjwvaT48L2xpPicgZm9yIHYsaSBpbiB2YWx1ZVxuXHRcdFx0Y29udGVudCArPSAnPC91bD4nXG5cdFx0XHRpbnB1dFZhbHVlID0gdmFsdWUuam9pbignLCcpXG5cdFx0ZWxzZVxuXHRcdFx0Y29udGVudCA9IEBnZXRJdGVtVGV4dCh2YWx1ZVswXSlcblx0XHRcdGlucHV0VmFsdWUgPSB2YWx1ZVswXVxuXG5cdFx0QGVsLnRvZ2dsZUNsYXNzKCdjb21iby1lbXB0eScsICFpbnB1dFZhbHVlKVxuXHRcdEB0ZXh0RWwuc2V0KCdodG1sJywgaWYgaW5wdXRWYWx1ZSB0aGVuIGNvbnRlbnQgZWxzZSBAcGxhY2Vob2xkZXIpXG5cblx0XHRpZiBAaW5wdXRFbC5nZXQoJ3ZhbHVlJykgaXNudCBpbnB1dFZhbHVlXG5cdFx0XHRAaW5wdXRFbC5zZXQoJ3ZhbHVlJywgaW5wdXRWYWx1ZSlcblx0XHRcdEBpbnB1dEVsLmVtaXQoJ2NoYW5nZScpICBpZiAhc2lsZW50XG5cdFx0XHRAZW1pdCgnY2hhbmdlJywgdGhpcywgaW5wdXRWYWx1ZSkgIGlmICFzaWxlbnRcblxuXHRcdEBhY3RpdmVWYWx1ZUluZGV4ID0gLTFcblxuXHRcdCMgdXBkYXRlIGRyb3Bkb3duIGxpc3Rcblx0XHRpZiBAaGlkZVNlbGVjdGVkXG5cdFx0XHRmb3IgaXRlbSBpbiBAaXRlbXNcblx0XHRcdFx0c2VsZWN0ZWQgPSB2YWx1ZS5pbmRleE9mKGl0ZW0uZ2V0KCdkYXRhLXZhbHVlJykpID49IDBcblx0XHRcdFx0aXRlbS5zZXRWaXNpYmxlKCFzZWxlY3RlZClcblx0XHRcdFx0aXRlbS50b2dnbGVDbGFzcygnc2VsZWN0ZWQnLCBzZWxlY3RlZClcblxuXHRcdCMgc2hvdyByZXNldCBidXR0b24gaWYgdmFsdWUgc2V0XG5cdFx0QHJlc2V0RWwuc2V0VmlzaWJsZSghQGRpc2FibGVkICYmIEBwcm9tcHQgJiYgdmFsdWVbMF0gaXNudCB1bmRlZmluZWQgJiYgdmFsdWVbMF0gaXNudCAnJylcblx0XHRyZXR1cm5cblxuXG5cdGdldFZhbHVlOiAtPlxuXHRcdHZhbHVlID0gQGlucHV0RWwuZ2V0KCd2YWx1ZScpXG5cdFx0cmV0dXJuIGlmIEBtdWx0aXBsZSB0aGVuIChpZiB2YWx1ZSB0aGVuIHZhbHVlLnNwbGl0KCcsJykgZWxzZSBbXSkgZWxzZSB2YWx1ZVxuXG5cblx0Z2V0SXRlbVRleHQ6ICh2YWx1ZSkgLT5cblx0XHRlbCA9IEBkcm9wZG93bkVsLmdldEVsZW1lbnQoJ1tkYXRhLXZhbHVlPVwiJyt2YWx1ZSsnXCJdJylcblx0XHRyZXR1cm4gaWYgZWwgdGhlbiBlbC5jb21ib1RleHQgZWxzZSAnJ1xuXG5cblx0YWRkT3B0aW9uOiAodmFsdWUsIHRleHQsIGNvbnRlbnQpIC0+XG5cdFx0aXRlbSA9IG5ldyBFbGVtZW50KCdkaXYnLCB7Y2xzOiAnY29tYm8tZHJvcGRvd24taXRlbScsICdkYXRhLXZhbHVlJzogdmFsdWUsIGh0bWw6IGNvbnRlbnR8fHRleHQsICdkYXRhLWluZGV4JzogQGl0ZW1zLmxlbmd0aH0pXG5cdFx0aXRlbS5jb21ib1RleHQgPSB0ZXh0O1xuXHRcdGl0ZW0uaW5qZWN0KEBkcm9wZG93bkl0ZW1zRWwpXG5cdFx0QGl0ZW1zLnB1c2goaXRlbSlcblx0XHRpZiAhQHByb21wdCAmJiBAZ2V0VmFsdWUoKSBpcyAnJyB0aGVuIEBzZXRWYWx1ZSh2YWx1ZSlcblx0XHRyZXR1cm5cblxuXG5cdGFkZE9wdGlvbnM6IChpdGVtcykgLT5cblx0XHRmb3IgaXRlbSBpbiBpdGVtc1xuXHRcdFx0QGFkZE9wdGlvbihpdGVtLnZhbHVlLCBpdGVtLnRleHQsIGl0ZW0uY29udGVudClcblx0XHRyZXR1cm5cblxuXG5cdHNldE9wdGlvbnM6IChpdGVtcykgLT5cblx0XHRAY2xlYXIoKVxuXHRcdEBhZGRPcHRpb25zKGl0ZW1zKVxuXHRcdHJldHVyblxuXG5cblx0c2V0T3B0aW9uRGlzYWJsZWQ6IChuYW1lLCBkaXNhYmxlZCkgLT5cblx0XHRAZ2V0T3B0aW9uKG5hbWUpLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcsIGRpc2FibGVkKVxuXHRcdHJldHVyblxuXG5cblx0Z2V0T3B0aW9uOiAobmFtZSkgLT5cblx0XHRyZXR1cm4gQGRyb3Bkb3duSXRlbXNFbC5nZXRFbGVtZW50KCdbZGF0YS12YWx1ZT1cIicrbmFtZSsnXCJdJylcblxuXG5cdHNldFByb21wdDogKHRleHQpIC0+XG5cdFx0QHByb21wdCA9IHRleHRcblx0XHRyZXR1cm5cblxuXG5cdGNsZWFyOiAtPlxuXHRcdEBpdGVtcy5lbXB0eSgpXG5cdFx0QGRyb3Bkb3duSXRlbXNFbC5lbXB0eSgpXG5cdFx0cmV0dXJuXG5cblxuXHRzZXREaXNhYmxlZDogKGRpc2FibGVkKSAtPlxuXHRcdHN1cGVyKGRpc2FibGVkKVxuXHRcdEBlbC50b2dnbGVDbGFzcygnZGlzYWJsZWQnLCBkaXNhYmxlZClcblx0XHRyZXR1cm5cblxuXG5cdG9wZW46IC0+XG5cdFx0aWYgQG9wZW5lZCB0aGVuIHJldHVyblxuXHRcdEBvcGVuZWQgPSB0cnVlXG5cdFx0QHNldEZvY3VzKClcblxuXHRcdEBlbC5hZGRDbGFzcygnY29tYm8tb3BlbicpXG5cdFx0QHNjcmVlbk1hc2suc2hvdygpXG5cdFx0QGRyb3Bkb3duRWwuaW5qZWN0KG1pd28uYm9keSlcblx0XHRAZHJvcGRvd25FbC5hZGRDbGFzcygnYWN0aXZlJylcblxuXHRcdHBvcyA9IEBlbC5nZXRQb3NpdGlvbigpXG5cdFx0c2l6ZSA9IEBlbC5nZXRTaXplKClcblx0XHRAZHJvcGRvd25FbC5zZXRTdHlsZXNcblx0XHRcdHRvcDogcG9zLnkgKyBzaXplLnlcblx0XHRcdGxlZnQ6IHBvcy54XG5cdFx0XHR3aWR0aDogc2l6ZS54XG5cblx0XHRpZiBAYWN0aXZlSXRlbUluZGV4IDwgMFxuXHRcdFx0QGFjdGl2YXRlTmV4dEl0ZW0oKVxuXHRcdHJldHVyblxuXG5cblx0Y2xvc2U6IC0+XG5cdFx0aWYgIUBvcGVuZWQgdGhlbiByZXR1cm5cblx0XHRAb3BlbmVkID0gZmFsc2Vcblx0XHRAZWwucmVtb3ZlQ2xhc3MoJ2NvbWJvLW9wZW4nKVxuXHRcdEBkcm9wZG93bkVsLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxuXHRcdEBkcm9wZG93bkVsLmRpc3Bvc2UoKVxuXHRcdEBzY3JlZW5NYXNrLmhpZGUoKVxuXHRcdEBzZXRGb2N1cygpXG5cdFx0cmV0dXJuXG5cblxuXHRnZXRBY3RpdmVJdGVtOiAtPlxuXHRcdHJldHVybiBAaXRlbXNbQGFjdGl2ZUl0ZW1JbmRleF0gfHwgbnVsbFxuXG5cblx0YWN0aXZhdGVJdGVtOiAoaW5kZXgpIC0+XG5cdFx0aWYgQGFjdGl2ZUl0ZW1JbmRleCA+PSAwXG5cdFx0XHRAaXRlbXNbQGFjdGl2ZUl0ZW1JbmRleF0ucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG5cdFx0XHRAYWN0aXZlSXRlbUluZGV4ID0gLTFcblx0XHRpZiBpbmRleCA+PSAwICYmIGluZGV4IDwgQGl0ZW1zLmxlbmd0aFxuXHRcdFx0QGl0ZW1zW2luZGV4XS5hZGRDbGFzcygnYWN0aXZlJylcblx0XHRcdEBhY3RpdmVJdGVtSW5kZXggPSBpbmRleFxuXHRcdHJldHVyblxuXG5cblx0YWN0aXZhdGVQcmV2SXRlbTogLT5cblx0XHRhY3RpdmF0ZUluZGV4ID0gbnVsbFxuXHRcdGZvciBpdGVtLGluZGV4IGluIEBpdGVtc1xuXHRcdFx0aWYgIWl0ZW0uaGFzQ2xhc3MoJ3NlbGVjdGVkJykgJiYgIWl0ZW0uaGFzQ2xhc3MoJ2Rpc2FibGVkJykgJiYgaW5kZXggPCBAYWN0aXZlSXRlbUluZGV4XG5cdFx0XHRcdGFjdGl2YXRlSW5kZXggPSBpbmRleFxuXHRcdGlmIGFjdGl2YXRlSW5kZXggaXNudCBudWxsXG5cdFx0XHRAYWN0aXZhdGVJdGVtKGFjdGl2YXRlSW5kZXgpXG5cdFx0cmV0dXJuXG5cblxuXHRhY3RpdmF0ZU5leHRJdGVtOiAtPlxuXHRcdGFjdGl2YXRlSW5kZXggPSBudWxsXG5cdFx0Zm9yIGl0ZW0saW5kZXggaW4gQGl0ZW1zXG5cdFx0XHRpZiAhaXRlbS5oYXNDbGFzcygnc2VsZWN0ZWQnKSAmJiAhaXRlbS5oYXNDbGFzcygnZGlzYWJsZWQnKSAmJiBpbmRleCA+IEBhY3RpdmVJdGVtSW5kZXhcblx0XHRcdFx0YWN0aXZhdGVJbmRleCA9IGluZGV4XG5cdFx0XHRcdGJyZWFrXG5cdFx0aWYgYWN0aXZhdGVJbmRleCBpc250IG51bGxcblx0XHRcdEBhY3RpdmF0ZUl0ZW0oYWN0aXZhdGVJbmRleClcblx0XHRyZXR1cm5cblxuXG5cdGdldFZhbHVlRWxBdDogKGluZGV4KSAtPlxuXHRcdHJldHVybiBAdGV4dEVsLmdldEVsZW1lbnQoJ2xpOm50aC1jaGlsZCgnKyhpbmRleCsxKSsnKScpXG5cblxuXHRnZXRBY3RpdmVWYWx1ZTogLT5cblx0XHRyZXR1cm4gQGdldFZhbHVlRWxBdChAYWN0aXZlVmFsdWVJbmRleCkgfHwgbnVsbFxuXG5cblx0YWN0aXZhdGVWYWx1ZTogKGluZGV4KSAtPlxuXHRcdGlmIEBhY3RpdmVWYWx1ZUluZGV4ID49IDBcblx0XHRcdGFjdGl2ZUl0ZW0gPSBAZ2V0VmFsdWVFbEF0KEBhY3RpdmVWYWx1ZUluZGV4KVxuXHRcdFx0YWN0aXZlSXRlbS5yZW1vdmVDbGFzcygnYWN0aXZlJylcblx0XHRpZiBpbmRleCA+PSAwICYmIGluZGV4IDwgQGdldFZhbHVlKCkubGVuZ3RoXG5cdFx0XHRpdGVtID0gQGdldFZhbHVlRWxBdChpbmRleClcblx0XHRcdGlmICFpdGVtLmhhc0NsYXNzKCdkaXNhYmxlZCcpXG5cdFx0XHRcdGl0ZW0uYWRkQ2xhc3MoJ2FjdGl2ZScpXG5cdFx0XHRcdEBhY3RpdmVWYWx1ZUluZGV4ID0gaW5kZXhcblx0XHRyZXR1cm5cblxuXG5cdGFjdGl2YXRlUHJldlZhbHVlOiAtPlxuXHRcdGlmIEBhY3RpdmVWYWx1ZUluZGV4IDwgMFxuXHRcdFx0aW5kZXggPSBAZ2V0VmFsdWUoKS5sZW5ndGgtMVxuXHRcdGVsc2Vcblx0XHRcdGluZGV4ID0gaWYgQGFjdGl2ZVZhbHVlSW5kZXggaXMgMCB0aGVuIEBnZXRWYWx1ZSgpLmxlbmd0aC0xIGVsc2UgQGFjdGl2ZVZhbHVlSW5kZXgtMVxuXHRcdEBhY3RpdmF0ZVZhbHVlKGluZGV4KVxuXHRcdHJldHVyblxuXG5cblx0YWN0aXZhdGVOZXh0VmFsdWU6IC0+XG5cdFx0aWYgQGFjdGl2ZVZhbHVlSW5kZXggPCAwXG5cdFx0XHRpbmRleCA9IDBcblx0XHRlbHNlXG5cdFx0XHRpbmRleCA9IGlmIEBnZXRWYWx1ZSgpLmxlbmd0aCBpcyBAYWN0aXZlVmFsdWVJbmRleCsxIHRoZW4gMCBlbHNlIEBhY3RpdmVWYWx1ZUluZGV4KzFcblx0XHRAYWN0aXZhdGVWYWx1ZShpbmRleClcblx0XHRyZXR1cm5cblxuXG5cdGFjdGl2YXRlTGFzdFZhbHVlOiAtPlxuXHRcdEBhY3RpdmF0ZVZhbHVlKEBnZXRWYWx1ZSgpLmxlbmd0aC0xKVxuXHRcdHJldHVyblxuXG5cblx0ZG9EZXN0cm95OiAtPlxuXHRcdEBzY3JlZW5NYXNrLmRlc3Ryb3koKVxuXHRcdEBrZXlMaXN0ZW5lci5kZXN0cm95KClcblx0XHRzdXBlclxuXG5cbm1vZHVsZS5leHBvcnRzID0gQ29tYm9JbnB1dCIsImNsYXNzIENvbXBvc2l0ZSBleHRlbmRzIE1pd28uQ29udGFpbmVyXG5cblx0eHR5cGU6ICdjb21wb3NpdGUnXG5cdGNvbXBvbmVudENsczogJ2Zvcm0tY29tcG9zaXRlJ1xuXHRsYWJlbFNlcGFyYXRvcjogJywgJ1xuXG5cblx0Z2V0SW5wdXRzOiAtPlxuXHRcdHJldHVybiBAZ2V0Q29tcG9uZW50cygpLnRvQXJyYXkoKVxuXG5cblx0c2V0VmFsdWU6ICh2YWx1ZSkgLT5cblx0XHR2YWx1ZSA9IHZhbHVlIG9yIHt9XG5cdFx0Zm9yIGlucHV0IGluIEBnZXRJbnB1dHMoKVxuXHRcdFx0aWYgdmFsdWUuaGFzT3duUHJvcGVydHkoaW5wdXQubmFtZSlcblx0XHRcdFx0aW5wdXQuc2V0VmFsdWUodmFsdWVbaW5wdXQubmFtZV0pXG5cdFx0cmV0dXJuXG5cblxuXHRnZXRWYWx1ZTogLT5cblx0XHR2YWx1ZSA9IHt9XG5cdFx0Zm9yIGlucHV0IGluIEBnZXRJbnB1dHMoKVxuXHRcdFx0dmFsdWVbaW5wdXQubmFtZV0gPSBpbnB1dC5nZXRWYWx1ZSgpXG5cdFx0cmV0dXJuIHZhbHVlXG5cblxuXHRzZXREaXNhYmxlZDogKEBkaXNhYmxlZCkgLT5cblx0XHRmb3IgaW5wdXQgaW4gQGdldElucHV0cygpXG5cdFx0XHRpbnB1dC5zZXREaXNhYmxlZChAZGlzYWJsZWQpXG5cdFx0cmV0dXJuXG5cblxuXHRzZXRSZWFkb25seTogKEByZWFkb25seSkgLT5cblx0XHRmb3IgaW5wdXQgaW4gQGdldElucHV0cygpXG5cdFx0XHRpbnB1dC5zZXRSZWFkb25seShAcmVhZG9ubHkpXG5cdFx0cmV0dXJuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBDb21wb3NpdGUiLCJUZXh0SW5wdXQgPSByZXF1aXJlICcuL1RleHQnXG5cbmNsYXNzIERhdGVJbnB1dCBleHRlbmRzIFRleHRJbnB1dFxuXG5cdHh0eXBlOiAnZGF0ZWlucHV0J1xuXHR0eXBlOiAnZGF0ZSdcblx0cGxhY2Vob2xkZXI6ICd5eXl5LW1tLWRkJ1xuXHRzdGFydERhdGU6IG51bGxcblx0ZW5kRGF0ZTogbnVsbFxuXHR0b2RheUJ0bjogZmFsc2Vcblx0Y2xlYXJCdG46IGZhbHNlXG5cdHJhbmdlU2VsZWN0b3I6IG51bGxcblx0cmFuZ2VTdGFydDogbnVsbFxuXHRyYW5nZUVuZDogbnVsbFxuXHRwb3BvdmVyOiBudWxsXG5cblxuXHRkb0luaXQ6IC0+XG5cdFx0c3VwZXJcblx0XHRAc3RhcnREYXRlID0gQHBhcnNlRGF0ZShAc3RhcnREYXRlKVxuXHRcdEBlbmREYXRlID0gQHBhcnNlRGF0ZShAZW5kRGF0ZSlcblx0XHRAcmFuZ2VTdGFydCA9IEBwYXJzZURhdGUoQHJhbmdlU3RhcnQpIHx8IG51bGxcblx0XHRAcmFuZ2VFbmQgPSBAcGFyc2VEYXRlKEByYW5nZUVuZCkgfHwgbnVsbFxuXHRcdHJldHVyblxuXG5cblx0YWZ0ZXJSZW5kZXI6IC0+XG5cdFx0c3VwZXJcblx0XHRAZWwuc2V0KCd0eXBlJywgJ3RleHQnKVxuXHRcdEBlbC5vbiAnY2xpY2snLCA9PiBAb3BlblBpY2tlcigpXG5cdFx0QGVsLm9uICdrZXlkb3duJywgKGUpID0+IEBvbktleURvd24oZSlcblx0XHRyZXR1cm5cblxuXG5cdG9uS2V5RG93bjogKGUpIC0+XG5cdFx0aWYgZS5rZXkubGVuZ3RoIGlzIDFcblx0XHRcdGUuc3RvcCgpXG5cdFx0ZWxzZSBpZiBlLmtleSBpcyAndXAnIHx8IGUua2V5IGlzICdkb3duJyB8fCBlLmtleSBpcyAnbGVmdCcgfHwgZS5rZXkgaXMgJ3JpZ2h0J1xuXHRcdFx0ZS5zdG9wKClcblx0XHRcdEBvcGVuUGlja2VyKClcblx0XHRlbHNlIGlmIGUua2V5IGlzICdiYWNrc3BhY2UnXG5cdFx0XHRlLnN0b3AoKVxuXHRcdFx0QHNldFZhbHVlKCcnKVxuXHRcdHJldHVyblxuXG5cblx0c2V0VmFsdWU6ICh2YWx1ZSkgLT5cblx0XHRpZiB2YWx1ZSAmJiAhVHlwZS5pc0RhdGUodmFsdWUpXG5cdFx0XHR2YWx1ZSA9IEBwYXJzZURhdGUodmFsdWUpXG5cdFx0c3VwZXIoaWYgdmFsdWUgdGhlbiBAZm9ybWF0RGF0ZSh2YWx1ZSkgZWxzZSAnJylcblx0XHRpZiBAcmFuZ2VTZWxlY3RvciBpcyAnc3RhcnQnXG5cdFx0XHRAc2V0UmFuZ2UodmFsdWV8fGZhbHNlLCBudWxsLCB0cnVlKVxuXHRcdGVsc2UgaWYgQHJhbmdlU2VsZWN0b3IgaXMgJ2VuZCdcblx0XHRcdEBzZXRSYW5nZShudWxsLCB2YWx1ZXx8ZmFsc2UsIHRydWUpXG5cdFx0cmV0dXJuXG5cblxuXHRzZXRTdGFydERhdGU6IChkYXRlKSAtPlxuXHRcdEBzdGFydERhdGUgPSBAcGFyc2VEYXRlKGRhdGUpXG5cdFx0QHBvcG92ZXIuZ2V0KCdwaWNrZXInKS5zZXRTdGFydERhdGUoZGF0ZSkgaWYgQHBvcG92ZXJcblx0XHRyZXR1cm5cblxuXG5cdHNldEVuZERhdGU6IChkYXRlKSAtPlxuXHRcdEBlbmREYXRlID0gQHBhcnNlRGF0ZShkYXRlKVxuXHRcdEBwb3BvdmVyLmdldCgncGlja2VyJykuc2V0RW5kRGF0ZShkYXRlKSBpZiBAcG9wb3ZlclxuXHRcdHJldHVyblxuXG5cblx0c2V0UmFuZ2U6IChyYW5nZVN0YXJ0LCByYW5nZUVuZCwgc2lsZW50KSAtPlxuXHRcdEByYW5nZVN0YXJ0ID0gaWYgcmFuZ2VTdGFydCBpcyBmYWxzZSB0aGVuIGZhbHNlIGVsc2UgQHBhcnNlRGF0ZShyYW5nZVN0YXJ0KSB8fCBAcmFuZ2VTdGFydFxuXHRcdEByYW5nZUVuZCA9IGlmIHJhbmdlRW5kIGlzIGZhbHNlIHRoZW4gZmFsc2UgZWxzZSBAcGFyc2VEYXRlKHJhbmdlRW5kKSB8fCBAcmFuZ2VFbmRcblx0XHRAcG9wb3Zlci5nZXQoJ3BpY2tlcicpLnNldFJhbmdlKEByYW5nZVN0YXJ0LCBAcmFuZ2VFbmQsIHNpbGVudCkgaWYgQHBvcG92ZXJcblx0XHRyZXR1cm5cblxuXG5cdG9wZW5QaWNrZXI6IC0+XG5cdFx0aWYgQGRpc2FibGVkIHx8IEByZWFkb25seSB0aGVuIHJldHVyblxuXHRcdEBwb3BvdmVyID0gQGNyZWF0ZVBpY2tlcigpIGlmICFAcG9wb3ZlclxuXHRcdEBwb3BvdmVyLnNob3coKVxuXHRcdEBwb3BvdmVyLmdldCgncGlja2VyJykuc2V0RGF0ZShAcGFyc2VEYXRlKEBnZXRWYWx1ZSgpKSwgdHJ1ZSlcblx0XHRAcG9wb3Zlci5nZXQoJ3BpY2tlcicpLnNldEZvY3VzKClcblx0XHRyZXR1cm5cblxuXG5cdGhpZGVQaWNrZXI6IC0+XG5cdFx0QHBvcG92ZXIuY2xvc2UoKVxuXHRcdHJldHVyblxuXG5cblx0Y3JlYXRlUGlja2VyOiAtPlxuXHRcdHBvcG92ZXIgPSBtaXdvLnBpY2tlcnMuY3JlYXRlUG9wb3ZlclBpY2tlciAnZGF0ZScsXG5cdFx0XHR0YXJnZXQ6IEBlbFxuXHRcdFx0dHlwZTogQHR5cGVcblx0XHRcdHJhbmdlU2VsZWN0b3I6IEByYW5nZVNlbGVjdG9yXG5cdFx0XHRyYW5nZVN0YXJ0OiBAcmFuZ2VTdGFydCB8fCBudWxsICMgZmFsc2UgbWVhbnMgcmVzZXQgcGlja2VyIGRhdGUsIGJ1dCBvbmx5IG51bGwgaXMgYWNjZXB0ZWQgYXMgdmFsdWVcblx0XHRcdHJhbmdlRW5kOiBAcmFuZ2VFbmQgfHwgbnVsbFx0XHQjIGZhbHNlIG1lYW5zIHJlc2V0IHBpY2tlciBkYXRlLCBidXQgb25seSBudWxsIGlzIGFjY2VwdGVkIGFzIHZhbHVlXG5cdFx0XHRzdGFydERhdGU6IEBzdGFydERhdGVcblx0XHRcdGVuZERhdGU6IEBlbmREYXRlXG5cdFx0XHR0b2RheUJ0bjogQHRvZGF5QnRuXG5cdFx0XHRjbGVhckJ0bjogQGNsZWFyQnRuXG5cdFx0cG9wb3Zlci5nZXQoJ3BpY2tlcicpLm9uICdzZWxlY3RlZCcsIChwaWNrZXIsIGRhdGUpID0+XG5cdFx0XHRAc2V0VmFsdWUoZGF0ZSlcblx0XHRcdEBoaWRlUGlja2VyKClcblx0XHRcdEBlbWl0KCdjaGFuZ2VkJywgdGhpcywgQGdldFZhbHVlKCksIGRhdGUpXG5cdFx0XHRyZXR1cm5cblx0XHRwb3BvdmVyLm9uICdjbG9zZScsID0+XG5cdFx0XHRAcG9wb3ZlciA9IG51bGxcblx0XHRcdEBzZXRGb2N1cygpXG5cdFx0XHRyZXR1cm5cblx0XHRyZXR1cm4gcG9wb3ZlclxuXG5cblx0Zm9ybWF0RGF0ZTogKGRhdGUpIC0+XG5cdFx0cmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKSsgJy0nICsgKGRhdGUuZ2V0TW9udGgoKSsxKS5wYWQoMikrICctJyArIGRhdGUuZ2V0RGF0ZSgpLnBhZCgyKVxuXG5cblx0cGFyc2VEYXRlOiAodmFsdWUpIC0+XG5cdFx0aWYgIXZhbHVlIHRoZW4gcmV0dXJuIG51bGxcblx0XHRpZiBUeXBlLmlzRGF0ZSh2YWx1ZSkgdGhlbiByZXR1cm4gdmFsdWVcblx0XHRpZiAhdmFsdWUubWF0Y2goL1swLTldezR9LVswLTldezJ9LVswLTldezJ9LykgdGhlbiByZXR1cm4gbnVsbFxuXHRcdHBhcnRzID0gdmFsdWUuc3BsaXQoJy0nKVxuXHRcdHJldHVybiBuZXcgRGF0ZShwYXJzZUludChwYXJ0c1swXSksIHBhcnNlSW50KHBhcnRzWzFdKS0xLCBwYXJzZUludChwYXJ0c1syXSkpXG5cblxuXHRkb0Rlc3Ryb3k6IC0+XG5cdFx0QHBvcG92ZXIuZGVzdHJveSgpIGlmIEBwb3BvdmVyXG5cdFx0c3VwZXJcblxuXG5tb2R1bGUuZXhwb3J0cyA9IERhdGVJbnB1dCIsIkRhdGVJbnB1dCA9IHJlcXVpcmUgJy4vRGF0ZSdcblxuXG5jbGFzcyBEYXRlUmFuZ2VJbnB1dCBleHRlbmRzIE1pd28uQ29udGFpbmVyXG5cblx0eHR5cGU6ICdkYXRlcmFuZ2VpbnB1dCdcblx0aXNJbnB1dDogdHJ1ZVxuXHRwbGFjZWhvbGRlcjogJ3l5eXktbW0tZGQnXG5cdHJlYWRvbmx5OiBmYWxzZVxuXHRzdGFydERhdGU6IG51bGxcblx0ZW5kRGF0ZTogbnVsbFxuXHR0b2RheUJ0bjogZmFsc2Vcblx0Y2xlYXJCdG46IGZhbHNlXG5cdGJhc2VDbHM6ICdkYXRlcmFuZ2UnXG5cblxuXHRkb0luaXQ6IC0+XG5cdFx0c3VwZXJcblx0XHRAdmFsdWUgPSBbbnVsbCwgbnVsbF1cblx0XHRAc3RhcnREYXRlID0gQHBhcnNlRGF0ZShAc3RhcnREYXRlKVxuXHRcdEBlbmREYXRlID0gQHBhcnNlRGF0ZShAZW5kRGF0ZSlcblx0XHRAYWRkKCdzdGFydCcsIEBjcmVhdGVTdGFydERhdGUoKSlcblx0XHRAYWRkKCdlbmQnLCBAY3JlYXRlRW5kRGF0ZSgpKVxuXHRcdHJldHVyblxuXG5cblx0c2V0RGlzYWJsZWQ6IChkaXNhYmxlZCkgLT5cblx0XHRAZ2V0KCdzdGFydCcpLnNldERpc2FibGVkKGRpc2FibGVkKVxuXHRcdEBnZXQoJ2VuZCcpLnNldERpc2FibGVkKGRpc2FibGVkKVxuXHRcdHJldHVyblxuXG5cblx0c2V0VmFsdWU6ICh2YWx1ZSkgLT5cblx0XHR2YWx1ZSA9IFtudWxsLCBudWxsXSBpZiAhdmFsdWUgIyBmYWxzZSB0byByZXNldCByYW5nZXNcblx0XHRAZ2V0KCdzdGFydCcpLnNldFZhbHVlKHZhbHVlWzBdKVxuXHRcdEBnZXQoJ2VuZCcpLnNldFZhbHVlKHZhbHVlWzFdKVxuXHRcdEBnZXQoJ3N0YXJ0Jykuc2V0UmFuZ2UodmFsdWVbMF0sIHZhbHVlWzFdKVxuXHRcdEBnZXQoJ2VuZCcpLnNldFJhbmdlKHZhbHVlWzBdLCB2YWx1ZVsxXSlcblx0XHRyZXR1cm5cblxuXG5cdHNldFN0YXJ0RGF0ZTogKGRhdGUpIC0+XG5cdFx0QHN0YXJ0RGF0ZSA9IEBwYXJzZURhdGUoZGF0ZSlcblx0XHRAb25EYXRlTGltaXRzQ2hhbmdlZCgpXG5cdFx0cmV0dXJuXG5cblxuXHRzZXRFbmREYXRlOiAoZGF0ZSkgLT5cblx0XHRAZW5kRGF0ZSA9IEBwYXJzZURhdGUoZGF0ZSlcblx0XHRAb25EYXRlTGltaXRzQ2hhbmdlZCgpXG5cdFx0cmV0dXJuXG5cblxuXHRnZXRWYWx1ZTogLT5cblx0XHRyZXR1cm4gW0BnZXQoJ3N0YXJ0JykuZ2V0VmFsdWUoKSwgQGdldCgnZW5kJykuZ2V0VmFsdWUoKV1cblxuXG5cdGdldFJhbmdlOiAtPlxuXHRcdHZhbHVlID0gQGdldFZhbHVlKClcblx0XHRyZXR1cm4gW0BwYXJzZURhdGUodmFsdWVbMF0pLCBAcGFyc2VEYXRlKHZhbHVlWzFdKV1cblxuXG5cdGdldElucHV0RWw6IC0+XG5cdFx0cmV0dXJuIEBnZXQoJ3N0YXJ0JykuZWxcblxuXG5cdGdldElucHV0SWQ6IC0+XG5cdFx0cmV0dXJuIEBnZXQoJ3N0YXJ0JykuaWRcblxuXG5cdGNyZWF0ZVN0YXJ0RGF0ZTogLT5cblx0XHRpbnB1dCA9IEBjcmVhdGVJbnB1dCgnc3RhcnQnKVxuXHRcdGlucHV0Lm9uICdjaGFuZ2VkJywgKGNvbXBvbmVudCwgdmFsdWUsIGRhdGUpID0+XG5cdFx0XHRAZW1pdCgnY2hhbmdlZCcsIHRoaXMsIEBnZXRWYWx1ZSgpKVxuXHRcdFx0QGdldCgnZW5kJykuc2V0UmFuZ2UoZGF0ZSwgbnVsbCwgdHJ1ZSlcblx0XHRcdEBvbkRhdGVMaW1pdHNDaGFuZ2VkKClcblx0XHRcdHJldHVyblxuXHRcdHJldHVybiBpbnB1dFxuXG5cblx0Y3JlYXRlRW5kRGF0ZTogLT5cblx0XHRpbnB1dCA9IEBjcmVhdGVJbnB1dCgnZW5kJylcblx0XHRpbnB1dC5vbiAnY2hhbmdlZCcsIChjb21wb25lbnQsIHZhbHVlLCBkYXRlKSA9PlxuXHRcdFx0QGVtaXQoJ2NoYW5nZWQnLCB0aGlzLCBAZ2V0VmFsdWUoKSlcblx0XHRcdEBnZXQoJ3N0YXJ0Jykuc2V0UmFuZ2UobnVsbCwgZGF0ZSwgdHJ1ZSlcblx0XHRcdEBvbkRhdGVMaW1pdHNDaGFuZ2VkKClcblx0XHRcdHJldHVyblxuXHRcdHJldHVybiBpbnB1dFxuXG5cblx0Y3JlYXRlSW5wdXQ6ICh0eXBlKSAtPlxuXHRcdGlucHV0ID0gbmV3IERhdGVJbnB1dFxuXHRcdFx0aWQ6IEBpZCsnLScrdHlwZVxuXHRcdFx0aWQ6IEBuYW1lKyctJyt0eXBlXG5cdFx0XHRjbHM6IEBnZXRCYXNlQ2xzKHR5cGUpXG5cdFx0XHRyYW5nZVNlbGVjdG9yOiB0eXBlXG5cdFx0XHRkaXNhYmxlZDogQGRpc2FibGVkXG5cdFx0XHRyZWFkb25seTogQHJlYWRvbmx5XG5cdFx0XHRzdGFydERhdGU6IEBzdGFydERhdGVcblx0XHRcdGVuZERhdGU6IEBlbmREYXRlXG5cdFx0XHRwbGFjZWhvbGRlcjogQHBsYWNlaG9sZGVyXG5cdFx0XHR0b2RheUJ0bjogQHRvZGF5QnRuXG5cdFx0XHRjbGVhckJ0bjogQGNsZWFyQnRuXG5cdFx0cmV0dXJuIGlucHV0XG5cblxuXHRvbkRhdGVMaW1pdHNDaGFuZ2VkOiAtPlxuXHRcdHJhbmdlID0gQGdldFJhbmdlKClcblx0XHRAZ2V0KCdlbmQnKS5zZXRTdGFydERhdGUoaWYgQHN0YXJ0RGF0ZSAmJiBAc3RhcnREYXRlID4gcmFuZ2VbMF0gdGhlbiBAc3RhcnREYXRlIGVsc2UgcmFuZ2VbMF0pXG5cdFx0QGdldCgnc3RhcnQnKS5zZXRFbmREYXRlKGlmIEBlbmREYXRlICYmIEBlbmREYXRlIDwgcmFuZ2VbMV0gdGhlbiBAZW5kRGF0ZSBlbHNlIHJhbmdlWzFdKVxuXHRcdHJldHVyblxuXG5cblx0ZG9SZW5kZXI6IC0+XG5cdFx0QGdldCgnc3RhcnQnKS5yZW5kZXIoQGVsKVxuXHRcdChuZXcgRWxlbWVudCgnc3BhbicsIGNsczonaW5wdXQtZ3JvdXAtYWRkb24nLCBodG1sOiBtaXdvLnRyKCdtaXdvLmlucHV0cy5kYXRlVG8nKSkpLmluamVjdChAZWwpXG5cdFx0QGdldCgnZW5kJykucmVuZGVyKEBlbClcblx0XHRyZXR1cm5cblxuXG5cdHBhcnNlRGF0ZTogKHZhbHVlKSAtPlxuXHRcdGlmICF2YWx1ZSB0aGVuIHJldHVybiBudWxsXG5cdFx0aWYgVHlwZS5pc0RhdGUodmFsdWUpIHRoZW4gcmV0dXJuIHZhbHVlXG5cdFx0aWYgIXZhbHVlLm1hdGNoKC9bMC05XXs0fS1bMC05XXsyfS1bMC05XXsyfS8pIHRoZW4gcmV0dXJuIG51bGxcblx0XHRwYXJ0cyA9IHZhbHVlLnNwbGl0KCctJylcblx0XHRyZXR1cm4gbmV3IERhdGUocGFyc2VJbnQocGFydHNbMF0pLCBwYXJzZUludChwYXJ0c1sxXSktMSwgcGFyc2VJbnQocGFydHNbMl0pKVxuXG5cbm1vZHVsZS5leHBvcnRzID0gRGF0ZVJhbmdlSW5wdXQiLCJjbGFzcyBEcm9wU2VsZWN0SW5wdXQgZXh0ZW5kcyBNaXdvLkNvbXBvbmVudFxuXG5cdHh0eXBlOiAnZHJvcHNlbGVjdGlucHV0J1xuXHRzdG9yZTogbnVsbFxuXHRrZXlQcm9wZXJ0eTogJ2lkJ1xuXHR0ZXh0UHJvcGVydHk6IG51bGxcblx0c291cmNlVGl0bGU6ICcnXG5cdHRhcmdldFRpdGxlOiAnJ1xuXHRzb3VyY2VFbXB0eTogJydcblx0dGFyZ2V0RW1wdHk6ICcnXG5cdGJhc2VDbHM6ICdkcm9wc2VsZWN0J1xuXG5cblx0YWZ0ZXJJbml0OiAtPlxuXHRcdHN1cGVyXG5cdFx0QHN0b3JlID0gbWl3by5zdG9yZShAc3RvcmUpXG5cdFx0aWYgIUB0ZXh0UHJvcGVydHkgdGhlbiB0aHJvdyBuZXcgRXJyb3IoXCJVbmRlZmluZWQgdGV4dFByb3BlcnR5IGF0dHJpYnV0ZVwiKVxuXHRcdHJldHVyblxuXG5cblx0c2V0RGlzYWJsZWQ6IChkaXNhYmxlZCkgLT5cblx0XHQjIG5vdCBzdXBwb3J0ZWQgeWV0XG5cdFx0cmV0dXJuXG5cblxuXHRzZXRWYWx1ZTogKHZhbHVlLCBzaWxlbnQpIC0+XG5cdFx0QGxvYWRJdGVtcyh2YWx1ZSwgc2lsZW50KVxuXHRcdHJldHVyblxuXG5cblx0Z2V0VmFsdWU6IC0+XG5cdFx0cmV0dXJuIEBnZXRUYXJnZXRLZXlzKClcblxuXG5cdGRvUmVuZGVyOiAtPlxuXHRcdGxpc3RDbHMgPSBAZ2V0QmFzZUNscygnbGlzdCcpXG5cdFx0c291cmNlQ2xzID0gQGdldEJhc2VDbHMoJ3NvdXJjZScpXG5cdFx0dGFyZ2V0Q2xzID0gQGdldEJhc2VDbHMoJ3RhcmdldCcpXG5cdFx0YnV0dG9uc0NscyA9IEBnZXRCYXNlQ2xzKCdidXR0b25zJylcblxuXHRcdGNvbnRhaW5lciA9IG5ldyBFbGVtZW50ICdkaXYnLFxuXHRcdFx0cGFyZW50OiBAZWxcblx0XHRcdGNsczogJ2NvbnRyb2xzIHJvdydcblx0XHRcdGh0bWw6IFwiXCJcIlxuXHRcdFx0PGRpdiBjbGFzcz0nY29sLW1kLTUnPlxuXHRcdFx0XHQ8ZGl2IGNsYXNzPScje2xpc3RDbHN9ICN7c291cmNlQ2xzfSc+XG5cdFx0XHRcdFx0PGg1PiN7QHNvdXJjZVRpdGxlfTwvaDQ+XG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cIml0ZW1zXCI+PC9kaXY+XG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cImVtcHR5XCI+PHNwYW4+I3tAc291cmNlRW1wdHl9PC9zcGFuPjwvZGl2PlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXHRcdFx0PGRpdiBjbGFzcz0nY29sLW1kLTIgI3tidXR0b25zQ2xzfSB0ZXh0LWNlbnRlcic+XG5cdFx0XHRcdDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWRlZmF1bHRcIiBuYW1lPVwicmVtb3ZlQWxsXCI+IDw8IDwvYnV0dG9uPlxuXHRcdFx0XHQ8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0XCIgbmFtZT1cImFkZEFsbFwiPiA+PiA8L2J1dHRvbj5cblx0XHRcdDwvZGl2PlxuXHRcdFx0PGRpdiBjbGFzcz0nY29sLW1kLTUnPlxuXHRcdFx0XHQ8ZGl2IGNsYXNzPScje2xpc3RDbHN9ICN7dGFyZ2V0Q2xzfSc+XG5cdFx0XHRcdFx0PGg1PiN7QHRhcmdldFRpdGxlfTwvaDQ+XG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cIml0ZW1zXCI+PC9kaXY+XG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cImVtcHR5XCI+PHNwYW4+I3tAdGFyZ2V0RW1wdHl9PC9zcGFuPjwvZGl2PlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXHRcdFx0XCJcIlwiXG5cblx0XHRzb3VyY2UgPSBjb250YWluZXIuZ2V0RWxlbWVudCgnLicrc291cmNlQ2xzKVxuXHRcdHRhcmdldCA9IGNvbnRhaW5lci5nZXRFbGVtZW50KCcuJyt0YXJnZXRDbHMpXG5cdFx0QHNvdXJjZUVtcHR5Q3QgPSBzb3VyY2UuZ2V0RWxlbWVudCgnLmVtcHR5Jylcblx0XHRAdGFyZ2V0RW1wdHlDdCA9IHRhcmdldC5nZXRFbGVtZW50KCcuZW1wdHknKVxuXHRcdEBzb3VyY2VFbCA9IHNvdXJjZSA9IHNvdXJjZS5nZXRFbGVtZW50KCcuaXRlbXMnKVxuXHRcdEB0YXJnZXRFbCA9IHRhcmdldCA9IHRhcmdldC5nZXRFbGVtZW50KCcuaXRlbXMnKVxuXG5cdFx0Y29udGFpbmVyLm9uICdjbGljazpyZWxheSguaXRlbSknLCAoZXZlbnQsIHRhcmdldCkgPT5cblx0XHRcdGV2ZW50LnN0b3AoKVxuXHRcdFx0dGFyZ2V0W2lmIHRhcmdldC5oYXNDbGFzcygnc2VsZWN0ZWQnKSB0aGVuICdyZW1vdmVDbGFzcycgZWxzZSAnYWRkQ2xhc3MnXSAnc2VsZWN0ZWQnXG5cdFx0XHRyZXR1cm5cblxuXHRcdHNvdXJjZS5vbiAnY2xpY2s6cmVsYXkoLml0ZW0pJywgKGV2ZW50LCBpdGVtKSA9PlxuXHRcdFx0ZXZlbnQuc3RvcCgpXG5cdFx0XHRAYWRkSXRlbShpdGVtKVxuXHRcdFx0cmV0dXJuXG5cdFx0dGFyZ2V0Lm9uICdjbGljazpyZWxheSguaXRlbSknLCAoZXZlbnQsIGl0ZW0pID0+XG5cdFx0XHRldmVudC5zdG9wKClcblx0XHRcdEByZW1vdmVJdGVtKGl0ZW0pXG5cdFx0XHRyZXR1cm5cblxuXHRcdHRhcmdldC5vbiAnY2xpY2snLCAoZXZlbnQpID0+XG5cdFx0XHRpZiBldmVudC50YXJnZXQuaGFzQ2xhc3MobGlzdENscylcblx0XHRcdFx0dGFyZ2V0LmdldEVsZW1lbnRzKCcuaXRlbS5zZWxlY3RlZCcpLnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpXG5cdFx0XHRyZXR1cm5cblx0XHRzb3VyY2Uub24gJ2NsaWNrJywgKGV2ZW50KSA9PlxuXHRcdFx0aWYgZXZlbnQudGFyZ2V0Lmhhc0NsYXNzKGxpc3RDbHMpXG5cdFx0XHRcdHNvdXJjZS5nZXRFbGVtZW50cygnLml0ZW0uc2VsZWN0ZWQnKS5yZW1vdmVDbGFzcygnc2VsZWN0ZWQnKVxuXHRcdFx0cmV0dXJuXG5cblx0XHRjb250YWluZXIuZ2V0RWxlbWVudCgnYnV0dG9uW25hbWU9XCJhZGRBbGxcIl0nKS5vbiAnY2xpY2snLCAoZSkgPT5cblx0XHRcdGUuc3RvcCgpXG5cdFx0XHRAYWRkQWxsKClcblx0XHRcdHJldHVyblxuXHRcdGNvbnRhaW5lci5nZXRFbGVtZW50KCdidXR0b25bbmFtZT1cInJlbW92ZUFsbFwiXScpLm9uICdjbGljaycsIChlKSA9PlxuXHRcdFx0ZS5zdG9wKClcblx0XHRcdEByZW1vdmVBbGwoKVxuXHRcdFx0cmV0dXJuXG5cdFx0cmV0dXJuXG5cblxuXHRhZnRlclJlbmRlcjogLT5cblx0XHRzdXBlclxuXHRcdEBsb2FkSXRlbXMoKVxuXHRcdHJldHVyblxuXG5cblx0YWRkSXRlbTogKHNvdXJjZSkgLT5cblx0XHRzb3VyY2UuaW5qZWN0KEB0YXJnZXRFbClcblx0XHRzb3VyY2UucmVtb3ZlQ2xhc3MoJ3NlbGVjdGVkJylcblx0XHRAb25JdGVtc0NoYW5nZWQoKVxuXHRcdHJldHVyblxuXG5cblx0YWRkQWxsOiAtPlxuXHRcdGZvciBpdGVtIGluIEBzb3VyY2VFbC5nZXRFbGVtZW50cygnLml0ZW0nKVxuXHRcdFx0aXRlbS5pbmplY3QoQHRhcmdldEVsKVxuXHRcdFx0aXRlbS5yZW1vdmVDbGFzcygnc2VsZWN0ZWQnKVxuXHRcdEBvbkl0ZW1zQ2hhbmdlZCgpXG5cdFx0cmV0dXJuXG5cblxuXHRhZGRTZWxlY3RlZDogLT5cblx0XHRmb3IgaXRlbSBpbiBAc291cmNlRWwuZ2V0RWxlbWVudHMoJy5zZWxlY3RlZCcpXG5cdFx0XHRpdGVtLmluamVjdChAdGFyZ2V0RWwpXG5cdFx0XHRpdGVtLnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpXG5cdFx0QG9uSXRlbXNDaGFuZ2VkKClcblx0XHRyZXR1cm5cblxuXG5cdHJlbW92ZUl0ZW06IChpdGVtKSAtPlxuXHRcdGl0ZW0uaW5qZWN0KEBzb3VyY2VFbClcblx0XHRpdGVtLnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpXG5cdFx0QG9uSXRlbXNDaGFuZ2VkKClcblx0XHRyZXR1cm5cblxuXG5cdHJlbW92ZUFsbDogLT5cblx0XHRmb3IgaXRlbSBpbiBAdGFyZ2V0RWwuZ2V0RWxlbWVudHMoJy5pdGVtJylcblx0XHRcdGl0ZW0uaW5qZWN0KEBzb3VyY2VFbClcblx0XHRcdGl0ZW0ucmVtb3ZlQ2xhc3MoJ3NlbGVjdGVkJylcblx0XHRAb25JdGVtc0NoYW5nZWQoKVxuXHRcdHJldHVyblxuXG5cblx0cmVtb3ZlU2VsZWN0ZWQ6IC0+XG5cdFx0Zm9yIGl0ZW0gaW4gQHRhcmdldEVsLmdldEVsZW1lbnRzKCcuc2VsZWN0ZWQnKVxuXHRcdFx0aXRlbS5pbmplY3QoQHNvdXJjZUVsKVxuXHRcdFx0aXRlbS5yZW1vdmVDbGFzcygnc2VsZWN0ZWQnKVxuXHRcdEBvbkl0ZW1zQ2hhbmdlZCgpXG5cdFx0cmV0dXJuXG5cblxuXHRsb2FkSXRlbXM6ICh2YWx1ZXMsIHNpbGVudCkgLT5cblx0XHRAc291cmNlRWwuZW1wdHkoKVxuXHRcdEB0YXJnZXRFbC5lbXB0eSgpXG5cblx0XHRAc3RvcmUuZWFjaCAocmVjb3JkKSA9PlxuXHRcdFx0aXRlbSA9IG5ldyBFbGVtZW50ICdkaXYnLFxuXHRcdFx0XHRjbHM6ICdpdGVtJ1xuXHRcdFx0XHRwYXJlbnQ6IEBzb3VyY2VFbFxuXHRcdFx0XHQnZGF0YS1pZCc6IHJlY29yZC5nZXQoQGtleVByb3BlcnR5KVxuXHRcdFx0XHRodG1sOiByZWNvcmQuZ2V0KEB0ZXh0UHJvcGVydHkpXG5cdFx0XHRyZXR1cm5cblxuXHRcdGlmIHZhbHVlc1xuXHRcdFx0Zm9yIGl0ZW0gaW4gQHNvdXJjZUVsLmdldEVsZW1lbnRzKCcuaXRlbScpXG5cdFx0XHRcdGlkID0gaXRlbS5nZXQoJ2RhdGEtaWQnKVxuXHRcdFx0XHRpZiB2YWx1ZXMuaW5kZXhPZihpZCkgPj0gMFxuXHRcdFx0XHRcdGl0ZW0uaW5qZWN0KEB0YXJnZXRFbClcblxuXHRcdEBvbkl0ZW1zQ2hhbmdlZChzaWxlbnQpXG5cdFx0cmV0dXJuXG5cblxuXHRnZXRTb3VyY2VLZXlzOiAtPlxuXHRcdGtleXMgPSBbXVxuXHRcdGZvciBpdGVtIGluIEBzb3VyY2VFbC5nZXRFbGVtZW50cygnLml0ZW0nKVxuXHRcdFx0a2V5cy5wdXNoIGl0ZW0uZ2V0KCdkYXRhLWlkJylcblx0XHRyZXR1cm4ga2V5c1xuXG5cblx0Z2V0VGFyZ2V0S2V5czogLT5cblx0XHRrZXlzID0gW11cblx0XHRmb3IgaXRlbSBpbiBAdGFyZ2V0RWwuZ2V0RWxlbWVudHMoJy5pdGVtJylcblx0XHRcdGtleXMucHVzaCBpdGVtLmdldCgnZGF0YS1pZCcpXG5cdFx0cmV0dXJuIGtleXNcblxuXG5cdG9uSXRlbXNDaGFuZ2VkOiAoc2lsZW50KSAtPlxuXHRcdEBzb3VyY2VFbXB0eUN0LnNldFZpc2libGUoQHNvdXJjZUVsLmdldEVsZW1lbnRzKCcuaXRlbScpLmxlbmd0aCA9PSAwKVxuXHRcdEB0YXJnZXRFbXB0eUN0LnNldFZpc2libGUoQHRhcmdldEVsLmdldEVsZW1lbnRzKCcuaXRlbScpLmxlbmd0aCA9PSAwKVxuXHRcdEBlbWl0KCdjaGFuZ2UnLCB0aGlzKSBpZiAhc2lsZW50XG5cdFx0cmV0dXJuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBEcm9wU2VsZWN0SW5wdXQiLCJjbGFzcyBSYWRpbyBleHRlbmRzIE1pd28uQ29tcG9uZW50XG5cblx0eHR5cGU6ICdyYWRpb2lucHV0J1xuXHRpc0lucHV0OiB0cnVlXG5cblx0Y2hlY2tlZDogZmFsc2Vcblx0ZGlzYWJsZWQ6IGZhbHNlXG5cdGlucHV0RWw6IG51bGxcblx0aWNvbkVsOiBudWxsXG5cdGxhYmVsRWw6IG51bGxcblx0cmFkaW9OYW1lOiBudWxsXG5cblxuXHRkb1JlbmRlcjogLT5cblx0XHRAZWwuYWRkQ2xhc3MoJ3JhZGlvJylcblx0XHRAZWwuc2V0ICdodG1sJyxcblx0XHQnPGxhYmVsIG1pd28tcmVmZXJlbmNlPVwibGFiZWxFbFwiIGZvcj1cIicrQGdldElucHV0SWQoKSsnXCI+Jytcblx0XHRcdCc8c3BhbiBtaXdvLXJlZmVyZW5jZT1cImNoZWNrZXJFbFwiIGNsYXNzPVwiY2hlY2tlclwiIHRhYmluZGV4PVwiMFwiPicrXG5cdFx0XHRcdCc8aSBtaXdvLXJlZmVyZW5jZT1cImljb25FbFwiIGNsYXNzPVwiZmFcIj48L2k+Jytcblx0XHRcdFx0JzxpbnB1dCBtaXdvLXJlZmVyZW5jZT1cImlucHV0RWxcIiB0eXBlPVwicmFkaW9cIiBpZD1cIicrQGdldElucHV0SWQoKSsnXCIgbmFtZT1cIicrQHJhZGlvTmFtZSsnXCIgdmFsdWU9XCInK0BuYW1lKydcIiB0YWJpbmRleD1cIi0xXCIgPicrXG5cdFx0XHQnPC9zcGFuPicrXG5cdFx0XHQnPHNwYW4gbWl3by1yZWZlcmVuY2U9XCJ0ZXh0RWxcIiBjbGFzcz1cImxhYmVsLXRleHRcIj4nK0BsYWJlbCsnPC9zcGFuPicrXG5cdFx0JzwvbGFiZWw+J1xuXHRcdHJldHVyblxuXG5cblx0YWZ0ZXJSZW5kZXI6IC0+XG5cdFx0c3VwZXJcblx0XHRAaW5wdXRFbC5vbiAnY2hhbmdlJywgPT5cblx0XHRcdGlmIEBkaXNhYmxlZCB0aGVuIHJldHVyblxuXHRcdFx0QHNldENoZWNrZWQoQGlzQ2hlY2tlZCgpKVxuXHRcdFx0cmV0dXJuXG5cblx0XHRAaW5wdXRFbC5vbiAnZm9jdXMnLCA9PlxuXHRcdFx0aWYgQGRpc2FibGVkIHRoZW4gcmV0dXJuXG5cdFx0XHRAc2V0Rm9jdXMoKVxuXHRcdFx0cmV0dXJuXG5cblx0XHRAY2hlY2tlckVsLm9uICdmb2N1cycsID0+XG5cdFx0XHRpZiBAZGlzYWJsZWQgdGhlbiByZXR1cm5cblx0XHRcdEBzZXRGb2N1cygpXG5cdFx0XHRyZXR1cm5cblxuXHRcdEBjaGVja2VyRWwub24gJ2tleWRvd24nLCAoZSkgPT5cblx0XHRcdGlmIEBkaXNhYmxlZCB0aGVuIHJldHVyblxuXHRcdFx0aWYgZS5rZXkgaXMgJ3NwYWNlJ1xuXHRcdFx0XHRlLnN0b3AoKVxuXHRcdFx0XHRAc2V0Q2hlY2tlZCghQGlzQ2hlY2tlZCgpKVxuXHRcdFx0cmV0dXJuXG5cblx0XHRAaW5wdXRFbC5vbiAnYmx1cicsID0+XG5cdFx0XHRpZiBAZGlzYWJsZWQgdGhlbiByZXR1cm5cblx0XHRcdEBlbWl0KCdibHVyJywgdGhpcylcblx0XHRcdHJldHVyblxuXG5cdFx0QGZvY3VzRWwgPSBAY2hlY2tlckVsXG5cdFx0QHNldERpc2FibGVkKEBkaXNhYmxlZClcblx0XHRAc2V0Q2hlY2tlZChAY2hlY2tlZClcblx0XHRyZXR1cm5cblxuXG5cdHNldENoZWNrZWQ6IChjaGVja2VkLCBzaWxlbnQpIC0+XG5cdFx0Y2hlY2tlZE9sZCA9IEBjaGVja2VkXG5cdFx0QGNoZWNrZWQgPSBjaGVja2VkXG5cdFx0QGVtaXQoJ2NoYW5nZScsIHRoaXMsIEBuYW1lKSBpZiAhc2lsZW50ICYmIGNoZWNrZWRPbGQgaXNudCBjaGVja2VkXG5cdFx0aWYgIUByZW5kZXJlZCB0aGVuIHJldHVyblxuXHRcdEBlbC50b2dnbGVDbGFzcygnY2hlY2tlZCcsIGNoZWNrZWQpXG5cdFx0QGlucHV0RWwuc2V0KCdjaGVja2VkJywgY2hlY2tlZClcblx0XHRAaWNvbkVsLnJlbW92ZUNsYXNzKCdmYS1kb3QtY2lyY2xlLW8nKS5yZW1vdmVDbGFzcygnZmEtY2lyY2xlLW8nKVxuXHRcdEBpY29uRWwuYWRkQ2xhc3MoaWYgY2hlY2tlZCB0aGVuICdmYS1kb3QtY2lyY2xlLW8nIGVsc2UgJ2ZhLWNpcmNsZS1vJylcblx0XHRyZXR1cm4gdGhpc1xuXG5cblx0aXNDaGVja2VkOiAtPlxuXHRcdHJldHVybiBpZiBAcmVuZGVyZWQgdGhlbiBAaW5wdXRFbC5nZXQoJ2NoZWNrZWQnKSBlbHNlIEBjaGVja2VkXG5cblxuXHRzZXREaXNhYmxlZDogKEBkaXNhYmxlZCkgLT5cblx0XHRpZiAhQHJlbmRlcmVkIHRoZW4gcmV0dXJuXG5cdFx0QGVsLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcsIGRpc2FibGVkKVxuXHRcdEBpbnB1dEVsLnNldCgnZGlzYWJsZWQnLCBkaXNhYmxlZClcblx0XHRyZXR1cm5cblxuXG5cdHNldExhYmVsOiAoQGxhYmVsKSAtPlxuXHRcdGlmICFAcmVuZGVyZWQgdGhlbiByZXR1cm5cblx0XHRAdGV4dEVsLnNldCgndGV4dCcsIGxhYmVsKVxuXHRcdHJldHVyblxuXG5cblx0c2V0VmFsdWU6IChjaGVja2VkKSAtPlxuXHRcdEBzZXRDaGVja2VkKGNoZWNrZWQpXG5cdFx0cmV0dXJuXG5cblxuXHRnZXRWYWx1ZTogLT5cblx0XHRyZXR1cm4gQGlzQ2hlY2tlZCgpXG5cblxuXHRnZXRJbnB1dEVsOiAtPlxuXHRcdHJldHVybiBAaW5wdXRFbFxuXG5cblx0Z2V0SW5wdXRJZDogLT5cblx0XHRyZXR1cm4gQGlkKyctaW5wdXQnXG5cblxubW9kdWxlLmV4cG9ydHMgPSBSYWRpbyIsIlJhZGlvID0gcmVxdWlyZSAnLi9SYWRpbydcblxuXG5jbGFzcyBSYWRpb0xpc3RJbnB1dCBleHRlbmRzIE1pd28uQ29udGFpbmVyXG5cblx0eHR5cGU6ICdyYWRpb2xpc3RpbnB1dCdcblx0aXNJbnB1dDogdHJ1ZVxuXHRpbmxpbmU6IGZhbHNlXG5cdHJhZGlvTmFtZTogbnVsbFxuXHRjb21wb25lbnRDbHM6ICdyYWRpb2xpc3QnXG5cblxuXHRzZXRDaGVja2VkOiAobmFtZSkgLT5cblx0XHRAY29tcG9uZW50cy5lYWNoIChyYWRpbyk9PlxuXHRcdFx0cmFkaW8uc2V0Q2hlY2tlZChyYWRpby5uYW1lIGlzIG5hbWUsIHRydWUpXG5cdFx0XHRyZXR1cm5cblx0XHRyZXR1cm5cblxuXG5cdHNldERpc2FibGVkOiAobmFtZSwgZGlzYWJsZWQpIC0+XG5cdFx0aWYgVHlwZS5pc1N0cmluZyhuYW1lKVxuXHRcdFx0QGdldChuYW1lKS5zZXREaXNhYmxlZChkaXNhYmxlZClcblx0XHRlbHNlXG5cdFx0XHRkaXNhYmxlZCA9IG5hbWVcblx0XHRcdEBjb21wb25lbnRzLmVhY2ggKGNoZWNrYm94KT0+XG5cdFx0XHRcdGNoZWNrYm94LnNldERpc2FibGVkKGRpc2FibGVkKVxuXHRcdFx0XHRyZXR1cm5cblx0XHRyZXR1cm5cblxuXG5cdHNldFZhbHVlOiAodmFsdWUpIC0+XG5cdFx0QGNvbXBvbmVudHMuZWFjaCAoY2hlY2tib3gsIG5hbWUpPT5cblx0XHRcdGNoZWNrYm94LnNldENoZWNrZWQodmFsdWUgaXMgbmFtZSwgdHJ1ZSlcblx0XHRcdHJldHVyblxuXHRcdHJldHVyblxuXG5cblx0Z2V0VmFsdWU6IC0+XG5cdFx0dmFsdWUgPSBudWxsXG5cdFx0QGNvbXBvbmVudHMuZWFjaCAocmFkaW8sIG5hbWUpPT5cblx0XHRcdGlmIHJhZGlvLmlzQ2hlY2tlZCgpICYmICFyYWRpby5kaXNhYmxlZFxuXHRcdFx0XHR2YWx1ZSA9IG5hbWVcblx0XHRcdHJldHVyblxuXHRcdHJldHVybiB2YWx1ZVxuXG5cblx0YWRkSXRlbTogKG5hbWUsIGxhYmVsKSAtPlxuXHRcdEBhZGQobmFtZSwgQGNyZWF0ZVJhZGlvKG5hbWUsIGxhYmVsKSlcblx0XHRyZXR1cm5cblxuXG5cdGNyZWF0ZVJhZGlvOiAobmFtZSwgbGFiZWwpIC0+XG5cdFx0cmFkaW8gPSBuZXcgUmFkaW9cblx0XHRcdGlkOiBAaWQrJy0nK25hbWVcblx0XHRcdG5hbWU6IG5hbWVcblx0XHRcdHJhZGlvTmFtZTogQHJhZGlvTmFtZVxuXHRcdFx0bGFiZWw6IGxhYmVsXG5cdFx0XHRjbHM6IGlmIEBpbmxpbmUgdGhlbiAncmFkaW8taW5saW5lJyBlbHNlIG51bGxcblxuXHRcdHJhZGlvLm9uICdjaGFuZ2UnLCAgPT5cblx0XHRcdGlmIEBkaXNhYmxlZCB0aGVuIHJldHVyblxuXHRcdFx0QHNldENoZWNrZWQobmFtZSlcblx0XHRcdEBlbWl0KCdjaGFuZ2UnKVxuXHRcdFx0cmV0dXJuXG5cblx0XHRyYWRpby5vbiAnYmx1cicsID0+XG5cdFx0XHRpZiBAZGlzYWJsZWQgdGhlbiByZXR1cm5cblx0XHRcdEBlbWl0KCdibHVyJylcblx0XHRcdHJldHVyblxuXG5cdFx0cmFkaW8ub24gJ2ZvY3VzJywgPT5cblx0XHRcdGlmIEBkaXNhYmxlZCB0aGVuIHJldHVyblxuXHRcdFx0QGVtaXQoJ2ZvY3VzJylcblx0XHRcdHJldHVyblxuXG5cdFx0cmV0dXJuIHJhZGlvXG5cblxuXHRjbGVhcjogKCkgLT5cblx0XHRAY29tcG9uZW50cy5lYWNoIChjb21wb25lbnQsIG5hbWUpID0+XG5cdFx0XHRAcmVtb3ZlQ29tcG9uZW50KG5hbWUpXG5cdFx0XHRjb21wb25lbnQuZGVzdHJveSgpXG5cdFx0XHRyZXR1cm5cblx0XHRyZXR1cm5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IFJhZGlvTGlzdElucHV0IiwiQmFzZUlucHV0ID0gcmVxdWlyZSAnLi9CYXNlSW5wdXQnXG5cblxuY2xhc3MgT3B0aW9uR3JvdXAgZXh0ZW5kcyBNaXdvLk9iamVjdFxuXG5cdHNlbGVjdDogbnVsbFxuXHRsYWJlbDogbnVsbFxuXG5cblx0Y29uc3RydWN0b3I6IChAc2VsZWN0LCBjb25maWcpIC0+XG5cdFx0c3VwZXIoY29uZmlnKVxuXHRcdEBlbCA9IG5ldyBFbGVtZW50KCdvcHRncm91cCcsIHtsYWJlbDogQGxhYmVsLCBwYXJlbnQ6IEBzZWxlY3QuZWx9KVxuXHRcdHJldHVyblxuXG5cblx0c2V0TGFiZWw6IChsYWJlbCkgLT5cblx0XHRAZWwuc2V0KCdsYWJlbCcsIGxhYmVsKVxuXHRcdHJldHVybiB0aGlzXG5cblxuXHRhZGRPcHRpb246ICh2YWx1ZSwgdGV4dCkgLT5cblx0XHRvcHRpb24gPSBuZXcgRWxlbWVudCgnb3B0aW9uJywge3ZhbHVlOnZhbHVlLCBodG1sOnRleHR9KVxuXHRcdG9wdGlvbi5pbmplY3QoQGVsKVxuXHRcdHJldHVybiB0aGlzXG5cblxuXG5jbGFzcyBTZWxlY3RJbnB1dCBleHRlbmRzIEJhc2VJbnB1dFxuXG5cdHh0eXBlOiAnc2VsZWN0aW5wdXQnXG5cdGVsOiAnc2VsZWN0Jyxcblx0Y29tcG9uZW50Q2xzOiAnZm9ybS1jb250cm9sJ1xuXG5cblx0YWZ0ZXJSZW5kZXI6IC0+XG5cdFx0c3VwZXIoKVxuXHRcdEBlbC5vbiAnY2hhbmdlJywgKCk9PiBAZW1pdCgnY2hhbmdlJywgdGhpcywgQGdldFZhbHVlKCkpXG5cdFx0cmV0dXJuXG5cblxuXHRhZGRPcHRpb246ICh2YWx1ZSwgdGV4dCkgLT5cblx0XHRvcHRpb24gPSBuZXcgRWxlbWVudCgnb3B0aW9uJywge3ZhbHVlOnZhbHVlLCBodG1sOnRleHR9KVxuXHRcdG9wdGlvbi5pbmplY3QoQGVsKVxuXHRcdHJldHVybiB0aGlzXG5cblxuXHRhZGRHcm91cDogKHRpdGxlKSAtPlxuXHRcdHJldHVybiBuZXcgT3B0aW9uR3JvdXAodGhpcywge2xhYmVsOiB0aXRsZX0pXG5cblxuXHRjbGVhcjogLT5cblx0XHRAZWwuZW1wdHkoKVxuXHRcdHJldHVybiB0aGlzXG5cblxuXHRzZXREaXNhYmxlZDogKGRpc2FibGVkKSAtPlxuXHRcdHN1cGVyKGRpc2FibGVkKVxuXHRcdEBlbC50b2dnbGVDbGFzcygnZGlzYWJsZWQnLCBkaXNhYmxlZClcblx0XHRyZXR1cm4gdGhpc1xuXG5cblx0c2V0VmFsdWU6ICh2YWx1ZSkgLT5cblx0XHRAZWwuc2V0KCd2YWx1ZScsIHZhbHVlKVxuXHRcdHJldHVybiB0aGlzXG5cblxuXHRnZXRWYWx1ZTogLT5cblx0XHRyZXR1cm4gQGVsLmdldCgndmFsdWUnKVxuXG5cblx0Z2V0SW5wdXRFbDogLT5cblx0XHRyZXR1cm4gQGVsXG5cblxubW9kdWxlLmV4cG9ydHMgPSBTZWxlY3RJbnB1dCIsIlRvb2x0aXAgPSByZXF1aXJlICcuLi90aXAvVG9vbHRpcCdcblxuXG5jbGFzcyBTbGlkZXJJbnB1dCBleHRlbmRzIE1pd28uQ29tcG9uZW50XG5cblx0eHR5cGU6ICdzbGlkZXJpbnB1dCdcblx0aXNJbnB1dDogdHJ1ZVxuXHR2YWx1ZTogMFxuXHRzdGVwOiAxXG5cdG1pbjogMFxuXHRtYXg6IDEwMFxuXHRkaXNhYmxlZDogZmFsc2Vcblx0bW9kZTogJ3NsaWRlcidcblx0a25vYlJlbmRlcmVyOiBudWxsXG5cdHNlbGVjdGlvblJlbmRlcmVyOiBudWxsXG5cblx0c2VsZWN0aW9uRWw6IG51bGxcblx0c2VsZWN0aW9uVG9vbHRpcDogbnVsbFxuXHR0cmFja0VsOiBudWxsXG5cdHRyYWNrUG9zOiBudWxsXG5cdHRyYWNrU2l6ZTogbnVsbFxuXHRzdGVwU2l6ZTogbnVsbFxuXHRrbm9iMEVsOiBudWxsXG5cdGtub2IxRWw6IG51bGxcblxuXG5cdGFmdGVySW5pdDogLT5cblx0XHRzdXBlcigpXG5cdFx0aWYgQG1pbiBpcyBudWxsIHx8IEBtYXggaXMgbnVsbFxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwibWluIG9yIG1heCBwcm9wZXJ0aWVzIGFyZSByZXF1aXJlZFwiKVxuXHRcdGlmICFUeXBlLmlzQXJyYXkoQHZhbHVlKVxuXHRcdFx0QHZhbHVlID0gWzAsIEB2YWx1ZV1cblx0XHRyZXR1cm5cblxuXG5cdGRvUmVuZGVyOiAtPlxuXHRcdEBlbC5hZGRDbGFzcygnc2xpZGVyJylcblx0XHRAZWwuc2V0ICdodG1sJyxcblx0XHQnPGRpdiBtaXdvLXJlZmVyZW5jZT1cInRyYWNrRWxcIiBjbGFzcz1cInNsaWRlci10cmFja1wiPicrXG5cdFx0XHQnPGRpdiBtaXdvLXJlZmVyZW5jZT1cInNlbGVjdGlvbkVsXCIgY2xhc3M9XCJzbGlkZXItc2VsZWN0aW9uXCI+PC9kaXY+Jytcblx0XHRcdCc8ZGl2IG1pd28tcmVmZXJlbmNlPVwia25vYjBFbFwiIHN0eWxlPVwiZGlzcGxheTogbm9uZVwiIGNsYXNzPVwic2xpZGVyLWtub2JcIiB0YWJpbmRleD1cIjBcIj48L2Rpdj4nK1xuXHRcdFx0JzxkaXYgbWl3by1yZWZlcmVuY2U9XCJrbm9iMUVsXCIgY2xhc3M9XCJzbGlkZXIta25vYlwiIHRhYmluZGV4PVwiMFwiPjwvZGl2PicrXG5cdFx0JzwvZGl2Pidcblx0XHRyZXR1cm5cblxuXG5cdGFmdGVyUmVuZGVyOiAgLT5cblx0XHRzdXBlcigpXG5cdFx0QHNlbGVjdGlvblRvb2x0aXAgPSBuZXcgVG9vbHRpcFxuXHRcdFx0dGFyZ2V0OiBAc2VsZWN0aW9uRWxcblx0XHRcdHBsYWNlbWVudDogJ3RvcCdcblx0XHRcdGRpc3RhbmNlOiAzXG5cblx0XHRAdHJhY2tFbC5vbiAnY2xpY2snLCAoZXZlbnQpPT5cblx0XHRcdGlmIEBkaXNhYmxlZCB0aGVuIHJldHVyblxuXHRcdFx0QGVtaXQoJ2ZvY3VzJywgdGhpcylcblx0XHRcdEBzZXRWYWx1ZUJ5RXZlbnQoZXZlbnQpXG5cdFx0XHRAc2VsZWN0aW9uVG9vbHRpcC5zZXRUZXh0KEBmb3JtYXRTZWxlY3Rpb25Ub29sdGlwKEBnZXRWYWx1ZSgpKSlcblx0XHRcdEBlbWl0KCdjaGFuZ2UnLCB0aGlzLCBAZ2V0VmFsdWUoKSlcblx0XHRcdHJldHVyblxuXG5cdFx0QHNlbGVjdGlvbkVsLm9uICdtb3VzZWVudGVyJywgPT5cblx0XHRcdGlmIEBkaXNhYmxlZCB0aGVuIHJldHVyblxuXHRcdFx0aWYgQGFjdGl2ZSB0aGVuIHJldHVyblxuXHRcdFx0QHNlbGVjdGlvblRvb2x0aXAuc2hvdygpXG5cdFx0XHRAc2VsZWN0aW9uVG9vbHRpcC5zZXRUZXh0KEBmb3JtYXRTZWxlY3Rpb25Ub29sdGlwKEBnZXRWYWx1ZSgpKSlcblx0XHRcdHJldHVyblxuXG5cdFx0QHNlbGVjdGlvbkVsLm9uICdtb3VzZWxlYXZlJywgPT5cblx0XHRcdGlmIEBkaXNhYmxlZCB0aGVuIHJldHVyblxuXHRcdFx0aWYgQGFjdGl2ZSB0aGVuIHJldHVyblxuXHRcdFx0QHNlbGVjdGlvblRvb2x0aXAuaGlkZSgpXG5cdFx0XHRyZXR1cm5cblxuXHRcdEBmb2N1c0VsID0gQGtub2IxRWxcblx0XHRAa25vYjBFbC5zZXRWaXNpYmxlKEBtb2RlIGlzICdyYW5nZScpXG5cdFx0QGRlY29yYXRlS25vYihAa25vYjBFbCwgMClcblx0XHRAZGVjb3JhdGVLbm9iKEBrbm9iMUVsLCAxKVxuXG5cdFx0QHNldFZhbHVlKEB2YWx1ZSlcblx0XHRAc2V0RGlzYWJsZWQoQGRpc2FibGVkKVxuXHRcdHdpbmRvdy5vbiAncmVzaXplJywgQGJvdW5kKCd1cGRhdGVTbGlkZXInKVxuXHRcdHJldHVyblxuXG5cblx0ZGVjb3JhdGVLbm9iOiAoa25vYkVsLCBpbmRleCkgLT5cblx0XHR0b29sdGlwID0gbmV3IFRvb2x0aXBcblx0XHRcdHRhcmdldDoga25vYkVsXG5cdFx0XHRwbGFjZW1lbnQ6ICd0b3AnXG5cdFx0XHRkaXN0YW5jZTogM1xuXG5cdFx0a25vYkVsLnN0b3JlKCd0b29sdGlwJywgdG9vbHRpcClcblx0XHRrbm9iRWwuc3RvcmUoJ2luZGV4JywgaW5kZXgpXG5cblx0XHRrbm9iRWwub24gJ21vdXNlZG93bicsID0+XG5cdFx0XHRpZiBAZGlzYWJsZWQgdGhlbiByZXR1cm5cblx0XHRcdEBhY3RpdmUgPSB0cnVlXG5cdFx0XHRAYWN0aXZlS25vYkVsID0ga25vYkVsXG5cdFx0XHRrbm9iRWwuYWRkQ2xhc3MoJ2FjdGl2ZScpXG5cdFx0XHRAc3RhcnREcmFnKClcblx0XHRcdHJldHVyblxuXG5cdFx0a25vYkVsLm9uICdrZXlkb3duJywgKGUpID0+XG5cdFx0XHRpZiBAZGlzYWJsZWQgdGhlbiByZXR1cm5cblx0XHRcdHN3aXRjaCBlLmtleVxuXHRcdFx0XHR3aGVuICdsZWZ0JyB0aGVuIEBkZWNyZWFzZSgpOyBlLnN0b3AoKVxuXHRcdFx0XHR3aGVuICdkb3duJyB0aGVuIEBkZWNyZWFzZSgpOyBlLnN0b3AoKVxuXHRcdFx0XHR3aGVuICdyaWdodCcgdGhlbiBAaW5jcmVhc2UoKTsgZS5zdG9wKClcblx0XHRcdFx0d2hlbiAndXAnIHRoZW4gQGluY3JlYXNlKCk7IGUuc3RvcCgpXG5cdFx0XHRyZXR1cm5cblx0XHRyZXR1cm5cblxuXG5cdHN0YXJ0RHJhZzogLT5cblx0XHRAYWN0aXZlS25vYkVsLnJldHJpZXZlKCd0b29sdGlwJykuc2V0VGV4dChAZm9ybWF0S25vYlRvb2x0aXAoQGdldFZhbHVlKEBhY3RpdmVLbm9iRWwucmV0cmlldmUoJ2luZGV4JykpKSkuc2hvdygpXG5cdFx0bWl3by5ib2R5Lm9uICdtb3VzZW1vdmUnLCBAYm91bmQoJ29uTW91c2VNb3ZlJylcblx0XHRtaXdvLmJvZHkub24gJ21vdXNldXAnLCBAYm91bmQoJ29uTW91c2VVcCcpXG5cdFx0QGVtaXQoJ2ZvY3VzJywgdGhpcylcblx0XHRyZXR1cm5cblxuXG5cdHN0b3BEcmFnOiAtPlxuXHRcdEBhY3RpdmVLbm9iRWwucmV0cmlldmUoJ3Rvb2x0aXAnKS5oaWRlKCkgaWYgQGFjdGl2ZUtub2JFbFxuXHRcdG1pd28uYm9keS51biAnbW91c2Vtb3ZlJywgQGJvdW5kKCdvbk1vdXNlTW92ZScpXG5cdFx0bWl3by5ib2R5LnVuICdtb3VzZXVwJywgQGJvdW5kKCdvbk1vdXNlVXAnKVxuXHRcdHJldHVyblxuXG5cblx0b25Nb3VzZVVwOiAtPlxuXHRcdEBhY3RpdmUgPSBmYWxzZVxuXHRcdEBhY3RpdmVLbm9iRWwucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpIGlmIEBhY3RpdmVLbm9iRWxcblx0XHRAc3RvcERyYWcoKVxuXHRcdEBvbkNoYW5nZSgpXG5cdFx0cmV0dXJuXG5cblxuXHRvbkNoYW5nZTogLT5cblx0XHRAZW1pdCgnY2hhbmdlJywgdGhpcywgQGdldFZhbHVlKCkpXG5cdFx0cmV0dXJuXG5cblxuXHRvbk1vdXNlTW92ZTogKGV2ZW50KSAtPlxuXHRcdEBzZXRWYWx1ZUJ5RXZlbnQoZXZlbnQpXG5cdFx0QGFjdGl2ZUtub2JFbC5yZXRyaWV2ZSgndG9vbHRpcCcpLnNldFRleHQoQGZvcm1hdEtub2JUb29sdGlwKEBnZXRWYWx1ZShAYWN0aXZlS25vYkVsLnJldHJpZXZlKCdpbmRleCcpKSkpXG5cdFx0QGVtaXQoJ3NsaWRlJywgdGhpcywgQGdldFZhbHVlKCkpXG5cdFx0cmV0dXJuXG5cblxuXHRzZXRWYWx1ZUJ5RXZlbnQ6IChldmVudCkgLT5cblx0XHQjIGRldGVjdCB2YWx1ZSBieSBldmVudFxuXHRcdGxlZnQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihldmVudC5wYWdlLnggLSBAdHJhY2tQb3MueCwgQHRyYWNrU2l6ZS54KSlcblx0XHRyZWxhdGl2ZVZhbHVlID0gbGVmdC9AdHJhY2tTaXplLnhcblx0XHR2YWx1ZSA9IEBtaW4gKyBNYXRoLnJvdW5kKHJlbGF0aXZlVmFsdWUgKiAoQG1heC1AbWluKSlcblxuXHRcdCMgZGV0ZWN0IGtub2IgaW5kZXggYnkgZXZlbnRcblx0XHRpZiBAbW9kZSBpcyAncmFuZ2UnXG5cdFx0XHRpbmRleCA9IGlmIHZhbHVlID4gQHZhbHVlWzBdKyhAdmFsdWVbMV0tQHZhbHVlWzBdKS8yIHRoZW4gMSBlbHNlIDBcblx0XHRlbHNlXG5cdFx0XHRpbmRleCA9IDFcblxuXHRcdCMgc2V0IHZhbHVlXG5cdFx0QHNldFZhbHVlKHZhbHVlLCBpbmRleClcblx0XHRyZXR1cm5cblxuXG5cdHNldFZhbHVlOiAodmFsdWUsIGluZGV4PTEpIC0+XG5cdFx0IyBzZXQgdmFsdWVcblx0XHRpZiBUeXBlLmlzQXJyYXkodmFsdWUpXG5cdFx0XHRAdmFsdWVbMF0gPSBAZm9ybWF0VmFsdWUodmFsdWVbMF0pXG5cdFx0XHRAdmFsdWVbMV0gPSBAZm9ybWF0VmFsdWUodmFsdWVbMV0pXG5cdFx0ZWxzZVxuXHRcdFx0QHZhbHVlW2luZGV4XSA9IEBmb3JtYXRWYWx1ZSh2YWx1ZSlcblxuXHRcdCMgZml4IHZhbHVlIChmaXJzdCBzbWFsbGVyLCBiaWdnZXIgaXMgc2Vjb25kKVxuXHRcdGlmIEB2YWx1ZVswXSA+IEB2YWx1ZVsxXVxuXHRcdFx0dG1wID0gQHZhbHVlWzBdXG5cdFx0XHRAdmFsdWVbMF0gPSBAdmFsdWVbMV1cblx0XHRcdEB2YWx1ZVsxXSA9IHRtcFxuXG5cdFx0QHVwZGF0ZVNsaWRlcih0cnVlKVxuXHRcdHJldHVybiB0aGlzXG5cblxuXHR1cGRhdGVTbGlkZXI6IChvbmx5VmFsdWUpLT5cblx0XHRpZiAhb25seVZhbHVlIHx8ICFAdHJhY2tQb3Ncblx0XHRcdEB0cmFja1BvcyA9IEB0cmFja0VsLmdldFBvc2l0aW9uKClcblx0XHRcdEB0cmFja1NpemUgPSBAdHJhY2tFbC5nZXRTaXplKClcblx0XHRcdEBzdGVwU2l6ZSA9IEB0cmFja1NpemUueCAvIChAbWF4LUBtaW4pXG5cdFx0QGtub2IwRWwuc2V0U3R5bGUoJ2xlZnQnLCAoKEB2YWx1ZVswXS1AbWluKSpAc3RlcFNpemUpKVxuXHRcdEBrbm9iMUVsLnNldFN0eWxlKCdsZWZ0JywgKChAdmFsdWVbMV0tQG1pbikqQHN0ZXBTaXplKSlcblx0XHRAc2VsZWN0aW9uRWwuc2V0U3R5bGUoJ3dpZHRoJywgKCgoQHZhbHVlWzFdIC0gQHZhbHVlWzBdKS1AbWluKSpAc3RlcFNpemUpKVxuXHRcdEBzZWxlY3Rpb25FbC5zZXRTdHlsZSgnbGVmdCcsICgoKEB2YWx1ZVswXSktQG1pbikqQHN0ZXBTaXplKSlcblx0XHRyZXR1cm5cblxuXG5cdGZvcm1hdFZhbHVlOiAodmFsdWUpIC0+XG5cdFx0dmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlKVxuXHRcdHZhbHVlID0gcGFyc2VJbnQodmFsdWUvQHN0ZXApICogQHN0ZXAgIGlmIEBzdGVwID4gMVxuXHRcdHZhbHVlID0gTWF0aC5taW4oQG1heCwgTWF0aC5tYXgoQG1pbiwgdmFsdWUpKVxuXHRcdHJldHVybiB2YWx1ZVxuXG5cblx0Z2V0VmFsdWU6IChpbmRleCkgLT5cblx0XHRpZiBpbmRleCBpc250IHVuZGVmaW5lZFxuXHRcdFx0cmV0dXJuIEB2YWx1ZVtpbmRleF1cblx0XHRlbHNlIGlmIEBtb2RlIGlzICdyYW5nZSdcblx0XHRcdHJldHVybiBAdmFsdWVcblx0XHRlbHNlXG5cdFx0XHRyZXR1cm4gaWYgQHZhbHVlWzFdID4gQHZhbHVlWzBdIHRoZW4gQHZhbHVlWzFdIGVsc2UgQHZhbHVlWzBdXG5cblxuXHRkZWNyZWFzZTogLT5cblx0XHRpZiAhQGFjdGl2ZUtub2JFbCB0aGVuIHJldHVyblxuXHRcdGluZGV4ID0gQGFjdGl2ZUtub2JFbC5yZXRyaWV2ZSgnaW5kZXgnKVxuXHRcdEBzZXRWYWx1ZShAdmFsdWVbaW5kZXhdLUBzdGVwLCBpbmRleClcblx0XHRyZXR1cm4gdGhpc1xuXG5cblx0aW5jcmVhc2U6IC0+XG5cdFx0aWYgIUBhY3RpdmVLbm9iRWwgdGhlbiByZXR1cm5cblx0XHRpbmRleCA9IEBhY3RpdmVLbm9iRWwucmV0cmlldmUoJ2luZGV4Jylcblx0XHRAc2V0VmFsdWUoQHZhbHVlW2luZGV4XStAc3RlcCwgaW5kZXgpXG5cdFx0cmV0dXJuIHRoaXNcblxuXG5cdHNldERpc2FibGVkOiAoQGRpc2FibGVkKSAtPlxuXHRcdGlmICFAcmVuZGVyZWQgdGhlbiByZXR1cm5cblx0XHRAZWwudG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJywgQGRpc2FibGVkKVxuXHRcdEBrbm9iMEVsLnNldCgndGFiaW5kZXgnLCAtQGRpc2FibGVkKVxuXHRcdEBrbm9iMUVsLnNldCgndGFiaW5kZXgnLCAtQGRpc2FibGVkKVxuXHRcdHJldHVybiB0aGlzXG5cblxuXHRwYXJlbnRTaG93bjogLT5cblx0XHRAdXBkYXRlU2xpZGVyKClcblx0XHRyZXR1cm5cblxuXG5cdGZvcm1hdEtub2JUb29sdGlwOiAodmFsdWUpIC0+XG5cdFx0cmV0dXJuIGlmIEBrbm9iUmVuZGVyZXIgdGhlbiBAa25vYlJlbmRlcmVyKHZhbHVlKSBlbHNlIHZhbHVlXG5cblxuXHRmb3JtYXRTZWxlY3Rpb25Ub29sdGlwOiAodmFsdWUpIC0+XG5cdFx0cmV0dXJuIGlmIEBzZWxlY3Rpb25SZW5kZXJlciB0aGVuIEBzZWxlY3Rpb25SZW5kZXJlcih2YWx1ZSkgZWxzZSBpZiBAbW9kZSBpcyAncmFuZ2UnIHRoZW4gXCIje3ZhbHVlWzBdfSAtICN7dmFsdWVbMV19XCIgZWxzZSB2YWx1ZVxuXG5cblx0ZG9EZXN0cm95OiAtPlxuXHRcdEBzdG9wRHJhZygpXG5cdFx0QGtub2IwRWwucmV0cmlldmUoJ3Rvb2x0aXAnKS5kZXN0cm95KClcblx0XHRAa25vYjFFbC5yZXRyaWV2ZSgndG9vbHRpcCcpLmRlc3Ryb3koKVxuXHRcdEBzZWxlY3Rpb25Ub29sdGlwLmRlc3Ryb3koKVxuXHRcdHdpbmRvdy51biAncmVzaXplJywgQGJvdW5kKCd1cGRhdGVTbGlkZXInKVxuXHRcdHN1cGVyKClcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFNsaWRlcklucHV0IiwiQmFzZVRleHRJbnB1dCA9IHJlcXVpcmUgJy4vQmFzZVRleHRJbnB1dCdcblxuXG5jbGFzcyBUZXh0SW5wdXQgZXh0ZW5kcyBCYXNlVGV4dElucHV0XG5cblx0dHlwZTogJ3RleHQnXG5cdGF1dG9jb21wbGV0ZTogbnVsbFxuXG5cblx0ZG9SZW5kZXI6IC0+XG5cdFx0c3VwZXIoKVxuXHRcdEBlbC5zZXQoXCJ0eXBlXCIsIEB0eXBlKVxuXHRcdEBlbC5zZXQoXCJhdXRvY29tcGxldGVcIiwgQGF1dG9jb21wbGV0ZSkgaWYgQGF1dG9jb21wbGV0ZSBpc250IG51bGxcblx0XHRyZXR1cm5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IFRleHRJbnB1dCIsIkJhc2VUZXh0SW5wdXQgPSByZXF1aXJlICcuL0Jhc2VUZXh0SW5wdXQnXG5cblxuY2xhc3MgVGV4dEFyZWFJbnB1dCBleHRlbmRzIEJhc2VUZXh0SW5wdXRcblxuXHR4dHlwZTogJ3RleHRhcmVhaW5wdXQnXG5cdGVsOiAndGV4dGFyZWEnXG5cdGhlaWdodDogbnVsbFxuXHRyZXNpemU6ICd2ZXJ0aWNhbCdcblxuXG5cdGRvUmVuZGVyOiAtPlxuXHRcdHN1cGVyKClcblx0XHRAZWwuc2V0U3R5bGUoXCJyZXNpemVcIiwgQHJlc2l6ZSkgaWYgQHJlc2l6ZVxuXHRcdEBlbC5zZXRTdHlsZShcImhlaWdodFwiLCBAaGVpZ2h0KSBpZiBAaGVpZ2h0XG5cdFx0cmV0dXJuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBUZXh0QXJlYUlucHV0IiwiY2xhc3MgVG9nZ2xlSW5wdXQgZXh0ZW5kcyBNaXdvLkNvbXBvbmVudFxuXG5cdHh0eXBlOiAndG9nZ2xlaW5wdXQnXG5cdGlzSW5wdXQ6IHRydWVcblx0YmFzZUNsczogJ3RvZ2dsZSdcblx0b25TdGF0ZTogJ3N1Y2Nlc3MnXG5cdG9mZlN0YXRlOiAnZGVmYXVsdCdcblx0b25UZXh0OiAnT04nXG5cdG9mZlRleHQ6ICdPRkYnXG5cdHZhbHVlOiBmYWxzZVxuXHRkaXNhYmxlZDogZmFsc2Vcblx0cmVhZG9ubHk6IGZhbHNlXG5cdHNpemU6ICdtZCdcblxuXG5cdGJlZm9yZUluaXQ6IC0+XG5cdFx0c3VwZXJcblx0XHRAb25UZXh0ID0gbWl3by50cignbWl3by5pbnB1dHMuc3dpdGNoT24nKVxuXHRcdEBvZmZUZXh0ID0gbWl3by50cignbWl3by5pbnB1dHMuc3dpdGNoT2ZmJylcblx0XHRyZXR1cm5cblxuXG5cdHRvZ2dsZTogLT5cblx0XHRAc2V0VmFsdWUoIUBnZXRWYWx1ZSgpKVxuXHRcdHJldHVyblxuXG5cblx0c2V0VmFsdWU6ICh2YWx1ZSwgc2lsZW50KSAtPlxuXHRcdGlmICFzaWxlbnRcblx0XHRcdEBwcmV2ZW50Q2hhbmdlID0gZmFsc2Vcblx0XHRcdEBlbWl0KCdiZWZvcmVjaGFuZ2UnLCB0aGlzKVxuXHRcdFx0aWYgQHByZXZlbnRDaGFuZ2UgdGhlbiByZXR1cm5cblxuXHRcdG9sZFZhbHVlID0gQHZhbHVlXG5cdFx0QHZhbHVlID0gdmFsdWVcblxuXHRcdGlmIEByZW5kZXJlZFxuXHRcdFx0QGlucHV0RWwuc2V0KCdjaGVja2VkJywgdmFsdWUpXG5cdFx0XHRAdGV4dEVsLnNldCgnaHRtbCcsIGlmIHZhbHVlIHRoZW4gQG9uVGV4dCBlbHNlIEBvZmZUZXh0KVxuXHRcdFx0QGVsLnRvZ2dsZUNsYXNzKCd0b2dnbGUtb24nLCB2YWx1ZSlcblx0XHRcdC50b2dnbGVDbGFzcygndG9nZ2xlLW9mZicsICF2YWx1ZSlcblx0XHRcdC50b2dnbGVDbGFzcygndG9nZ2xlLScrQG9uU3RhdGUsIHZhbHVlKVxuXHRcdFx0LnRvZ2dsZUNsYXNzKCd0b2dnbGUtJytAb2ZmU3RhdGUsICF2YWx1ZSlcblxuXHRcdGlmICFzaWxlbnQgJiYgb2xkVmFsdWUgaXNudCB2YWx1ZVxuXHRcdFx0QGVtaXQoJ2NoYW5nZScsIHRoaXMsIHZhbHVlKVxuXHRcdHJldHVyblxuXG5cblx0Z2V0VmFsdWU6IC0+XG5cdFx0cmV0dXJuIGlmIEByZW5kZXJlZCB0aGVuIEBpbnB1dEVsLmdldCgnY2hlY2tlZCcpIGVsc2UgQHZhbHVlXG5cblxuXHRzZXREaXNhYmxlZDogKEBkaXNhYmxlZCkgLT5cblx0XHRpZiAhQHJlbmRlcmVkIHRoZW4gcmV0dXJuXG5cdFx0QGVsLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcsIEBkaXNhYmxlZClcblx0XHRAZWwuc2V0KCd0YWJpbmRleCcsIC1AZGlzYWJsZWQpXG5cdFx0QGlucHV0RWwuc2V0KCdkaXNhYmxlZCcsIEBkaXNhYmxlZClcblx0XHRyZXR1cm5cblxuXG5cdHNldFJlYWRvbmx5OiAoQHJlYWRvbmx5KSAtPlxuXHRcdGlmICFAcmVhZG9ubHkgdGhlbiByZXR1cm5cblx0XHRAZWwudG9nZ2xlQ2xhc3MoJ3JlYWRvbmx5JywgQHJlYWRvbmx5KVxuXHRcdHJldHVyblxuXG5cblx0Z2V0SW5wdXRFbDogLT5cblx0XHRyZXR1cm4gQGlucHV0RWxcblxuXG5cdGdldElucHV0SWQ6IC0+XG5cdFx0cmV0dXJuIEBpZCsnLWlucHV0J1xuXG5cblx0ZG9SZW5kZXI6IC0+XG5cdFx0QGVsLmFkZENsYXNzKCdpbnB1dC0nK0BzaXplKVxuXHRcdEBlbC5hZGRDbGFzcygnZm9ybS1jb250cm9sJylcblx0XHRAZWwuc2V0KCd0YWJpbmRleCcsIDApXG5cdFx0QGVsLnNldCAnaHRtbCcsIFwiXCJcIlxuXHRcdFx0PGRpdiBtaXdvLXJlZmVyZW5jZT1cInRleHRFbFwiIGNsYXNzPSd0b2dnbGUtdGV4dCc+PC9kaXY+XG5cdFx0XHQ8ZGl2IG1pd28tcmVmZXJlbmNlPVwiaGFuZGxlRWxcIiBjbGFzcz0ndG9nZ2xlLWhhbmRsZSc+PC9kaXY+XG5cdFx0XHQ8aW5wdXQgaWQ9XCIje0BnZXRJbnB1dElkKCl9XCIgdHlwZT1cImNoZWNrYm94XCIgdGFiaW5kZXg9XCItMVwiIG1pd28tcmVmZXJlbmNlPVwiaW5wdXRFbFwiIGNsYXNzPSdzY3JlZW4tb2ZmJz5cblx0XHRcIlwiXCJcblx0XHRyZXR1cm5cblxuXG5cdGFmdGVyUmVuZGVyOiAgLT5cblx0XHRzdXBlclxuXHRcdEBlbC5vbiAnY2xpY2snLCAoZSk9PlxuXHRcdFx0ZS5zdG9wKClcblx0XHRcdGlmIEBkaXNhYmxlZCB0aGVuIHJldHVyblxuXHRcdFx0QHRvZ2dsZSgpXG5cdFx0XHRyZXR1cm5cblxuXHRcdEBlbC5vbiAna2V5ZG93bicsIChlKT0+XG5cdFx0XHRpZiBAZGlzYWJsZWQgdGhlbiByZXR1cm5cblx0XHRcdGlmIGUua2V5IGlzICdsZWZ0JyB8fCBlLmtleSBpcyAncmlnaHQnIHx8IGUua2V5IGlzICdzcGFjZSdcblx0XHRcdFx0ZS5zdG9wKClcblx0XHRcdFx0aWYgZS5rZXkgaXMgJ2xlZnQnIHRoZW4gQHNldFZhbHVlKGZhbHNlKVxuXHRcdFx0XHRpZiBlLmtleSBpcyAncmlnaHQnIHRoZW4gQHNldFZhbHVlKHRydWUpXG5cdFx0XHRcdGlmIGUua2V5IGlzICdzcGFjZScgdGhlbiBAdG9nZ2xlKClcblx0XHRcdHJldHVyblxuXG5cdFx0QGlucHV0RWwub24gJ2ZvY3VzJywgPT5cblx0XHRcdGlmIEBkaXNhYmxlZCB0aGVuIHJldHVyblxuXHRcdFx0QHNldEZvY3VzKClcblx0XHRcdHJldHVyblxuXG5cdFx0QHNldFZhbHVlKEB2YWx1ZSwgdHJ1ZSlcblx0XHRAc2V0RGlzYWJsZWQoQGRpc2FibGVkKVxuXHRcdEBzZXRSZWFkb25seShAcmVhZG9ubHkpXG5cdFx0cmV0dXJuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBUb2dnbGVJbnB1dCIsIm1vZHVsZS5leHBvcnRzID1cblxuXHRDaGVja2JveDogcmVxdWlyZSAnLi9DaGVja2JveCdcblx0UmFkaW86IHJlcXVpcmUgJy4vUmFkaW8nXG5cdFNlbGVjdDogcmVxdWlyZSAnLi9TZWxlY3QnXG5cdENvbWJvOiByZXF1aXJlICcuL0NvbWJvJ1xuXHREYXRlOiByZXF1aXJlICcuL0RhdGUnXG5cdERhdGVSYW5nZTogcmVxdWlyZSAnLi9EYXRlUmFuZ2UnXG5cdFRleHQ6IHJlcXVpcmUgJy4vVGV4dCdcblx0U2xpZGVyOiByZXF1aXJlICcuL1NsaWRlcidcblx0VG9nZ2xlOiByZXF1aXJlICcuL1RvZ2dsZSdcblx0Q29sb3I6IHJlcXVpcmUgJy4vQ29sb3InXG5cdFJhZGlvTGlzdDogcmVxdWlyZSAnLi9SYWRpb0xpc3QnXG5cdENoZWNrYm94TGlzdDogcmVxdWlyZSAnLi9DaGVja2JveExpc3QnXG5cdFRleHRBcmVhOiByZXF1aXJlICcuL1RleHRBcmVhJ1xuXHREcm9wU2VsZWN0OiByZXF1aXJlICcuL0Ryb3BTZWxlY3QnXG5cdENvbXBvc2l0ZTogcmVxdWlyZSAnLi9Db21wb3NpdGUnXG4iLCJjbGFzcyBMb2FkaW5nTWFzayBleHRlbmRzIE1pd28uQ29tcG9uZW50XG5cblx0YmFzZUNsczogJ2xvYWRpbmctbWFzaydcblx0dGVtcGxhdGU6IFwiXCJcIlxuXHQ8cCBjbGFzcz1cIntiYXNlQ2xzIGN0fSB0ZXh0LWNlbnRlclwiPkxvYWRpbmcuLi48L3A+XG5cdFwiXCJcIlxuXG5tb2R1bGUuZXhwb3J0cyA9IExvYWRpbmdNYXNrIiwiY2xhc3MgTG9hZGluZ01hc2tGYWN0b3J5XG5cblx0aW5zdGFuY2VDbHM6IG51bGxcblxuXG5cdGNyZWF0ZTogKHRhcmdldCkgLT5cblx0XHRpZiB0YXJnZXQgaW5zdGFuY2VvZiBNaXdvLkNvbXBvbmVudFxuXHRcdFx0dGFyZ2V0ID0gdGFyZ2V0LmVsXG5cdFx0cmV0dXJuIG5ldyBAaW5zdGFuY2VDbHMoe3JlbmRlclRvOnRhcmdldH0pXG5cblxuXHRzaG93OiAodGFyZ2V0KSAtPlxuXHRcdG1hc2sgPSBAY3JlYXRlKHRhcmdldClcblx0XHRtYXNrLnNob3coKVxuXHRcdHJldHVybiBtYXNrXG5cblxubW9kdWxlLmV4cG9ydHMgPSBMb2FkaW5nTWFza0ZhY3RvcnkiLCJtb2R1bGUuZXhwb3J0cyA9XG5cblx0TG9hZGluZ01hc2s6IHJlcXVpcmUoJy4vTG9hZGluZ01hc2snKVxuXHRMb2FkaW5nTWFza0ZhY3Rvcnk6IHJlcXVpcmUoJy4vTG9hZGluZ01hc2tGYWN0b3J5JykiLCJJdGVtID0gcmVxdWlyZSAnLi9JdGVtJ1xuRHJvcGRvd25MaXN0ID0gcmVxdWlyZSAnLi4vZHJvcGRvd24vTGlzdCdcblxuXG5jbGFzcyBEcm9wZG93bkl0ZW0gZXh0ZW5kcyBJdGVtXG5cblx0ZHJvcGRvd246IG51bGxcblxuXG5cdGFmdGVyUmVuZGVyOiAtPlxuXHRcdHN1cGVyXG5cdFx0QGVsLnNldCgnYXJpYS1oYXNwb3B1cCcsIHRydWUpXG5cdFx0QGVsLnNldCgnYXJpYS1leHBhbmRlZCcsIGZhbHNlKVxuXHRcdHJldHVyblxuXG5cblx0Z2V0RHJvcGRvd246IC0+XG5cdFx0aWYgIUBkcm9wZG93blxuXHRcdFx0QGRyb3Bkb3duID0gbmV3IERyb3Bkb3duTGlzdCh7dGFyZ2V0OiBAZWx9KVxuXHRcdFx0QGRyb3Bkb3duLmVsLnNldCgnYXJpYS1sYWJlbGxlZGJ5JywgQGlkKVxuXHRcdHJldHVybiBAZHJvcGRvd25cblxuXG5cdGRvUmVuZGVyOiAtPlxuXHRcdHN1cGVyXG5cdFx0Y2FyZXQgPSBuZXcgRWxlbWVudChcInNwYW5cIiwge2NsczogJ2NhcmV0J30pXG5cdFx0Y2FyZXQuaW5qZWN0KEBnZXRDb250ZW50RWwoKSlcblx0XHRyZXR1cm5cblxuXG5cdGNsaWNrOiAtPlxuXHRcdEBnZXREcm9wZG93bigpLnRvZ2dsZSgpXG5cdFx0cmV0dXJuXG5cblxuXHRkb0Rlc3Ryb3k6IC0+XG5cdFx0QGRyb3Bkb3duLmRlc3Ryb3koKSBpZiBAZHJvcGRvd25cblx0XHRzdXBlclxuXG5cbm1vZHVsZS5leHBvcnRzID0gRHJvcGRvd25JdGVtIiwiY2xhc3MgTmF2YmFySXRlbSBleHRlbmRzIE1pd28uQ29tcG9uZW50XG5cblx0eHR5cGU6IFwibmF2YmFyaXRlbVwiXG5cdGlzTmF2YmFySXRlbTogdHJ1ZVxuXHRoYW5kbGVyOiBudWxsXG5cdHRleHQ6IFwiXCJcblx0ZGlzYWJsZWQ6IGZhbHNlXG5cdGFjdGl2ZTogZmFsc2Vcblx0ZWw6ICdsaSdcblx0YmFzZUNsczogJ2Ryb3Bkb3duJ1xuXHRjb250ZW50RWw6ICdhJ1xuXG5cblx0c2V0RGlzYWJsZWQ6IChkaXNhYmxlZCwgc2lsZW50KSAtPlxuXHRcdEBlbC50b2dnbGVDbGFzcygnZGlzYWJsZWQnLCBkaXNhYmxlZClcblx0XHRAZWwuc2V0KCd0YWJpbmRleCcsIC1kaXNhYmxlZClcblx0XHRAZGlzYWJsZWQgPSBkaXNhYmxlZFxuXHRcdChpZiBkaXNhYmxlZCB0aGVuIEBlbWl0KCdkaXNhYmxlZCcsIHRoaXMpIGVsc2UgQGVtaXQoJ2VuYWJsZWQnLCB0aGlzKSkgdW5sZXNzIHNpbGVudFxuXHRcdHJldHVyblxuXG5cblx0c2V0VGV4dDogKEB0ZXh0KSAtPlxuXHRcdEB0ZXh0RWwuc2V0KFwiaHRtbFwiLCBAdGV4dCkgaWYgQHRleHRFbFxuXHRcdHJldHVyblxuXG5cblx0c2V0QWN0aXZlOiAoYWN0aXZlLCBzaWxlbnQpIC0+XG5cdFx0QGVsLnRvZ2dsZUNsYXNzKCdhY3RpdmUnLCBhY3RpdmUpXG5cdFx0QGFjdGl2ZSA9IGFjdGl2ZVxuXHRcdEBlbWl0KCdhY3RpdmUnLCB0aGlzLCBhY3RpdmUpIGlmICFzaWxlbnQgJiYgYWN0aXZlXG5cdFx0cmV0dXJuXG5cblxuXHRpc0FjdGl2ZTogLT5cblx0XHRyZXR1cm4gQGFjdGl2ZSBhbmQgbm90IEBkaXNhYmxlZFxuXG5cblx0Y2xpY2s6IChlKSAtPlxuXHRcdGlmIFR5cGUuaXNGdW5jdGlvbihAaGFuZGxlcilcblx0XHRcdEBoYW5kbGVyKHRoaXMsIGUpXG5cdFx0ZWxzZSBpZiBUeXBlLmlzU3RyaW5nKEBoYW5kbGVyKVxuXHRcdFx0aWYgQGhhbmRsZXIuaW5kZXhPZignIycpIGlzIDBcblx0XHRcdFx0bWl3by5yZWRpcmVjdChAaGFuZGxlcilcblx0XHRcdGVsc2Vcblx0XHRcdFx0ZG9jdW1lbnQubG9jYXRpb24gPSBAaGFuZGxlclxuXHRcdHJldHVyblxuXG5cblx0ZG9SZW5kZXI6IC0+XG5cdFx0QGVsLmFkZENsYXNzKCdhY3RpdmUnKSAgaWYgQGFjdGl2ZVxuXHRcdEBlbC5hZGRDbGFzcygnZGlzYWJsZWQnKSAgaWYgQGRpc2FibGVkXG5cdFx0QGVsLnNldCgndGFiaW5kZXgnLCAtMSkgIGlmIEBkaXNhYmxlZFxuXHRcdEBnZXRDb250ZW50RWwoKS5zZXQoJ2hyZWYnLCAnIycpXG5cdFx0QGdldENvbnRlbnRFbCgpLm9uKFwiY2xpY2tcIiwgQGJvdW5kKFwib25DbGlja1wiKSlcblx0XHRAdGV4dEVsID0gbmV3IEVsZW1lbnQoXCJzcGFuXCIsIHtodG1sOiBAdGV4dCwgcGFyZW50OiBAZ2V0Q29udGVudEVsKCl9KVxuXHRcdHJldHVyblxuXG5cblx0b25DbGljazogKGUpIC0+XG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpXG5cdFx0aWYgQGRpc2FibGVkIHRoZW4gcmV0dXJuXG5cblx0XHRAcHJldmVudENsaWNrID0gZmFsc2Vcblx0XHRAZW1pdCgnYmVmb3JlY2xpY2snLCB0aGlzLCBlKVxuXHRcdGlmIEBwcmV2ZW50Q2xpY2sgdGhlbiByZXR1cm5cblxuXHRcdEBlbWl0KCdjbGljaycsIHRoaXMsIGUpXG5cdFx0QGNsaWNrKGUpXG5cdFx0cmV0dXJuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBOYXZiYXJJdGVtIiwibW9kdWxlLmV4cG9ydHMgPVxuXG5cdEl0ZW06IHJlcXVpcmUgJy4vSXRlbSdcblx0RHJvcGRvd25JdGVtOiByZXF1aXJlICcuL0Ryb3Bkb3duSXRlbSciLCJOb3RpZmljYXRpb24gPSB3aW5kb3cuTm90aWZpY2F0aW9uXG5cblxuY2xhc3MgTm90aWZpY2F0b3IgZXh0ZW5kcyBNaXdvLk9iamVjdFxuXG5cdG5vdGlmaWNhdGlvbjogbnVsbFxuXG5cblx0aW5pdGlhbGl6ZTogKGNvbmZpZykgLT5cblx0XHRzdXBlcihjb25maWcpXG5cdFx0d2luZG93Lm9uIFwiYmVmb3JldW5sb2FkXCIsICgpPT5cblx0XHRcdEBub3RpZmljYXRpb24uY2xvc2UoKSAgaWYgQG5vdGlmaWNhdGlvblxuXHRcdFx0cmV0dXJuXG5cdFx0cmV0dXJuXG5cblxuXHRyZXF1ZXN0UGVybWlzc2lvbjogKCkgLT5cblx0XHRpZiBOb3RpZmljYXRpb24gJiYgTm90aWZpY2F0aW9uLnBlcm1pc3Npb24gaXMgJ2RlZmF1bHQnXG5cdFx0XHROb3RpZmljYXRpb24ucmVxdWVzdFBlcm1pc3Npb24oKTtcblx0XHRyZXR1cm5cblxuXG5cdG5vdGlmeTogKGNvbmZpZykgLT5cblx0XHRpZiAhTm90aWZpY2F0aW9uIG9yIE5vdGlmaWNhdGlvbi5wZXJtaXNzaW9uIGlzbnQgXCJncmFudGVkXCJcblx0XHRcdHJldHVybiBudWxsXG5cblx0XHRub3RpZmljYXRpb24gPSBuZXcgTm90aWZpY2F0aW9uIGNvbmZpZy50aXRsZSxcblx0XHRcdGJvZHk6IGNvbmZpZy5tZXNzYWdlXG5cdFx0XHRpY29uOiBjb25maWcuaWNvblxuXG5cdFx0bm90aWZpY2F0aW9uLmhhbmRsZXIgPSBjb25maWcuY2FsbGJhY2tcblxuXHRcdG5vdGlmaWNhdGlvbi5vbmNsaWNrID0gKCk9PlxuXHRcdFx0Y29uZmlnLmNhbGxiYWNrKCkgIGlmIGNvbmZpZy5jYWxsYmFja1xuXHRcdFx0bm90aWZpY2F0aW9uLmNsb3NlKClcblx0XHRcdHJldHVyblxuXG5cdFx0bm90aWZpY2F0aW9uLm9uc2hvdyA9ICgpPT5cblx0XHRcdGlmIEBub3RpZmljYXRpb24gaXMgbm90aWZpY2F0aW9uXG5cdFx0XHRcdEBub3RpZmljYXRpb24uY2xvc2UoKVxuXHRcdFx0QG5vdGlmaWNhdGlvbiA9IG5vdGlmaWNhdGlvblxuXHRcdFx0cmV0dXJuXG5cblx0XHRub3RpZmljYXRpb24ub25jbG9zZSA9ICgpPT5cblx0XHRcdGlmIEBub3RpZmljYXRpb24gaXMgbm90aWZpY2F0aW9uXG5cdFx0XHRcdGRlbGV0ZSBAbm90aWZpY2F0aW9uXG5cdFx0XHRyZXR1cm5cblxuXHRcdGlmIGNvbmZpZy50aW1lb3V0XG5cdFx0XHRzZXRUaW1lb3V0ICgpPT5cblx0XHRcdFx0bm90aWZpY2F0aW9uLmNsb3NlKClcblx0XHRcdFx0cmV0dXJuXG5cdFx0XHQsIEB0aW1lb3V0XG5cblx0XHRAbm90aWZpY2F0aW9uID0gbm90aWZpY2F0aW9uXG5cdFx0cmV0dXJuIG5vdGlmaWNhdGlvblxuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBOb3RpZmljYXRvciIsIm1vZHVsZS5leHBvcnRzID1cblx0Tm90aWZpY2F0b3I6IHJlcXVpcmUgJy4vTm90aWZpY2F0b3InIiwiUGFnaW5hdG9yID0gcmVxdWlyZSAnLi4vdXRpbHMvUGFnaW5hdG9yJ1xuXG5cbmNsYXNzIFBhZ2VyIGV4dGVuZHMgTWl3by5Db21wb25lbnRcblxuXHRlbDogJ25hdidcblx0cGFnaW5hdG9yOiBudWxsXG5cdG5hdmlnYXRlOiBmYWxzZVxuXG5cblx0ZG9Jbml0OiAtPlxuXHRcdHN1cGVyXG5cdFx0QHBhZ2luYXRvciA9IG5ldyBQYWdpbmF0b3IoKVxuXHRcdEBwYWdpbmF0b3Iub24gJ3BhZ2UnLCA9PlxuXHRcdFx0aWYgIUByZW5kZXJlZCB0aGVuIHJldHVyblxuXHRcdFx0QHByZXZFbC50b2dnbGVDbGFzcygnZGlzYWJsZWQnLCBAcGFnaW5hdG9yLmlzRmlyc3QoKSlcblx0XHRcdEBuZXh0RWwudG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJywgQHBhZ2luYXRvci5pc0xhc3QoKSlcblx0XHRcdHJldHVyblxuXHRcdHJldHVyblxuXG5cblx0c2V0U3RvcmU6IChzdG9yZSkgLT5cblx0XHRAc3RvcmUgPSBzdG9yZVxuXHRcdEBtb24gc3RvcmUsICdiZWZvcmVsb2FkJywgPT5cblx0XHRcdEBzZXREaXNhYmxlZCh0cnVlKVxuXHRcdFx0cmV0dXJuXG5cblx0XHRAbW9uIHN0b3JlLCAnbG9hZCcsID0+XG5cdFx0XHRAc2V0RGlzYWJsZWQoZmFsc2UpXG5cdFx0XHRAc3luY1BhZ2luYXRvcigpXG5cdFx0XHRyZXR1cm5cblxuXHRcdGlmIHN0b3JlLmxvYWRpbmdcblx0XHRcdEBzZXREaXNhYmxlZCh0cnVlKVxuXHRcdGVsc2UgaWYgc3RvcmUubG9hZGVkXG5cdFx0XHRAc3luY1BhZ2luYXRvcigpXG5cdFx0cmV0dXJuXG5cblxuXHRzeW5jUGFnaW5hdG9yOiAtPlxuXHRcdEBwYWdpbmF0b3Iuc2V0SXRlbXNQZXJQYWdlKEBzdG9yZS5wYWdlU2l6ZSlcblx0XHRAcGFnaW5hdG9yLnNldEl0ZW1Db3VudChAc3RvcmUudG90YWxDb3VudClcblx0XHRAcGFnaW5hdG9yLnNldFBhZ2UoQHN0b3JlLnBhZ2UpXG5cdFx0QHJlZHJhdygpXG5cdFx0cmV0dXJuXG5cblxuXHRkb1JlbmRlcjogLT5cblx0XHR1bCA9IG5ldyBFbGVtZW50KCd1bCcsIHtjbHM6J3BhZ2VyJ30pLmluamVjdChAZWwpXG5cblx0XHR0ZXh0ID0gJzxzcGFuPicrbWl3by50cignbWl3by5uYXYucHJldicpKyc8L3NwYW4+J1xuXHRcdHRleHQgPSAnPHNwYW4gYXJpYS1oaWRkZW49XCJ0cnVlXCI+JmxhcnI7PC9zcGFuPiAnK3RleHQgaWYgQG5hdmlnYXRlXG5cdFx0bGkgPSBuZXcgRWxlbWVudCgnbGknKS5pbmplY3QodWwpXG5cdFx0bGkudG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJywgQHBhZ2luYXRvci5pc0ZpcnN0KCkpXG5cdFx0bGkuYWRkQ2xhc3MoJ3ByZXZpb3VzJykgaWYgQG5hdmlnYXRlXG5cdFx0YSA9IG5ldyBFbGVtZW50KCdhJywge2h0bWw6dGV4dCwgaHJlZjonIycsICdkYXRhLXBhZ2UnOidwcmV2Jywgcm9sZTonYnV0dG9uJ30pLmluamVjdChsaSlcblx0XHRAcHJldkVsID0gbGlcblxuXHRcdHRleHQgPSAnPHNwYW4+JyttaXdvLnRyKCdtaXdvLm5hdi5uZXh0JykrJzwvc3Bhbj4nXG5cdFx0dGV4dCA9IHRleHQrJyA8c3BhbiBhcmlhLWhpZGRlbj1cInRydWVcIj4mcmFycjs8L3NwYW4+JyBpZiBAbmF2aWdhdGVcblx0XHRsaSA9IG5ldyBFbGVtZW50KCdsaScpLmluamVjdCh1bClcblx0XHRsaS5zZXRTdHlsZSgncGFkZGluZy1sZWZ0JywgJzEwcHgnKVxuXHRcdGxpLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcsIEBwYWdpbmF0b3IuaXNMYXN0KCkpXG5cdFx0bGkuYWRkQ2xhc3MoJ25leHQnKSBpZiBAbmF2aWdhdGVcblx0XHRhID0gbmV3IEVsZW1lbnQoJ2EnLCB7aHRtbDp0ZXh0LCBocmVmOicjJywgJ2RhdGEtcGFnZSc6J25leHQnLCByb2xlOididXR0b24nfSkuaW5qZWN0KGxpKVxuXHRcdEBuZXh0RWwgPSBsaVxuXHRcdHJldHVyblxuXG5cblx0YWZ0ZXJSZW5kZXI6IC0+XG5cdFx0c3VwZXJcblx0XHRAbW9uKEBlbCwgJ2NsaWNrOnJlbGF5KGEpJywgJ29uQ2xpY2snKVxuXHRcdHJldHVyblxuXG5cblx0b25DbGljazogKGV2ZW50LCBlbCktPlxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KClcblx0XHRpZiBAZGlzYWJsZWQgdGhlbiByZXR1cm5cblx0XHRpZiBlbC5nZXRQYXJlbnQoJ2xpJykuaGFzQ2xhc3MoJ2Rpc2FibGVkJykgdGhlbiByZXR1cm5cblx0XHRwYWdlID0gZWwuZ2V0KCdkYXRhLXBhZ2UnKVxuXHRcdEBlbWl0KCdwYWdlJywgdGhpcywgcGFnZSlcblx0XHRpZiBAc3RvcmUgdGhlbiBAc3RvcmUubG9hZE5lc3RlZFBhZ2UocGFnZSlcblx0XHRyZXR1cm5cblxuXG5cdGRvRGVzdHJveTogLT5cblx0XHRAcGFnaW5hdG9yLmRlc3Ryb3koKVxuXHRcdHN1cGVyXG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IFBhZ2VyIiwiY2xhc3MgUGFnZXJJbmZvIGV4dGVuZHMgTWl3by5Db21wb25lbnRcblxuXHR4dHlwZTogJ3BhZ2VyaW5mbydcblx0ZWw6ICdwJ1xuXHRiYXNlQ2xzOiAncGFnZXItaW5mbydcblxuXG5cdHNldFN0b3JlOiAoc3RvcmUpIC0+XG5cdFx0QHN0b3JlID0gc3RvcmVcblxuXHRcdEBtb24gc3RvcmUsICdsb2FkJywgPT5cblx0XHRcdEByZWRyYXcoKSBpZiBAcmVuZGVyZWRcblx0XHRcdHJldHVyblxuXG5cdFx0QHJlZHJhdygpIGlmIEByZW5kZXJlZCAmJiBzdG9yZS5sb2FkZWRcblx0XHRyZXR1cm5cblxuXG5cdGRvUmVuZGVyOiAtPlxuXHRcdHN0b3JlID0gQHN0b3JlXG5cdFx0ZnJvbSA9IChzdG9yZS5wYWdlLTEpICogc3RvcmUucGFnZVNpemVcblx0XHR0byA9IE1hdGgubWluKHN0b3JlLnRvdGFsQ291bnQsIGZyb20gKyBzdG9yZS5wYWdlU2l6ZSlcblx0XHRAZWwuc2V0ICdodG1sJywgbWl3by50cignbWl3by5wYWdpbmF0aW9uLnBhZ2VJbmZvJykuc3Vic3RpdHV0ZVxuXHRcdFx0dmlzaWJsZTogZnJvbSArICcgLSAnICsgdG9cblx0XHRcdHRvdGFsOiBzdG9yZS50b3RhbENvdW50XG5cdFx0cmV0dXJuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBQYWdlckluZm8iLCJVdGlsUGFnaW5hdG9yID0gcmVxdWlyZSAnLi4vdXRpbHMvUGFnaW5hdG9yJ1xuXG5cbmNsYXNzIFBhZ2luYXRvciBleHRlbmRzIE1pd28uQ29tcG9uZW50XG5cblx0bmVzdGVkQ291bnQ6IDJcblx0cmVtb3RlQ291bnQ6IDJcblx0c2l6ZTogbnVsbFxuXHRlbDogJ25hdidcblx0cGFnaW5hdG9yOiBudWxsXG5cblxuXHRkb0luaXQ6IC0+XG5cdFx0c3VwZXJcblx0XHRAcGFnaW5hdG9yID0gbmV3IFV0aWxQYWdpbmF0b3IoKVxuXHRcdEBwYWdpbmF0b3Iub24gJ3BhZ2UnLCA9PlxuXHRcdFx0aWYgIUByZW5kZXJlZCB0aGVuIHJldHVyblxuXHRcdFx0QHJlbmRlclBhZ2VzKClcblx0XHRcdHJldHVyblxuXHRcdHJldHVyblxuXG5cblx0c2V0U3RvcmU6IChAc3RvcmUpIC0+XG5cdFx0QG1vbiBzdG9yZSwgJ2JlZm9yZWxvYWQnLCAoKT0+XG5cdFx0XHRAc2V0RGlzYWJsZWQodHJ1ZSlcblx0XHRcdHJldHVyblxuXG5cdFx0QG1vbiBzdG9yZSwgJ2xvYWQnLCAoKT0+XG5cdFx0XHRAc2V0RGlzYWJsZWQoZmFsc2UpXG5cdFx0XHRAc3luY1BhZ2luYXRvcigpXG5cdFx0XHRyZXR1cm5cblxuXHRcdGlmIHN0b3JlLmxvYWRpbmdcblx0XHRcdEBzZXREaXNhYmxlZCh0cnVlKVxuXHRcdGVsc2UgaWYgc3RvcmUubG9hZGVkXG5cdFx0XHRAc3luY1BhZ2luYXRvcigpXG5cdFx0cmV0dXJuXG5cblxuXHRzeW5jUGFnaW5hdG9yOiAtPlxuXHRcdEBwYWdpbmF0b3Iuc2V0SXRlbXNQZXJQYWdlKEBzdG9yZS5wYWdlU2l6ZSlcblx0XHRAcGFnaW5hdG9yLnNldEl0ZW1Db3VudChAc3RvcmUudG90YWxDb3VudClcblx0XHRAcGFnaW5hdG9yLnNldFBhZ2UoQHN0b3JlLnBhZ2UpXG5cdFx0QHJlZHJhdygpXG5cdFx0cmV0dXJuXG5cblxuXHRkb1JlbmRlcjogLT5cblx0XHRAZWwuZW1wdHkoKVxuXHRcdGlmIEBwYWdpbmF0b3IuaXRlbUNvdW50IGlzIG51bGwgdGhlbiByZXR1cm5cblx0XHRpZiBAcGFnaW5hdG9yLmdldFBhZ2VDb3VudCgpIDwgMiB0aGVuIHJldHVyblxuXG5cdFx0bWluID0gTWF0aC5tYXgoQHBhZ2luYXRvci5nZXRGaXJzdFBhZ2UoKSwgQHBhZ2UtQG5lc3RlZENvdW50KVxuXHRcdG1heCA9IE1hdGgubWluKEBwYWdpbmF0b3IuZ2V0TGFzdFBhZ2UoKSwgQHBhZ2UrQG5lc3RlZENvdW50KVxuXHRcdHN0ZXBzID0gW21pbi4ubWF4XVxuXHRcdHF1b3RpZW50ID0gKEBwYWdpbmF0b3IuZ2V0UGFnZUNvdW50KCkgLSAxKS9AcmVtb3RlQ291bnRcblx0XHRmb3IgaSBpbiBbMC4uQHJlbW90ZUNvdW50XSB0aGVuIHN0ZXBzLmluY2x1ZGUoTWF0aC5yb3VuZChxdW90aWVudCppKStAcGFnaW5hdG9yLmdldEZpcnN0UGFnZSgpKVxuXHRcdHN0ZXBzLnNvcnQgKGEsYiktPmEtYlxuXG5cdFx0dWwgPSBuZXcgRWxlbWVudCgndWwnLCB7Y2xzOidwYWdpbmF0aW9uJ30pLmluamVjdChAZWwpXG5cdFx0dWwuYWRkQ2xhc3MoJ3BhZ2luYXRpb24tJytAc2l6ZSkgaWYgQHNpemVcblxuXHRcdHRleHQgPSAnPHNwYW4gY2xhc3M9XCJzci1vbmx5XCI+JyttaXdvLnRyKCdtaXdvLm5hdi5wcmV2JykrJzwvc3Bhbj48c3BhbiBhcmlhLWhpZGRlbj1cInRydWVcIj4mbGFxdW87PC9zcGFuPidcblx0XHRsaSA9IG5ldyBFbGVtZW50KCdsaScpLmluamVjdCh1bClcblx0XHRhID0gbmV3IEVsZW1lbnQoJ2EnLCB7aHRtbDp0ZXh0LCBocmVmOicjJywgJ2RhdGEtcGFnZSc6MSwgcm9sZTonYnV0dG9uJ30pLmluamVjdChsaSlcblx0XHRpZiBAcGFnaW5hdG9yLmlzRmlyc3QoKSB0aGVuIGxpLmFkZENsYXNzKCdkaXNhYmxlZCcpXG5cblx0XHRmb3Igc3RlcCBpbiBzdGVwc1xuXHRcdFx0bGkgPSBuZXcgRWxlbWVudCgnbGknKS5pbmplY3QodWwpXG5cdFx0XHRsaS5hZGRDbGFzcygnYWN0aXZlJykgIGlmIHN0ZXAgaXMgQHBhZ2Vcblx0XHRcdHRleHQgPSAnPHNwYW4+JytzdGVwKyc8L3NwYW4+J1xuXHRcdFx0dGV4dCA9IHN0ZXArJzxzcGFuIGNsYXNzPVwic3Itb25seVwiPignK21pd28udHIoJ21pd28ubmF2LmN1cnJlbnQnKSsnKTwvc3Bhbj4nIGlmIHN0ZXAgaXMgQHBhZ2Vcblx0XHRcdGEgPSBuZXcgRWxlbWVudCgnYScsIHtodG1sOnRleHQsIGhyZWY6JyMnLCAnZGF0YS1wYWdlJzpzdGVwLCByb2xlOididXR0b24nfSkuaW5qZWN0KGxpKVxuXG5cdFx0dGV4dCA9ICc8c3BhbiBhcmlhLWhpZGRlbj1cInRydWVcIj4mcmFxdW87PC9zcGFuPjxzcGFuIGNsYXNzPVwic3Itb25seVwiPicrbWl3by50cignbWl3by5uYXYubmV4dCcpKyc8L3NwYW4+J1xuXHRcdGxpID0gbmV3IEVsZW1lbnQoJ2xpJykuaW5qZWN0KHVsKVxuXHRcdGEgPSBuZXcgRWxlbWVudCgnYScsIHtodG1sOnRleHQsIGhyZWY6JyMnLCAnZGF0YS1wYWdlJzpAcGFnaW5hdG9yLmdldExhc3RQYWdlKCksIHJvbGU6J2J1dHRvbid9KS5pbmplY3QobGkpXG5cdFx0aWYgQHBhZ2luYXRvci5pc0xhc3QoKSB0aGVuIGxpLmFkZENsYXNzKCdkaXNhYmxlZCcpXG5cdFx0cmV0dXJuXG5cblxuXHRhZnRlclJlbmRlcjogLT5cblx0XHRzdXBlclxuXHRcdEBtb24oQGVsLCAnY2xpY2s6cmVsYXkoYSknLCAnb25DbGljaycpXG5cdFx0cmV0dXJuXG5cblxuXHRvbkNsaWNrOiAoZXZlbnQsIGVsKSAtPlxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KClcblx0XHRpZiBAZGlzYWJsZWQgdGhlbiByZXR1cm5cblx0XHRpZiBlbC5nZXRQYXJlbnQoJ2xpJykuaGFzQ2xhc3MoJ2Rpc2FibGVkJykgdGhlbiByZXR1cm5cblx0XHRwYWdlID0gcGFyc2VJbnQoZWwuZ2V0KCdkYXRhLXBhZ2UnKSlcblx0XHRAZW1pdCgncGFnZScsIHRoaXMsIHBhZ2UpXG5cdFx0aWYgQHN0b3JlIHRoZW4gQHN0b3JlLmxvYWRQYWdlKHBhZ2UpXG5cdFx0cmV0dXJuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBQYWdpbmF0b3IiLCJtb2R1bGUuZXhwb3J0cyA9XG5cdFBhZ2luYXRvcjogcmVxdWlyZSAnLi9QYWdpbmF0b3InXG5cdFBhZ2VyOiByZXF1aXJlICcuL1BhZ2VyJ1xuXHRQYWdlckluZm86IHJlcXVpcmUgJy4vUGFnZXJJbmZvJyIsIlNjcm9sbGFibGUgPSByZXF1aXJlICcuL1Njcm9sbGFibGUnXG5cblxuY2xhc3MgUGFuZSBleHRlbmRzIE1pd28uQ29udGFpbmVyXG5cblx0IyBAdmFyIHtib29sZWFufVxuXHRzY3JvbGxhYmxlOiBmYWxzZVxuXG5cdCMgQHZhciB7U2Nyb2xsZXJQbHVnaW58T2JqZWN0fVxuXHRzY3JvbGxhYmxlT3B0aW9uczogbnVsbFxuXG5cdCMgQHZhciB7c3RyaW5nfVxuXHRjb250ZW50RWw6ICdkaXYnXG5cblxuXHRkb0luaXQ6IC0+XG5cdFx0c3VwZXJcblx0XHRAc2V0U2Nyb2xsYWJsZShAc2Nyb2xsYWJsZSlcblx0XHRyZXR1cm5cblxuXG5cdHNldFNjcm9sbGFibGU6IChAc2Nyb2xsYWJsZSkgLT5cblx0XHRpZiBAc2Nyb2xsYWJsZSAmJiAhQGhhc1BsdWdpbignc2Nyb2xsYWJsZScpXG5cdFx0XHRAaW5zdGFsbFBsdWdpbignc2Nyb2xsYWJsZScsIG5ldyBTY3JvbGxhYmxlKHRoaXMsIEBzY3JvbGxhYmxlT3B0aW9ucykpXG5cdFx0ZWxzZSBpZiAhQHNjcm9sbGFibGUgJiYgQGhhc1BsdWdpbignc2Nyb2xsYWJsZScpXG5cdFx0XHRAdW5pbnN0YWxsUGx1Z2luKCdzY3JvbGxhYmxlJylcblx0XHRyZXR1cm5cblxuXG5cdCMgU2Nyb2xscyB0aGUgc2Nyb2xsYWJsZSBhcmVhIHRvIHRoZSB0b3Btb3N0IHBvc2l0aW9uXG5cdHNjcm9sbFRvcDogLT5cblx0XHRAZ2V0UGx1Z2luKCdzY3JvbGxhYmxlJykuc2Nyb2xsVG9wKCkgaWYgQHNjcm9sbGFibGVcblx0XHRyZXR1cm5cblxuXG5cdCMgU2Nyb2xscyB0aGUgc2Nyb2xsYWJsZSBhcmVhIHRvIHRoZSBib3R0b21tb3N0IHBvc2l0aW9uXG5cdHNjcm9sbEJvdHRvbTogLT5cblx0XHRAZ2V0UGx1Z2luKCdzY3JvbGxhYmxlJykuc2Nyb2xsQm90dG9tKCkgaWYgQHNjcm9sbGFibGVcblx0XHRyZXR1cm5cblxuXG5cdGFmdGVyUmVuZGVyOiAtPlxuXHRcdHN1cGVyXG5cdFx0QGVsLmFkZENsYXNzKCdwYW5lJylcblx0XHRAY29udGVudEVsLmFkZENsYXNzKCdwYW5lLWN0Jylcblx0XHRyZXR1cm5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IFBhbmUiLCJTbGlkZXIgPSByZXF1aXJlICcuLi9kcmFnL1NsaWRlcidcblxuXG5jbGFzcyBTY3JvbGxhYmxlIGV4dGVuZHMgTWl3by5PYmplY3RcblxuXHRmYWRlOiB0cnVlXG5cdGF1dG9IaWRlOiB0cnVlXG5cdHByb3BvcnRpb25hbDogdHJ1ZVxuXHRwcm9wb3J0aW9uYWxNaW5IZWlnaHQ6IDE1XG5cblxuXHQjIEBwYXJhbSB7TWl3by5jb21wb25lbnQuQ29udGFpbmVyfSBjb250YWluZXJcblx0IyBAcGFyYW0ge09iamVjdH0gY29uZmlnXG5cdGNvbnN0cnVjdG9yOiAoY29udGFpbmVyLCBjb25maWcpIC0+XG5cdFx0QGNvbnRhaW5lciA9IGNvbnRhaW5lclxuXHRcdHN1cGVyKGNvbmZpZylcblx0XHRyZXR1cm5cblxuXG5cdCMgU2Nyb2xscyB0aGUgc2Nyb2xsYWJsZSBhcmVhIHRvIHRoZSB0b3Btb3N0IHBvc2l0aW9uXG5cdHNjcm9sbFRvcDogLT5cblx0XHRAc2Nyb2xsYWJsZUJvZHkuc2Nyb2xsVG9wID0gMFxuXHRcdEBhY3R1YWxpemUoKVxuXHRcdHJldHVyblxuXG5cblx0IyBTY3JvbGxzIHRoZSBzY3JvbGxhYmxlIGFyZWEgdG8gdGhlIGJvdHRvbW1vc3QgcG9zaXRpb25cblx0c2Nyb2xsQm90dG9tOiAtPlxuXHRcdEBzY3JvbGxhYmxlQm9keS5zY3JvbGxUb3AgPSBAc2Nyb2xsYWJsZUJvZHkuc2Nyb2xsSGVpZ2h0XG5cdFx0QGFjdHVhbGl6ZSgpXG5cdFx0cmV0dXJuXG5cblxuXG5cdGFmdGVyUmVuZGVyOiAtPlxuXHRcdEBjb250YWluZXIuZWwuYWRkQ2xhc3MoJ3Njcm9sbGFibGUnKVxuXHRcdEBzY3JvbGxhYmxlQ3QgPSBAY29udGFpbmVyLnNjcm9sbGFibGVDdCB8fCBAY29udGFpbmVyLmVsXG5cdFx0QHNjcm9sbGFibGVCb2R5ID0gQGNvbnRhaW5lci5zY3JvbGxhYmxlRWwgfHwgQGNvbnRhaW5lci5nZXRDb250ZW50RWwoKVxuXHRcdEBzY3JvbGxhYmxlQ3QuYWRkQ2xhc3MoJ3Njcm9sbGFibGUtY3QnKVxuXHRcdEBzY3JvbGxhYmxlQm9keS5hZGRDbGFzcygnc2Nyb2xsYWJsZS1ib2R5JylcblxuXHRcdEBzY3JvbGxiYXIgPSBuZXcgRWxlbWVudCAnZGl2Jyxcblx0XHRcdHBhcmVudDogQHNjcm9sbGFibGVDdFxuXHRcdFx0Y2xzOiAnc2Nyb2xsYWJsZS1zbGlkZXInXG5cdFx0QHNjcm9sbGJhci5zZXQoJ3R3ZWVuJywge2R1cmF0aW9uOiA1MH0pXG5cblx0XHRAa25vYiA9IG5ldyBFbGVtZW50ICdkaXYnLFxuXHRcdFx0cGFyZW50OiBAc2Nyb2xsYmFyXG5cdFx0XHRjbHM6ICdzY3JvbGxhYmxlLWtub2InXG5cblx0XHRAc2xpZGVyID0gbmV3IFNsaWRlciBAc2Nyb2xsYmFyLCBAa25vYixcblx0XHRcdG1vZGU6ICd2ZXJ0aWNhbCdcblx0XHRAc2xpZGVyLm9uICdjaGFuZ2UnLCAoc3RlcCkgPT5cblx0XHRcdEBzY3JvbGxhYmxlQm9keS5zY3JvbGxUb3AgPSAoQHNjcm9sbGFibGVCb2R5LnNjcm9sbEhlaWdodCAtIEBzY3JvbGxhYmxlQm9keS5vZmZzZXRIZWlnaHQpICogc3RlcCAvIDEwMFxuXHRcdFx0cmV0dXJuXG5cblx0XHQjIGJpbmQgZXZlbnRzXG5cdFx0QHNjcm9sbGFibGVDdC5vbignbW91c2VlbnRlcicsIEBib3VuZCgnb25FbGVtZW50TW91c2VFbnRlcicpKVxuXHRcdEBzY3JvbGxhYmxlQ3Qub24oJ21vdXNlbGVhdmUnLCBAYm91bmQoJ29uRWxlbWVudE1vdXNlTGVhdmUnKSlcblx0XHRAc2Nyb2xsYWJsZUN0Lm9uKCdtb3VzZXdoZWVsJywgQGJvdW5kKCdvbkVsZW1lbnRNb3VzZVdoZWVsJykpXG5cdFx0QHNjcm9sbGFibGVCb2R5Lm9uKCdTY3JvbGxhYmxlOmNvbnRlbnRIZWlnaHRDaGFuZ2UnLCBAYm91bmQoJ29uQ29udGVudEhlaWdodENoYW5nZScpKVxuXHRcdEBrbm9iLm9uKCdtb3VzZWRvd24nLCBAYm91bmQoJ29uS25vYk1vdXNlRG93bicpKVxuXHRcdHdpbmRvdy5vbigncmVzaXplJywgQGJvdW5kKCdvbldpbmRvd1Jlc2l6ZScpKVxuXHRcdHdpbmRvdy5vbignbW91c2V3aGVlbCcsIEBib3VuZCgnb25XaW5kb3dNb3VzZVdoZWVsJykpXG5cblx0XHQjIG5lZWQgdG8gc2hvd1xuXHRcdEBzY3JvbGxiYXIuZmFkZSgnc2hvdycpXG5cdFx0QHNjcm9sbGJhci5mYWRlKCdoaWRlJykgaWYgQGF1dG9IaWRlXG5cdFx0QGFjdHVhbGl6ZSgpXG5cdFx0cmV0dXJuXG5cblxuXHRvbkVsZW1lbnRNb3VzZUVudGVyOiAtPlxuXHRcdGlmIEBzY3JvbGxhYmxlQm9keS5zY3JvbGxIZWlnaHQgPiBAc2Nyb2xsYWJsZUN0Lm9mZnNldEhlaWdodCB0aGVuIEBzaG93Q29udGFpbmVyKClcblx0XHRAYWN0dWFsaXplKClcblx0XHRyZXR1cm5cblxuXG5cdG9uRWxlbWVudE1vdXNlTGVhdmU6IChlKSAtPlxuXHRcdGlmICFAYWN0aXZlIHRoZW4gQGhpZGVDb250YWluZXIoKVxuXHRcdHJldHVyblxuXG5cblx0b25FbGVtZW50TW91c2VXaGVlbDogKGUpIC0+XG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpXG5cdFx0ZWwgPSBAc2Nyb2xsYWJsZUJvZHlcblx0XHQjIFN0b3BzIHRoZSBlbnRpcmUgcGFnZSBmcm9tIHNjcm9sbGluZyB3aGVuIG1vdXNlIGlzIGxvY2F0ZWQgb3ZlciB0aGUgZWxlbWVudFxuXHRcdGlmIGUud2hlZWwgPCAwIGFuZCBlbC5zY3JvbGxUb3AgPCBlbC5zY3JvbGxIZWlnaHQgLSBlbC5vZmZzZXRIZWlnaHQgb3IgZS53aGVlbCA+IDAgYW5kIGVsLnNjcm9sbFRvcCA+IDBcblx0XHRcdGVsLnNjcm9sbFRvcCA9IGVsLnNjcm9sbFRvcCAtIEBub3JtYWxpemVXaGVlbFNwZWVkKGUpXG5cdFx0XHRAYWN0dWFsaXplKClcblx0XHRyZXR1cm5cblxuXG5cdG5vcm1hbGl6ZVdoZWVsU3BlZWQ6IChlKSAtPlxuXHRcdGUgPSBlLmV2ZW50XG5cdFx0aWYgZS53aGVlbERlbHRhXG5cdFx0XHRub3JtYWxpemVkID0gaWYgZS53aGVlbERlbHRhICUgMTIwIC0gMCA9PSAtMCB0aGVuIGUud2hlZWxEZWx0YSAvIDEyMCBlbHNlIGUud2hlZWxEZWx0YSAvIDEyXG5cdFx0XHRub3JtYWxpemVkICo9IDVcblx0XHRlbHNlXG5cdFx0XHRyYXdBbW91bnQgPSBpZiBlLmRlbHRhWSB0aGVuIGUuZGVsdGFZIGVsc2UgZS5kZXRhaWxcblx0XHRcdG5vcm1hbGl6ZWQgPSAtKGlmIHJhd0Ftb3VudCAlIDMgdGhlbiByYXdBbW91bnQgKiAxMCBlbHNlIHJhd0Ftb3VudCAvIDMpXG5cdFx0XHRub3JtYWxpemVkICo9IDMwXG5cdFx0cmV0dXJuIG5vcm1hbGl6ZWRcblxuXG5cdG9uQ29udGVudEhlaWdodENoYW5nZTogLT5cblx0XHQjIHRoaXMgc2Nyb2xsYWJsZTpjb250ZW50SGVpZ2h0Q2hhbmdlIGNvdWxkIGJlIGZpcmVkIG9uIHRoZSBjdXJyZW50IGVsZW1lbnQgaW4gb3JkZXJcblx0XHQjIHRvIGdldCBhIGN1c3RvbSBhY3Rpb24gaW52b2tlZCAoaW1wbGVtZW50ZWQgaW4gb25Db250ZW50SGVpZ2h0Q2hhbmdlIG9wdGlvbilcblx0XHRAY29udGFpbmVyLmVtaXQoJ2hlaWdodGNoYW5nZScsIEBjb250YWluZXIpXG5cdFx0cmV0dXJuXG5cblxuXHRvbktub2JNb3VzZURvd246IC0+XG5cdFx0QGFjdGl2ZSA9IHRydWVcblx0XHR3aW5kb3cub24oJ21vdXNldXAnLCBAYm91bmQoJ29uV2luZG93TW91c2VVcCcpKVxuXHRcdHJldHVyblxuXG5cblx0b25XaW5kb3dNb3VzZVVwOiAoZSkgLT5cblx0XHRAYWN0aXZlID0gZmFsc2Vcblx0XHR3aW5kb3cudW4oJ21vdXNldXAnLCBAYm91bmQoJ29uV2luZG93TW91c2VVcCcpKVxuXHRcdHJldHVyblxuXG5cblx0b25XaW5kb3dSZXNpemU6IC0+XG5cdFx0QGFjdHVhbGl6ZS5kZWxheSg1MCwgdGhpcylcblx0XHRyZXR1cm5cblxuXG5cdG9uV2luZG93TW91c2VXaGVlbDogLT5cblx0XHRpZiBAc2Nyb2xsYWJsZUJvZHkuaXNWaXNpYmxlKCkgdGhlbiBAYWN0dWFsaXplKClcblx0XHRyZXR1cm5cblxuXG5cdGFjdHVhbGl6ZTogLT5cblx0XHRlbCA9IEBzY3JvbGxhYmxlQm9keVxuXG5cdFx0IyBSZXBvc2l0aW9ucyB0aGUgc2Nyb2xsYmFyIGJ5IHJlcmVhZGluZyB0aGUgY29udGFpbmVyIGVsZW1lbnQncyBkaW1lbnNpb25zL3Bvc2l0aW9uXG5cdFx0c2V0VGltZW91dCAoKT0+XG5cdFx0XHRAc2l6ZSA9IGVsLmdldFNpemUoKVxuXHRcdFx0QHBvc2l0aW9uID0gZWwuZ2V0UG9zaXRpb24oKVxuXHRcdFx0QHNsaWRlci51cGRhdGVTaXplKClcblx0XHRcdHJldHVyblxuXHRcdCwgNTBcblxuXHRcdGlmIEBwcm9wb3J0aW9uYWxcblx0XHRcdGlmIGlzTmFOKEBwcm9wb3J0aW9uYWxNaW5IZWlnaHQpIG9yIEBwcm9wb3J0aW9uYWxNaW5IZWlnaHQgPD0gMFxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ01pd28ucGFuZWwuU2Nyb2xscGFuZTo6cmVwb3NpdGlvbigpOiBvcHRpb24gXCJwcm9wb3J0aW9uYWxNaW5IZWlnaHRcIiBpcyBub3QgYSBwb3NpdGl2ZSBudW1iZXIuJylcblx0XHRcdGVsc2Vcblx0XHRcdFx0bWluSGVpZ2h0ID0gTWF0aC5hYnMoQHByb3BvcnRpb25hbE1pbkhlaWdodClcblx0XHRcdFx0a25vYkhlaWdodCA9IGlmIGVsLnNjcm9sbEhlaWdodCAhPSAwIHRoZW4gZWwub2Zmc2V0SGVpZ2h0ICogKGVsLm9mZnNldEhlaWdodCAvIGVsLnNjcm9sbEhlaWdodCkgZWxzZSAwXG5cdFx0XHRcdEBrbm9iLnNldFN0eWxlKCdoZWlnaHQnLCBNYXRoLm1heChrbm9iSGVpZ2h0LCBtaW5IZWlnaHQpKVxuXG5cdFx0ZGlmZiA9IGVsLnNjcm9sbEhlaWdodCAtIGVsLm9mZnNldEhlaWdodFxuXHRcdHBvcyA9IGlmIGRpZmYgdGhlbiBNYXRoLnJvdW5kKGVsLnNjcm9sbFRvcCAvIGRpZmYgKiAxMDApIGVsc2UgMFxuXHRcdEBzbGlkZXIuc2V0U3RlcChwb3MpXG5cdFx0cmV0dXJuXG5cblxuXHRzaG93Q29udGFpbmVyOiAoZm9yY2UpIC0+XG5cdFx0aWYgQGF1dG9IaWRlIGFuZCBAZmFkZSBhbmQgIUBhY3RpdmUgb3IgZm9yY2UgYW5kIEBmYWRlXG5cdFx0XHRAc2Nyb2xsYmFyLmZhZGUoMC42KVxuXHRcdGVsc2UgaWYgQGF1dG9IaWRlIGFuZCAhQGZhZGUgYW5kICFAYWN0aXZlIG9yIGZvcmNlIGFuZCAhQGZhZGVcblx0XHRcdEBzY3JvbGxiYXIuZmFkZSgnc2hvdycpXG5cdFx0cmV0dXJuXG5cblxuXHRoaWRlQ29udGFpbmVyOiAoZm9yY2UpIC0+XG5cdFx0aWYgQGF1dG9IaWRlIGFuZCBAZmFkZSBhbmQgIUBhY3RpdmUgb3IgZm9yY2UgYW5kIEBmYWRlXG5cdFx0XHRAc2Nyb2xsYmFyLmZhZGUoJ291dCcpXG5cdFx0ZWxzZSBpZiBAYXV0b0hpZGUgYW5kICFAZmFkZSBhbmQgIUBhY3RpdmUgb3IgZm9yY2UgYW5kICFAZmFkZVxuXHRcdFx0QHNjcm9sbGJhci5mYWRlKCdoaWRlJylcblx0XHRyZXR1cm5cblxuXG5cdGRvRGVzdHJveTogLT5cblx0XHR3aW5kb3cudW4oJ3Jlc2l6ZScsIEBib3VuZCgnb25XaW5kb3dSZXNpemUnKSlcblx0XHR3aW5kb3cudW4oJ21vdXNld2hlZWwnLCBAYm91bmQoJ29uV2luZG93TW91c2VXaGVlbCcpKVxuXHRcdEBzY3JvbGxiYXIuZGVzdHJveSgpXG5cdFx0c3VwZXJcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFNjcm9sbGFibGUiLCJtb2R1bGUuZXhwb3J0cyA9XG5cdFBhbmU6IHJlcXVpcmUgJy4vUGFuZSdcblx0U2Nyb2xsYWJsZTogcmVxdWlyZSAnLi9TY3JvbGxhYmxlJ1xuIiwiY2xhc3MgQmFzZURhdGVQaWNrZXIgZXh0ZW5kcyBNaXdvLkNvbXBvbmVudFxuXG5cblx0c3RhcnREYXRlOiBudWxsXG5cdGVuZERhdGU6IG51bGxcblx0c2VsZWN0ZWREYXRlOiBudWxsXG5cdGFjdGl2ZURhdGU6IG51bGxcblx0Zm9jdXNlZERhdGU6IG51bGxcblx0Y29tcG9uZW50Q2xzOiAnZGF0ZXBpY2tlcidcblx0bW92ZUluZGV4OiBudWxsXG5cdGl0ZW1zOiBudWxsXG5cblxuXHRkb0luaXQ6IC0+XG5cdFx0c3VwZXJcblx0XHRAc2V0QWN0aXZlRGF0ZShAYWN0aXZlRGF0ZSB8fCBuZXcgRGF0ZSgpKVxuXHRcdEBzZXRTdGFydERhdGUoQHN0YXJ0RGF0ZSkgaWYgQHN0YXJ0RGF0ZVxuXHRcdEBzZXRFbmREYXRlKEBlbmREYXRlKSBpZiBAZW5kRGF0ZVxuXHRcdHJldHVyblxuXG5cblx0c2V0U3RhcnREYXRlOiAoc3RhcnREYXRlKSAtPlxuXHRcdEBzdGFydERhdGUgPSBpZiBzdGFydERhdGUgdGhlbiBuZXcgRGF0ZShzdGFydERhdGUuZ2V0RnVsbFllYXIoKSwgc3RhcnREYXRlLmdldE1vbnRoKCksIDEpIGVsc2UgbnVsbFxuXHRcdHJldHVyblxuXG5cblx0c2V0RW5kRGF0ZTogKGVuZERhdGUpIC0+XG5cdFx0QGVuZERhdGUgPSBpZiBlbmREYXRlIHRoZW4gbmV3IERhdGUoZW5kRGF0ZS5nZXRGdWxsWWVhcigpLCBlbmREYXRlLmdldE1vbnRoKCkrMSwgMCkgZWxzZSBudWxsXG5cdFx0cmV0dXJuXG5cblxuXHRzZXRBY3RpdmVEYXRlOiAoYWN0aXZlRGF0ZSkgLT5cblx0XHRAYWN0aXZlRGF0ZSA9IG5ldyBEYXRlKGFjdGl2ZURhdGUuZ2V0VGltZSgpKVxuXHRcdEBhY3RpdmVEYXRlLnNldERhdGUoMSlcblx0XHRyZXR1cm5cblxuXG5cdHNldERhdGU6IChkYXRlLCBzaWxlbnQpIC0+XG5cdFx0aWYgZGF0ZVxuXHRcdFx0QHNlbGVjdChkYXRlLCBzaWxlbnQpXG5cdFx0XHRAYWN0aXZhdGUoZGF0ZSlcblx0XHRlbHNlXG5cdFx0XHRAc2VsZWN0KG51bGwsIHNpbGVudClcblx0XHRcdEBhY3RpdmF0ZShuZXcgRGF0ZSgpKVxuXHRcdHJldHVyblxuXG5cblx0Z2V0RGF0ZTogLT5cblx0XHRyZXR1cm4gQHNlbGVjdGVkRGF0ZVxuXG5cblx0c2V0Rm9jdXM6IC0+XG5cdFx0QHBhbmVsLnNldEZvY3VzKCkgaWYgQHBhbmVsXG5cdFx0cmV0dXJuXG5cblxuXHRzZWxlY3Q6IChkYXRlLCBzaWxlbnQpIC0+XG5cdFx0aWYgZGF0ZVxuXHRcdFx0QHNlbGVjdGVkRGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpKVxuXHRcdFx0QGZvY3VzZWREYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkpXG5cdFx0XHRAdXBkYXRlQ2FsZW5kYXIoKVxuXHRcdGVsc2Vcblx0XHRcdEBzZWxlY3RlZERhdGUgPSBudWxsXG5cdFx0XHRAZm9jdXNlZERhdGUgPSBudWxsXG5cdFx0XHRAdXBkYXRlQ2FsZW5kYXIoKVxuXHRcdEBlbWl0KCdzZWxlY3RlZCcsIHRoaXMsIEBzZWxlY3RlZERhdGUpIGlmICFzaWxlbnRcblx0XHRAb25TZWxlY3RlZChAc2VsZWN0ZWREYXRlLCBzaWxlbnQpXG5cdFx0cmV0dXJuXG5cblxuXHRvblNlbGVjdGVkOiAoZGF0ZSwgc2lsZW50KSAtPlxuXHRcdHJldHVyblxuXG5cblx0YWN0aXZhdGU6ICh5ZWFyLCBtb250aCkgLT5cblx0XHRpZiBUeXBlLmlzRGF0ZSh5ZWFyKVxuXHRcdFx0bW9udGggPSB5ZWFyLmdldE1vbnRoKClcblx0XHRcdHllYXIgPSB5ZWFyLmdldEZ1bGxZZWFyKClcblx0XHRAYWN0aXZlRGF0ZS5zZXRNb250aChtb250aCkgaWYgbW9udGggaXNudCB1bmRlZmluZWQgJiYgbW9udGggaXNudCBudWxsXG5cdFx0QGFjdGl2ZURhdGUuc2V0RnVsbFllYXIoeWVhcikgaWYgeWVhciBpc250IHVuZGVmaW5lZCAmJiB5ZWFyIGlzbnQgbnVsbFxuXHRcdEByZW5kZXJDYWxlbmRhcigpXG5cdFx0cmV0dXJuXG5cblxuXHRpc0RheUVuYWJsZWQ6IChkYXRlKSAtPlxuXHRcdGlmIEBzdGFydERhdGUgJiYgQGVuZERhdGVcblx0XHRcdHJldHVybiBkYXRlID49IEBzdGFydERhdGUgJiYgZGF0ZSA8PSBAZW5kRGF0ZVxuXHRcdGVsc2UgaWYgQHN0YXJ0RGF0ZVxuXHRcdFx0cmV0dXJuIGRhdGUgPj0gQHN0YXJ0RGF0ZVxuXHRcdGVsc2UgaWYgZGF0ZSA8PSBAZW5kRGF0ZVxuXHRcdFx0cmV0dXJuIHRydWVcblx0XHRlbHNlXG5cdFx0XHRyZXR1cm4gdHJ1ZVxuXG5cblx0Zm9ybWF0WWVhcjogKGRhdGUpIC0+XG5cdFx0cmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKVxuXG5cblx0Zm9ybWF0TW9udGg6IChkYXRlKSAtPlxuXHRcdHJldHVybiBpZiBkYXRlLmZvcm1hdCB0aGVuIGRhdGUuZm9ybWF0KCdCJykgZWxzZSBkYXRlLnRvU3RyaW5nKCkuc3BsaXQoJyAnKVsxXVxuXG5cblx0ZG9SZW5kZXI6IC0+XG5cdFx0QHJlbmRlclBhbmVsKClcblx0XHRyZXR1cm5cblxuXG5cdHJlbmRlclBhbmVsOiAtPlxuXHRcdEBwYW5lbCA9IG5ldyBFbGVtZW50ICd0YWJsZScsXG5cdFx0XHRjbHM6ICd0YWJsZS1jb25kZW5zZWQgZGF0ZXBpY2tlci1wYW5lbCdcblx0XHRcdHRhYmluZGV4OiAtMVxuXHRcdFx0cGFyZW50OiBAZWxcblx0XHRcdGh0bWw6ICc8dGhlYWQ+PC90aGVhZD48dGJvZHk+PC90Ym9keT4nXG5cdFx0QHJlbmRlckhlYWRlcigpXG5cdFx0QHJlbmRlckNhbGVuZGFyKClcblx0XHRyZXR1cm5cblxuXG5cdHJlbmRlckhlYWRlcjogLT5cblx0XHR0ciA9IG5ldyBFbGVtZW50ICd0cicsXG5cdFx0XHRodG1sOiAnPHRyPicrXG5cdFx0XHRcdCc8dGggY2xhc3M9XCJwcmV2XCI+wqs8L3RoPicrXG5cdFx0XHRcdCc8dGggY2xhc3M9XCJzd2l0Y2hcIiBjb2xzcGFuPVwiMlwiPjwvdGg+Jytcblx0XHRcdFx0Jzx0aCBjbGFzcz1cIm5leHRcIj7CuzwvdGg+Jytcblx0XHRcdCc8L3RyPidcblx0XHR0ci5pbmplY3QoQGdldEVsZW1lbnQoJ3RoZWFkJykpXG5cdFx0cmV0dXJuXG5cblxuXHRyZW5kZXJDYWxlbmRhcjogLT5cblx0XHRyZXR1cm5cblxuXG5cdHVwZGF0ZUNhbGVuZGFyOiAtPlxuXHRcdHJldHVyblxuXG5cblx0YWZ0ZXJSZW5kZXI6IC0+XG5cdFx0c3VwZXJcblx0XHRAcGFuZWwuZ2V0RWxlbWVudCgnLnByZXYnKS5vbiAnY2xpY2snLCA9PlxuXHRcdFx0QGFjdGl2YXRlUHJldigpXG5cdFx0XHRyZXR1cm5cblxuXHRcdEBwYW5lbC5nZXRFbGVtZW50KCcubmV4dCcpLm9uICdjbGljaycsID0+XG5cdFx0XHRAYWN0aXZhdGVOZXh0KClcblx0XHRcdHJldHVyblxuXG5cdFx0QHBhbmVsLmdldEVsZW1lbnQoJy5zd2l0Y2gnKS5vbiAnY2xpY2snLCA9PlxuXHRcdFx0QGVtaXQoJ3N3aXRjaCcsIHRoaXMpXG5cdFx0XHRyZXR1cm5cblxuXHRcdEBwYW5lbC5vbiAnY2xpY2s6cmVsYXkodGJvZHkgdGQpJywgKGV2ZW50LCB0YXJnZXQpID0+XG5cdFx0XHRpZiAhdGFyZ2V0Lmhhc0NsYXNzKCdkaXNhYmxlZCcpXG5cdFx0XHRcdGl0ZW0gPSBAaXRlbXNbdGFyZ2V0LmdldCgnZGF0YS1pbmRleCcpXVxuXHRcdFx0XHRAc2VsZWN0KGl0ZW0uZGF0ZSlcblx0XHRcdFx0QGFjdGl2YXRlKGl0ZW0uZGF0ZSkgaWYgaXRlbS5mb3JlaWduXG5cdFx0XHRyZXR1cm5cblxuXHRcdEBwYW5lbC5vbiAnbW91c2VlbnRlcjpyZWxheSh0Ym9keSB0ZCknLCAoZXZlbnQsIHRhcmdldCkgPT5cblx0XHRcdGl0ZW0gPSBAaXRlbXNbdGFyZ2V0LmdldCgnZGF0YS1pbmRleCcpXVxuXHRcdFx0aWYgQGlzRGF5RW5hYmxlZChpdGVtLmRhdGUpXG5cdFx0XHRcdEBmb2N1c2VkSW5kZXggPSBpdGVtLmluZGV4XG5cdFx0XHRcdEBmb2N1c2VkRGF0ZSA9IG5ldyBEYXRlKGl0ZW0uZGF0ZSlcblx0XHRcdFx0QHVwZGF0ZUNhbGVuZGFyKClcblx0XHRcdHJldHVyblxuXG5cdFx0QGtleUxpc3RlbmVyID0gbmV3IE1pd28udXRpbHMuS2V5TGlzdGVuZXIoQHBhbmVsLCAna2V5ZG93bicpXG5cdFx0QGtleUxpc3RlbmVyLnBhdXNlKClcblx0XHRAa2V5TGlzdGVuZXIub24gJ3VwJywgPT5cblx0XHRcdEB0cnlNb3ZlRm9jdXMoQG1vdmVJbmRleC51cClcblx0XHRcdHJldHVybiB0cnVlXG5cblx0XHRAa2V5TGlzdGVuZXIub24gJ2Rvd24nLCA9PlxuXHRcdFx0QHRyeU1vdmVGb2N1cyhAbW92ZUluZGV4LmRvd24pXG5cdFx0XHRyZXR1cm4gdHJ1ZVxuXG5cdFx0QGtleUxpc3RlbmVyLm9uICdsZWZ0JywgPT5cblx0XHRcdEB0cnlNb3ZlRm9jdXMoQG1vdmVJbmRleC5sZWZ0KVxuXHRcdFx0cmV0dXJuIHRydWVcblxuXHRcdEBrZXlMaXN0ZW5lci5vbiAncmlnaHQnLCA9PlxuXHRcdFx0QHRyeU1vdmVGb2N1cyhAbW92ZUluZGV4LnJpZ2h0KVxuXHRcdFx0cmV0dXJuIHRydWVcblxuXHRcdEBrZXlMaXN0ZW5lci5vbiAnZW50ZXInLCA9PlxuXHRcdFx0aXRlbSA9IEBpdGVtc1tAZm9jdXNlZEluZGV4XVxuXHRcdFx0QHNlbGVjdChpdGVtLmRhdGUpXG5cdFx0XHRAYWN0aXZhdGUoaXRlbS5kYXRlKSBpZiAhaXRlbS5mb3JlaWduXG5cdFx0XHRyZXR1cm4gdHJ1ZVxuXG5cdFx0aWYgIUBmb2N1c2VkRGF0ZVxuXHRcdFx0aWYgQHNlbGVjdGVkRGF0ZVxuXHRcdFx0XHRAZm9jdXNlZERhdGUgPSBuZXcgRGF0ZShAc2VsZWN0ZWREYXRlLmdldFRpbWUoKSlcblx0XHRcdGVsc2Vcblx0XHRcdFx0QGZvY3VzZWREYXRlID0gbmV3IERhdGUoQGFjdGl2ZURhdGUuZ2V0VGltZSgpKVxuXG5cdFx0aWYgQHNlbGVjdGVkRGF0ZVxuXHRcdFx0QGFjdGl2YXRlKEBzZWxlY3RlZERhdGUpXG5cdFx0cmV0dXJuXG5cblxuXHRkb1Nob3c6IC0+XG5cdFx0c3VwZXJcblx0XHRAa2V5TGlzdGVuZXIucmVzdW1lKCkgaWYgQGtleUxpc3RlbmVyXG5cdFx0cmV0dXJuXG5cblxuXHRkb0hpZGU6IC0+XG5cdFx0c3VwZXJcblx0XHRAa2V5TGlzdGVuZXIucGF1c2UoKSBpZiBAa2V5TGlzdGVuZXJcblx0XHRyZXR1cm5cblxuXG5cdGRvRGVzdHJveTogLT5cblx0XHRAa2V5TGlzdGVuZXIuZGVzdHJveSgpIGlmIEBrZXlMaXN0ZW5lclxuXHRcdHN1cGVyXG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IEJhc2VEYXRlUGlja2VyIiwiQ29sb3IgPSByZXF1aXJlICcuLi91dGlscy9Db2xvcidcblxuXG5jbGFzcyBDb2xvclBpY2tlciBleHRlbmRzIE1pd28uQ29tcG9uZW50XG5cblx0eHR5cGU6IFwiY29sb3JwaWNrZXJcIlxuXHRjb2xvcjogXCJGRkZGRkZcIlxuXHRtYXBDb2xvcjogbnVsbFxuXHRjb2xvclJlOiAvXlswLTlBLUZdezZ9JC9cblx0YmFzZUNsczogJ2NvbG9ycGlja2VyJ1xuXG5cblx0YmVmb3JlSW5pdDogLT5cblx0XHRzdXBlcigpXG5cdFx0dGhpcy50ZW1wbGF0ZSA9XG5cdFx0JzxkaXYgbWl3by1yZWZlcmVuY2U9XCJtYXBcIiBjbGFzcz1cIntiYXNlQ2xzIG1hcH1cIj4nK1xuXHRcdFx0JzxkaXYgY2xhc3M9XCJ7YmFzZUNscyBwYW5lbH1cIj48L2Rpdj4nK1xuXHRcdFx0JzxkaXYgbWl3by1yZWZlcmVuY2U9XCJwb2ludFwiIGNsYXNzPVwie2Jhc2VDbHMgcG9pbnR9XCI+PC9kaXY+Jytcblx0XHQnPC9kaXY+Jytcblx0XHQnPGRpdiBjbGFzcz1cIntiYXNlQ2xzIGJhcn1cIj4nK1xuXHRcdFx0JzxkaXYgbWl3by1yZWZlcmVuY2U9XCJiYXJcIiBjbGFzcz1cImJhclwiPjwvZGl2PicrXG5cdFx0JzwvZGl2PicrXG5cdFx0JzxkaXYgY2xhc3M9XCJ7YmFzZUNscyB1dGlsc31cIj4nK1xuXHRcdFx0JzxkaXYgbWl3by1yZWZlcmVuY2U9XCJwcmV2aWV3XCIgY2xhc3M9XCJ7YmFzZUNscyBwcmV2aWV3fVwiPjwvZGl2PicrXG5cdFx0XHQnPGlucHV0IG1pd28tcmVmZXJlbmNlPVwiaGV4aW5wdXRcIiB0eXBlPVwidGV4dFwiIGNsYXNzPVwie2Jhc2VDbHMgaGV4fSBmb3JtLWNvbnRyb2xcIiBtYXhsZW5ndGg9XCI3XCIgdmFsdWU9XCJGRkZGRkZcIi8+Jytcblx0XHRcdCc8YnV0dG9uIG1pd28tZXZlbnRzPVwiY2xpY2s6b25CdG5DbGlja1wiIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0XCI+U2VsZWN0PC9idXR0b24+Jytcblx0XHQnPC9kaXY+J1xuXHRcdHJldHVyblxuXG5cblx0YWZ0ZXJJbml0OiAtPlxuXHRcdHN1cGVyKClcblx0XHRAY29sb3IgPSBDb2xvci5mcm9tSGV4KEBjb2xvcilcblx0XHRAbWFwQ29sb3IgPSBDb2xvci5mcm9tSHN2KEBjb2xvci5odWUsIDEwMCwgMTAwKVxuXHRcdHJldHVyblxuXG5cblx0YWZ0ZXJSZW5kZXI6IC0+XG5cdFx0c3VwZXIoKVxuXHRcdEBoZXhpbnB1dC5vbiBcImtleXVwXCIsID0+XG5cdFx0XHRAc2V0Q29sb3IoQGhleGlucHV0LmdldChcInZhbHVlXCIpKVxuXHRcdFx0cmV0dXJuXG5cblx0XHRAbWFwLm9uIFwibW91c2Vkb3duXCIsIChldmVudCkgPT5cblx0XHRcdGV2ZW50LnN0b3AoKVxuXHRcdFx0ZG9jdW1lbnQub24gXCJtb3VzZW1vdmVcIiwgQGJvdW5kKFwib25NYXBNb3VzZU1vdmVcIilcblx0XHRcdGRvY3VtZW50Lm9uIFwibW91c2V1cFwiLCBAYm91bmQoXCJvbk1hcE1vdXNlVXBcIilcblx0XHRcdHJldHVyblxuXG5cdFx0QG1hcC5vbiBcImNsaWNrXCIsIChldmVudCkgPT5cblx0XHRcdGV2ZW50LnN0b3AoKVxuXHRcdFx0QHVwZGF0ZU1hcE9uTW91c2VFdmVudChldmVudClcblx0XHRcdHJldHVyblxuXG5cdFx0QGJhci5vbiBcIm1vdXNlZG93blwiLCAoZXZlbnQpPT5cblx0XHRcdGV2ZW50LnN0b3AoKVxuXHRcdFx0ZG9jdW1lbnQub24gXCJtb3VzZW1vdmVcIiwgQGJvdW5kKFwib25CYXJNb3VzZU1vdmVcIilcblx0XHRcdGRvY3VtZW50Lm9uIFwibW91c2V1cFwiLCBAYm91bmQoXCJvbkJhck1vdXNlVXBcIilcblx0XHRcdHJldHVyblxuXG5cdFx0QGJhci5vbiBcImNsaWNrXCIsIChldmVudCkgPT5cblx0XHRcdGV2ZW50LnN0b3AoKVxuXHRcdFx0QHVwZGF0ZUJhck9uTW91c2VFdmVudChldmVudClcblx0XHRcdHJldHVyblxuXG5cdFx0QHNldENvbG9yKEBjb2xvci5oZXgsIHRydWUsIHRydWUpXG5cdFx0cmV0dXJuXG5cblxuXHRzZXRDb2xvcjogKGNvbG9yLCB1cGRhdGUsIHNpbGVudCkgLT5cblx0XHRjb2xvciA9IGNvbG9yLnRvVXBwZXJDYXNlKClcblx0XHRjb2xvciA9IGNvbG9yLnJlcGxhY2UoXCIjXCIsIFwiXCIpXG5cdFx0aWYgQGlzQ29sb3JWYWxpZChjb2xvcikgYW5kIChAY29sb3IuaGV4IGlzbnQgY29sb3Igb3IgdXBkYXRlKVxuXHRcdFx0QGNvbG9yLnNldEhleChjb2xvcilcblx0XHRcdEBtYXBDb2xvciA9IENvbG9yLmZyb21Ic3YoQGNvbG9yLmh1ZSwgMTAwLCAxMDApXG5cdFx0XHRAZG9TZXRIdWUoQGNvbG9yLmgpXG5cdFx0XHRAZG9TZXRTYXR1cmF0aW9uQW5kVmFsdWUoQGNvbG9yLnMsIEBjb2xvci52KVxuXHRcdFx0QGNvbG9yLnNldEhleChjb2xvcilcblx0XHRcdEBvbkNvbG9yQ2hhbmdlZChzaWxlbnQpXG5cdFx0cmV0dXJuXG5cblxuXHRnZXRDb2xvcjogLT5cblx0XHRyZXR1cm4gQGNvbG9yLmhleFxuXG5cblx0aXNDb2xvclZhbGlkOiAoaGV4KSAtPlxuXHRcdHJldHVybiBAY29sb3JSZS50ZXN0KGhleClcblxuXG5cdG9uQmFyTW91c2VVcDogKGV2ZW50KSAtPlxuXHRcdGV2ZW50LnN0b3AoKVxuXHRcdGRvY3VtZW50LnVuIFwibW91c2Vtb3ZlXCIsIEBib3VuZChcIm9uQmFyTW91c2VNb3ZlXCIpXG5cdFx0ZG9jdW1lbnQudW4gXCJtb3VzZXVwXCIsIEBib3VuZChcIm9uQmFyTW91c2VVcFwiKVxuXHRcdHJldHVyblxuXG5cblx0b25CYXJNb3VzZU1vdmU6IChldmVudCkgLT5cblx0XHRldmVudC5zdG9wKClcblx0XHRAdXBkYXRlQmFyT25Nb3VzZUV2ZW50KGV2ZW50KVxuXHRcdHJldHVyblxuXG5cblx0dXBkYXRlQmFyT25Nb3VzZUV2ZW50OiAoZSkgLT5cblx0XHRwb3MgPSBAYmFyLmdldFBvc2l0aW9uKClcblx0XHR5VmFsdWUgPSBNYXRoLm1pbihNYXRoLm1heCgwLCBlLnBhZ2UueSAtIHBvcy55KSwgMjU2KVxuXHRcdEBzZXRIdWUoMzYwIC0gTWF0aC5yb3VuZCgoMzYwIC8gMjU2KSAqIHlWYWx1ZSkpXG5cdFx0cmV0dXJuXG5cblxuXHRzZXRIdWU6IChodWUpIC0+XG5cdFx0aWYgQGNvbG9yLmh1ZSBpc250IGh1ZVxuXHRcdFx0QGRvU2V0SHVlIGh1ZVxuXHRcdFx0QG9uQ29sb3JDaGFuZ2VkKClcblx0XHRyZXR1cm5cblxuXG5cdGRvU2V0SHVlOiAoaHVlKSAtPlxuXHRcdEBjb2xvci5zZXRIc3YoaHVlLCBudWxsLCBudWxsKVxuXHRcdEBtYXBDb2xvci5zZXRIc3YoaHVlLCAxMDAsIDEwMCkgIyBzaW11bGF0ZSBmdWxsIHNhdCBhbmQgdmFsdWVcblx0XHRAbWFwLnNldFN0eWxlIFwiYmFja2dyb3VuZC1jb2xvclwiLCBcIiNcIiArIEBtYXBDb2xvci5oZXhcblx0XHRyZXR1cm5cblxuXG5cdG9uTWFwTW91c2VVcDogKGV2ZW50KSAtPlxuXHRcdGV2ZW50LnN0b3AoKVxuXHRcdGRvY3VtZW50LnVuIFwibW91c2Vtb3ZlXCIsIEBib3VuZChcIm9uTWFwTW91c2VNb3ZlXCIpXG5cdFx0ZG9jdW1lbnQudW4gXCJtb3VzZXVwXCIsIEBib3VuZChcIm9uTWFwTW91c2VVcFwiKVxuXHRcdHJldHVyblxuXG5cblx0b25NYXBNb3VzZU1vdmU6IChldmVudCkgLT5cblx0XHRldmVudC5zdG9wKClcblx0XHRAdXBkYXRlTWFwT25Nb3VzZUV2ZW50KGV2ZW50KVxuXHRcdHJldHVyblxuXG5cblx0dXBkYXRlTWFwT25Nb3VzZUV2ZW50OiAoZXZlbnQpIC0+XG5cdFx0cG9zID0gQG1hcC5nZXRQb3NpdGlvbigpXG5cdFx0eFZhbHVlID0gTWF0aC5taW4oTWF0aC5tYXgoMCwgZXZlbnQucGFnZS54IC0gcG9zLngpLCAyNTYpXG5cdFx0eVZhbHVlID0gTWF0aC5taW4oTWF0aC5tYXgoMCwgZXZlbnQucGFnZS55IC0gcG9zLnkpLCAyNTYpXG5cdFx0cyA9IE1hdGgucm91bmQoKDEwMCAvIDI1NikgKiB4VmFsdWUpXG5cdFx0diA9IDEwMCAtIE1hdGgucm91bmQoKDEwMCAvIDI1NikgKiB5VmFsdWUpXG5cdFx0QHNldFNhdHVyYXRpb25BbmRWYWx1ZShzLCB2KVxuXHRcdHJldHVyblxuXG5cblx0c2V0U2F0dXJhdGlvbkFuZFZhbHVlOiAocywgdikgLT5cblx0XHRpZiBAY29sb3IucyBpc250IHMgb3IgQGNvbG9yLnYgaXNudCB2XG5cdFx0XHRAZG9TZXRTYXR1cmF0aW9uQW5kVmFsdWUocywgdilcblx0XHRcdEBvbkNvbG9yQ2hhbmdlZCgpXG5cdFx0cmV0dXJuXG5cblxuXHRkb1NldFNhdHVyYXRpb25BbmRWYWx1ZTogKHMsIHYpIC0+XG5cdFx0QGNvbG9yLnNldEhzdihudWxsLCBzLCB2KVxuXHRcdEBwb2ludC5zZXRQb3NpdGlvbih7XG5cdFx0XHR4OiAocyAvIDEwMCkgKiAyNTYgLSA4XG5cdFx0XHR5OiAyNTYgLSAodiAvIDEwMCkgKiAyNTYgLSA4XG5cdFx0fSlcblx0XHRyZXR1cm5cblxuXG5cdG9uQ29sb3JDaGFuZ2VkOiAoc2lsZW50KSAtPlxuXHRcdEBwcmV2aWV3LnNldFN0eWxlKFwiYmFja2dyb3VuZC1jb2xvclwiLCBcIiNcIiArIEBjb2xvci5oZXgpXG5cdFx0QGhleGlucHV0LnNldChcInZhbHVlXCIsIEBjb2xvci5oZXgpXG5cdFx0QGVtaXQoXCJjaGFuZ2VkXCIsIHRoaXMsIEBjb2xvci5oZXgpIGlmICFzaWxlbnRcblx0XHRyZXR1cm5cblxuXG5cdG9uQnRuQ2xpY2s6IC0+XG5cdFx0QGVtaXQoXCJzZWxlY3RlZFwiLCB0aGlzLCBAY29sb3IuaGV4KVxuXHRcdHJldHVyblxuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBDb2xvclBpY2tlciIsIkRheVBpY2tlciA9IHJlcXVpcmUgJy4vRGF5J1xuTW9udGhQaWNrZXIgPSByZXF1aXJlICcuL01vbnRoJ1xuWWVhclBpY2tlciA9IHJlcXVpcmUgJy4vWWVhcidcblxuXG5jbGFzcyBEYXRlUGlja2VyIGV4dGVuZHMgTWl3by5Db250YWluZXJcblxuXHRzdGFydERhdGU6IG51bGxcblx0ZW5kRGF0ZTogbnVsbFxuXHRzZWxlY3RlZERhdGU6IG51bGxcblx0cmFuZ2VTdGFydDogbnVsbFxuXHRyYW5nZUVuZDogbnVsbFxuXHRyYW5nZVNlbGVjdG9yOiAnZW5kJ1xuXHR0b2RheUJ0bjogZmFsc2Vcblx0Y2xlYXJCdG46IGZhbHNlXG5cblxuXHRkb0luaXQ6IC0+XG5cdFx0c3VwZXJcblx0XHRAY29tcG9uZW50Q2xzID0gJ2RhdGVwaWNrZXInXG5cdFx0QGFjdGl2ZURhdGUgPSBuZXcgRGF0ZSgpXG5cdFx0QGFjdGl2ZURhdGUuc2V0RGF0ZSgxKVxuXHRcdEBhZGQoJ2RheScsIEBjcmVhdGVDb21wb25lbnREYXkoKSlcblx0XHRAYWRkKCdtb250aCcsIEBjcmVhdGVDb21wb25lbnRNb250aCgpKVxuXHRcdEBhZGQoJ3llYXInLCBAY3JlYXRlQ29tcG9uZW50WWVhcigpKVxuXHRcdHJldHVyblxuXG5cblx0Y3JlYXRlQ29tcG9uZW50RGF5OiAtPlxuXHRcdHBpY2tlciA9IG5ldyBEYXlQaWNrZXJcblx0XHRcdHZpc2libGU6IGZhbHNlXG5cdFx0XHRhY3RpdmVEYXRlOiBAYWN0aXZlRGF0ZVxuXHRcdFx0c3RhcnREYXRlOiBAc3RhcnREYXRlXG5cdFx0XHRlbmREYXRlOiBAZW5kRGF0ZVxuXHRcdFx0c2VsZWN0ZWREYXRlOiBAc2VsZWN0ZWREYXRlXG5cdFx0XHRyYW5nZVN0YXJ0OiBAcmFuZ2VTdGFydFxuXHRcdFx0cmFuZ2VFbmQ6IEByYW5nZUVuZFxuXHRcdFx0cmFuZ2VTZWxlY3RvcjogQHJhbmdlU2VsZWN0b3Jcblx0XHRwaWNrZXIub24gJ3N3aXRjaCcsID0+XG5cdFx0XHRwaWNrZXIuaGlkZSgpXG5cdFx0XHRAZ2V0KCdtb250aCcpLmFjdGl2YXRlKHBpY2tlci5hY3RpdmVEYXRlKVxuXHRcdFx0QGdldCgnbW9udGgnKS5zZWxlY3QocGlja2VyLnNlbGVjdGVkRGF0ZSwgdHJ1ZSlcblx0XHRcdEBnZXQoJ21vbnRoJykuc2hvdygpXG5cdFx0XHRAZW1pdCgnc3dpdGNoJywgdGhpcywgJ21vbnRoJylcblx0XHRcdHJldHVyblxuXHRcdHBpY2tlci5vbiAnc2VsZWN0ZWQnLCAocGlja2VyLCBkYXRlKT0+XG5cdFx0XHRAZW1pdCgnc2VsZWN0ZWQnLCB0aGlzLCBkYXRlKVxuXHRcdFx0cmV0dXJuXG5cdFx0cmV0dXJuIHBpY2tlclxuXG5cblx0Y3JlYXRlQ29tcG9uZW50TW9udGg6IC0+XG5cdFx0cGlja2VyID0gbmV3IE1vbnRoUGlja2VyXG5cdFx0XHR2aXNpYmxlOiBmYWxzZVxuXHRcdFx0YWN0aXZlRGF0ZTogQGFjdGl2ZURhdGVcblx0XHRcdHN0YXJ0RGF0ZTogQHN0YXJ0RGF0ZVxuXHRcdFx0ZW5kRGF0ZTogQGVuZERhdGVcblx0XHRcdHNlbGVjdGVkRGF0ZTogQHNlbGVjdGVkRGF0ZVxuXHRcdHBpY2tlci5vbiAnc3dpdGNoJywgPT5cblx0XHRcdHBpY2tlci5oaWRlKClcblx0XHRcdEBnZXQoJ3llYXInKS5zaG93KClcblx0XHRcdEBlbWl0KCdzd2l0Y2gnLCB0aGlzLCAneWVhcicpXG5cdFx0XHRyZXR1cm5cblx0XHRwaWNrZXIub24gJ3NlbGVjdGVkJywgPT5cblx0XHRcdHBpY2tlci5oaWRlKClcblx0XHRcdEBnZXQoJ2RheScpLmFjdGl2YXRlKHBpY2tlci5zZWxlY3RlZERhdGUpXG5cdFx0XHRAZ2V0KCdkYXknKS5zaG93KClcblx0XHRcdEBlbWl0KCdzd2l0Y2gnLCB0aGlzLCAnZGF5Jylcblx0XHRcdHJldHVyblxuXHRcdHJldHVybiBwaWNrZXJcblxuXG5cdGNyZWF0ZUNvbXBvbmVudFllYXI6IC0+XG5cdFx0cGlja2VyID0gbmV3IFllYXJQaWNrZXJcblx0XHRcdHZpc2libGU6IGZhbHNlXG5cdFx0XHRhY3RpdmVEYXRlOiBAYWN0aXZlRGF0ZVxuXHRcdFx0c3RhcnREYXRlOiBAc3RhcnREYXRlXG5cdFx0XHRlbmREYXRlOiBAZW5kRGF0ZVxuXHRcdFx0c2VsZWN0ZWREYXRlOiBAc2VsZWN0ZWREYXRlXG5cdFx0cGlja2VyLm9uICdzZWxlY3RlZCcsID0+XG5cdFx0XHRwaWNrZXIuaGlkZSgpXG5cdFx0XHRAZ2V0KCdtb250aCcpLmFjdGl2YXRlKHBpY2tlci5zZWxlY3RlZERhdGUpXG5cdFx0XHRAZ2V0KCdtb250aCcpLnNob3coKVxuXHRcdFx0QGVtaXQoJ3N3aXRjaCcsIHRoaXMsICdtb250aCcpXG5cdFx0XHRyZXR1cm5cblx0XHRyZXR1cm4gcGlja2VyXG5cblxuXHRhY3RpdmF0ZTogKHllYXIsIG1vbnRoKSAtPlxuXHRcdEBnZXQoJ2RheScpLmFjdGl2YXRlKHllYXIsIG1vbnRoKVxuXHRcdHJldHVyblxuXG5cblx0c2VsZWN0OiAoZGF0ZSwgc2lsZW50KSAtPlxuXHRcdEBnZXQoJ2RheScpLnNlbGVjdChkYXRlLCBzaWxlbnQpXG5cdFx0cmV0dXJuXG5cblxuXHRzZXREYXRlOiAoZGF0ZSwgc2lsZW50KSAtPlxuXHRcdEBnZXQoJ2RheScpLnNldERhdGUoZGF0ZSwgc2lsZW50KVxuXHRcdHJldHVyblxuXG5cblx0c2V0U3RhcnREYXRlOiAoZGF0ZSkgLT5cblx0XHRAZ2V0Q29tcG9uZW50cygpLmVhY2ggKHBpY2tlciktPiBwaWNrZXIuc2V0U3RhcnREYXRlKGRhdGUpXG5cdFx0cmV0dXJuXG5cblxuXHRzZXRFbmREYXRlOiAoZGF0ZSkgLT5cblx0XHRAZ2V0Q29tcG9uZW50cygpLmVhY2ggKHBpY2tlciktPiBwaWNrZXIuc2V0RW5kRGF0ZShkYXRlKVxuXHRcdHJldHVyblxuXG5cblx0c2V0UmFuZ2U6IChyYW5nZVN0YXJ0LCByYW5nZUVuZCwgc2lsZW50KSAtPlxuXHRcdEBnZXQoJ2RheScpLnNldFJhbmdlKHJhbmdlU3RhcnQsIHJhbmdlRW5kLCBzaWxlbnQpXG5cdFx0cmV0dXJuXG5cblxuXHRzZXRUb2RheUJ0bjogKEB0b2RheUJ0bikgLT5cblx0XHRAZ2V0RWxlbWVudCgnLnRvZGF5QnRuJykuc2V0VmlzaWJsZShAdG9kYXlCdG4pIGlmIEByZW5kZXJlZFxuXHRcdHJldHVyblxuXG5cblx0c2V0Q2xlYXJCdG46IChAY2xlYXJCdG4pIC0+XG5cdFx0QGdldEVsZW1lbnQoJy5jbGVhckJ0bicpLnNldFZpc2libGUoQGNsZWFyQnRuKSBpZiBAcmVuZGVyZWRcblx0XHRyZXR1cm5cblxuXG5cdGdldERhdGU6IC0+XG5cdFx0cmV0dXJuIEBnZXQoJ2RheScpLmdldERhdGUoKVxuXG5cblx0c2V0VHlwZTogKHR5cGUgPSAnZGF0ZScpIC0+XG5cdFx0QHR5cGUgPSB0eXBlXG5cdFx0cmV0dXJuXG5cblxuXHRzZXRGb2N1czogLT5cblx0XHRAZ2V0KCdkYXknKS5zZXRGb2N1cygpXG5cdFx0cmV0dXJuXG5cblxuXHRkb1JlbmRlcjogLT5cblx0XHRzdXBlclxuXHRcdHRhYmxlID0gbmV3IEVsZW1lbnQoJ3RhYmxlJywge3BhcmVudDogQGVsLCBjbHM6ICd0YWJsZS1jb25kZW5zZWQgZGF0ZXBpY2tlci1mb290ZXInfSlcblx0XHR0Ym9keSA9IG5ldyBFbGVtZW50KCd0Ym9keScsIHtwYXJlbnQ6IHRhYmxlfSlcblx0XHR0ciA9IG5ldyBFbGVtZW50KCd0cicsIHtwYXJlbnQ6IHRib2R5fSlcblxuXHRcdHRkID0gbmV3IEVsZW1lbnQoJ3RkJywge2h0bWw6IG1pd28udHIoJ21pd28ucGlja2VyLnRvZGF5JyksIGNsczondG9kYXlCdG4nLCBwYXJlbnQ6dHJ9KVxuXHRcdHRkLnNldFZpc2libGUoQHRvZGF5QnRuKVxuXG5cdFx0dGQgPSBuZXcgRWxlbWVudCgndGQnLCB7aHRtbDogbWl3by50cignbWl3by5waWNrZXIuY2xlYXInKSwgY2xzOidjbGVhckJ0bicsIHBhcmVudDp0cn0pXG5cdFx0dGQuc2V0VmlzaWJsZShAY2xlYXJCdG4pXG5cdFx0cmV0dXJuXG5cblxuXHRhZnRlclJlbmRlcjogLT5cblx0XHRzdXBlclxuXHRcdEBnZXQoJ2RheScpLnNob3coKVxuXHRcdEBnZXRFbGVtZW50KCcudG9kYXlCdG4nKS5vbiAnY2xpY2snLCA9PiBAc2V0RGF0ZShuZXcgRGF0ZSgpKVxuXHRcdEBnZXRFbGVtZW50KCcuY2xlYXJCdG4nKS5vbiAnY2xpY2snLCA9PiBAc2V0RGF0ZShudWxsKVxuXHRcdHJldHVyblxuXG5cbm1vZHVsZS5leHBvcnRzID0gRGF0ZVBpY2tlciIsIkJhc2VEYXRlUGlja2VyID0gcmVxdWlyZSAnLi9CYXNlRGF0ZSdcblxuY2xhc3MgRGF5UGlja2VyIGV4dGVuZHMgQmFzZURhdGVQaWNrZXJcblxuXHR4dHlwZTogXCJkYXlwaWNrZXJcIlxuXHRiYXNlQ2xzOiAnZGF5cGlja2VyJ1xuXHRyYW5nZVN0YXJ0OiBudWxsXG5cdHJhbmdlRW5kOiBudWxsXG5cdHJhbmdlU2VsZWN0b3I6IG51bGxcblxuXG5cdGJlZm9yZUluaXQ6IC0+XG5cdFx0c3VwZXJcblx0XHRAbW92ZUluZGV4ID0geyd1cCc6LTcsICdkb3duJzo3LCAncmlnaHQnOjEsICdsZWZ0JzotMX1cblx0XHRyZXR1cm5cblxuXG5cdHNldFJhbmdlOiAocmFuZ2VTdGFydCwgcmFuZ2VFbmQsIHNpbGVudCkgLT5cblx0XHRAcmFuZ2VTdGFydCA9IGlmIHJhbmdlU3RhcnQgaXMgZmFsc2UgdGhlbiBudWxsIGVsc2UgcmFuZ2VTdGFydCB8fCBAcmFuZ2VTdGFydFxuXHRcdEByYW5nZUVuZCA9IGlmIHJhbmdlRW5kIGlzIGZhbHNlIHRoZW4gbnVsbCBlbHNlIHJhbmdlRW5kIHx8IEByYW5nZUVuZFxuXHRcdEBlbWl0KCdyYW5nZScsIHRoaXMsIEByYW5nZVN0YXJ0LCBAcmFuZ2VFbmQpIGlmICFzaWxlbnRcblx0XHRAb25SYW5nZUNoYW5nZWQoc2lsZW50KVxuXHRcdEB1cGRhdGVDYWxlbmRhcigpIGlmIEByZW5kZXJlZFxuXHRcdHJldHVyblxuXG5cblx0c2V0U3RhcnREYXRlOiAoc3RhcnREYXRlKSAtPlxuXHRcdEBzdGFydERhdGUgPSBuZXcgRGF0ZShzdGFydERhdGUuZ2V0VGltZSgpKVxuXHRcdHJldHVyblxuXG5cblx0c2V0RW5kRGF0ZTogKGVuZERhdGUpIC0+XG5cdFx0QGVuZERhdGUgPSBuZXcgRGF0ZShlbmREYXRlLmdldFRpbWUoKSlcblx0XHRyZXR1cm5cblxuXG5cdG9uUmFuZ2VDaGFuZ2VkOiAoc2lsZW50KSAtPlxuXHRcdHJldHVyblxuXG5cblx0YWN0aXZhdGVOZXh0OiAtPlxuXHRcdEBhY3RpdmF0ZShudWxsLCBAYWN0aXZlRGF0ZS5nZXRNb250aCgpKzEpXG5cdFx0cmV0dXJuXG5cblxuXHRhY3RpdmF0ZVByZXY6IC0+XG5cdFx0QGFjdGl2YXRlKG51bGwsIEBhY3RpdmVEYXRlLmdldE1vbnRoKCktMSlcblx0XHRyZXR1cm5cblxuXG5cdG9uU2VsZWN0ZWQ6IChzaWxlbnQpIC0+XG5cdFx0aWYgQHJhbmdlU2VsZWN0b3IgaXMgJ2VuZCdcblx0XHRcdEBzZXRSYW5nZShudWxsLCBAc2VsZWN0ZWREYXRlLCBzaWxlbnQpXG5cdFx0ZWxzZSBpZiBAcmFuZ2VTZWxlY3RvciBpcyAnc3RhcnQnXG5cdFx0XHRAc2V0UmFuZ2UoQHNlbGVjdGVkRGF0ZSwgbnVsbCwgc2lsZW50KVxuXHRcdHJldHVyblxuXG5cblx0cmVuZGVySGVhZGVyOiAtPlxuXHRcdHRyID0gbmV3IEVsZW1lbnQgJ3RyJyxcblx0XHRcdGh0bWw6ICc8dHI+Jytcblx0XHRcdFx0Jzx0aCBjbGFzcz1cInByZXZcIj7CqzwvdGg+Jytcblx0XHRcdFx0Jzx0aCBjbGFzcz1cInN3aXRjaFwiIGNvbHNwYW49XCI1XCI+PC90aD4nK1xuXHRcdFx0XHQnPHRoIGNsYXNzPVwibmV4dFwiPsK7PC90aD4nK1xuXHRcdFx0JzwvdHI+J1xuXHRcdHRyLmluamVjdChAZ2V0RWxlbWVudCgndGhlYWQnKSlcblxuXHRcdHRyID0gbmV3IEVsZW1lbnQgJ3RyJyxcblx0XHRcdGh0bWw6ICc8dHI+Jytcblx0XHRcdFx0Jzx0aCBjbGFzcz1cImRvd1wiPlN1PC90aD4nK1xuXHRcdFx0XHQnPHRoIGNsYXNzPVwiZG93XCI+TW88L3RoPicrXG5cdFx0XHRcdCc8dGggY2xhc3M9XCJkb3dcIj5UdTwvdGg+Jytcblx0XHRcdFx0Jzx0aCBjbGFzcz1cImRvd1wiPldlPC90aD4nK1xuXHRcdFx0XHQnPHRoIGNsYXNzPVwiZG93XCI+VGg8L3RoPicrXG5cdFx0XHRcdCc8dGggY2xhc3M9XCJkb3dcIj5GcjwvdGg+Jytcblx0XHRcdFx0Jzx0aCBjbGFzcz1cImRvd1wiPlNhPC90aD4nK1xuXHRcdFx0JzwvdHI+J1xuXHRcdHRyLmluamVjdChAZ2V0RWxlbWVudCgndGhlYWQnKSlcblx0XHRyZXR1cm5cblxuXG5cdHJlbmRlckNhbGVuZGFyOiAtPlxuXHRcdGRhdGUgPSBAYWN0aXZlRGF0ZVxuXHRcdGZpcnN0RGF5ID0gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIDEpXG5cdFx0bGFzdERheSA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpICsgMSwgMClcblx0XHRwcmV2TGFzdERheSA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCAwKVxuXHRcdG5leHRGaXJzdERheSA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpKzEsIDEpXG5cdFx0dG9EYXkgPSBuZXcgRGF0ZSgpLnRvRGF0ZVN0cmluZygpXG5cblx0XHRAZm9jdXNlZEluZGV4ID0gbnVsbFxuXHRcdEBpdGVtcyA9IFtdXG5cdFx0Zmlyc3QgPSBmaXJzdERheS5nZXREYXkoKS0xXG5cdFx0Zmlyc3QgPSA2ICBpZiBmaXJzdCA8PSAwXG5cdFx0Zm9yIGkgaW4gW2ZpcnN0Li4wXSBieSAtMVxuXHRcdFx0QGl0ZW1zLnB1c2goe1xuXHRcdFx0XHRmb3JlaWduOiB0cnVlXG5cdFx0XHRcdGRhdGU6IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCAtaSlcblx0XHRcdH0pXG5cblx0XHRmb3IgaSBpbiBbMS4ubGFzdERheS5nZXREYXRlKCldXG5cdFx0XHRAaXRlbXMucHVzaCh7XG5cdFx0XHRcdGZvcmVpZ246IGZhbHNlXG5cdFx0XHRcdGRhdGU6IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBpKVxuXHRcdFx0fSlcblxuXHRcdGxlbmd0aCA9IEBpdGVtcy5sZW5ndGhcblx0XHRmb3IgaSBpbiBbbGVuZ3RoLi40Ml0gIyBub3RlIGNhbGVuZGFyIGhhcyA0MiBpdGVtc1xuXHRcdFx0QGl0ZW1zLnB1c2goe1xuXHRcdFx0XHRmb3JlaWduOiB0cnVlXG5cdFx0XHRcdGRhdGU6IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpKzEsIGktbGVuZ3RoKzEpXG5cdFx0XHR9KVxuXG5cdFx0Ym9keSA9IEBwYW5lbC5nZXRFbGVtZW50KCd0Ym9keScpXG5cdFx0Ym9keS5lbXB0eSgpXG5cdFx0Zm9yIGkgaW4gWzAuLjVdXG5cdFx0XHR0ciA9IG5ldyBFbGVtZW50KCd0cicsIHtwYXJlbnQ6Ym9keX0pXG5cdFx0XHRmb3IgaiBpbiBbMC4uNl1cblx0XHRcdFx0aW5kZXggPSBpKjcralxuXHRcdFx0XHRpdGVtID0gQGl0ZW1zW2luZGV4XVxuXHRcdFx0XHR0ZCA9IG5ldyBFbGVtZW50KCd0ZCcsIHtwYXJlbnQ6dHIsIGh0bWw6IGl0ZW0uZGF0ZS5nZXREYXRlKCksICdkYXRhLWluZGV4JzogaW5kZXh9KVxuXHRcdFx0XHRpZiBAaXNGb2N1c2VkKGl0ZW0uZGF0ZSlcblx0XHRcdFx0XHRAZm9jdXNlZEluZGV4ID0gaW5kZXhcblx0XHRcdFx0XHRAZm9jdXNlZERhdGUgPSBpdGVtLmRhdGVcblx0XHRcdFx0aWYgdG9EYXkgaXMgaXRlbS5kYXRlLnRvRGF0ZVN0cmluZygpXG5cdFx0XHRcdFx0dGQuYWRkQ2xhc3MoJ3RvZGF5Jylcblx0XHRcdFx0XHR0b0RheUluZGV4ID0gaW5kZXhcblx0XHRcdFx0XHR0b0RheURhdGUgPSBpdGVtLmRhdGVcblx0XHRcdFx0aXRlbS5pbmRleCA9IGluZGV4XG5cdFx0XHRcdGl0ZW0uY2VsbCA9IHRkXG5cblx0XHRAdXBkYXRlQ2FsZW5kYXIoKVxuXG5cdFx0aWYgIUBmb2N1c2VkRGF0ZSAmJiB0b0RheURhdGVcblx0XHRcdEBmb2N1c2VkRGF0ZSA9IHRvRGF5RGF0ZVxuXHRcdFx0QGZvY3VzZWRJbmRleCA9IHRvRGF5SW5kZXhcblxuXHRcdGVuYWJsZWRQcmV2TGFzdERheSA9IEBpc0RheUVuYWJsZWQocHJldkxhc3REYXkpXG5cdFx0ZW5hYmxlZE5leHRGaXJzdERheSA9IEBpc0RheUVuYWJsZWQobmV4dEZpcnN0RGF5KVxuXHRcdEBwYW5lbC5nZXRFbGVtZW50KCcucHJldicpLnRvZ2dsZUNsYXNzKCdpbnZpc2libGUnLCAhZW5hYmxlZFByZXZMYXN0RGF5KVxuXHRcdEBwYW5lbC5nZXRFbGVtZW50KCcubmV4dCcpLnRvZ2dsZUNsYXNzKCdpbnZpc2libGUnLCAhZW5hYmxlZE5leHRGaXJzdERheSlcblx0XHRAcGFuZWwuZ2V0RWxlbWVudCgnLnN3aXRjaCcpLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcsICFlbmFibGVkTmV4dEZpcnN0RGF5ICYmICFlbmFibGVkUHJldkxhc3REYXkpXG5cdFx0QHBhbmVsLmdldEVsZW1lbnQoJy5zd2l0Y2gnKS5zZXQoJ2h0bWwnLCBAZm9ybWF0TW9udGgoZGF0ZSkrJyAnK0Bmb3JtYXRZZWFyKGRhdGUpKVxuXHRcdHJldHVyblxuXG5cblx0dXBkYXRlQ2FsZW5kYXI6IC0+XG5cdFx0Zm9yIGkgaW4gWzAuLjQxXVxuXHRcdFx0aXRlbSA9IEBpdGVtc1tpXVxuXHRcdFx0aXRlbS5jZWxsXG5cdFx0XHRcdC50b2dnbGVDbGFzcygnaW5hY3RpdmUnLCBpdGVtLmZvcmVpZ24pXG5cdFx0XHRcdC50b2dnbGVDbGFzcygnZGlzYWJsZWQnLCAhQGlzRGF5RW5hYmxlZChpdGVtLmRhdGUpKVxuXHRcdFx0XHQudG9nZ2xlQ2xhc3MoJ3NlbGVjdGVkJywgQGlzU2VsZWN0ZWQoaXRlbS5kYXRlKSlcblx0XHRcdFx0LnRvZ2dsZUNsYXNzKCdmb2N1cycsIEBpc0ZvY3VzZWQoaXRlbS5kYXRlKSlcblx0XHRcdFx0LnRvZ2dsZUNsYXNzKCdyYW5nZS1pdGVtJywgQGlzRGF5SW5SYW5nZShpdGVtLmRhdGUpKVxuXHRcdFx0XHQudG9nZ2xlQ2xhc3MoJ3JhbmdlLXN0YXJ0JywgQGlzU2FtZURhdGVzKEByYW5nZVN0YXJ0LCBpdGVtLmRhdGUpKVxuXHRcdFx0XHQudG9nZ2xlQ2xhc3MoJ3JhbmdlLWVuZCcsIEBpc1NhbWVEYXRlcyhAcmFuZ2VFbmQsIGl0ZW0uZGF0ZSkpXG5cdFx0cmV0dXJuXG5cblxuXHRpc1NlbGVjdGVkOiAoZGF0ZSkgLT5cblx0XHRyZXR1cm4gQHNlbGVjdGVkRGF0ZSBpc250IG51bGwgJiYgQGlzU2FtZURhdGVzKEBzZWxlY3RlZERhdGUsIGRhdGUpXG5cblxuXHRpc0ZvY3VzZWQ6IChkYXRlKSAtPlxuXHRcdHJldHVybiBAZm9jdXNlZERhdGUgaXNudCBudWxsICYmIEBpc1NhbWVEYXRlcyhAZm9jdXNlZERhdGUsIGRhdGUpXG5cblxuXHRpc0RheUluUmFuZ2U6IChkYXRlKSAtPlxuXHRcdHJldHVybiBAcmFuZ2VTdGFydCBpc250IG51bGwgJiYgQHJhbmdlRW5kIGlzbnQgbnVsbCAmJiBAcmFuZ2VTdGFydCA8PSBkYXRlICYmIEByYW5nZUVuZCA+PSBkYXRlXG5cblxuXHRpc1NhbWVEYXRlczogKGRhdGVBLCBkYXRlQikgLT5cblx0XHRyZXR1cm4gZGF0ZUEgaXNudCBudWxsICYmIGRhdGVCIGlzbnQgbnVsbCAmJiBkYXRlQS50b0RhdGVTdHJpbmcoKSBpcyBkYXRlQi50b0RhdGVTdHJpbmcoKVxuXG5cblx0dHJ5TW92ZUZvY3VzOiAoaW5kZXgpIC0+XG5cdFx0aWYgIUBmb2N1c2VkRGF0ZSB0aGVuIHJldHVyblxuXG5cdFx0ZGF0ZSA9IEBmb2N1c2VkRGF0ZS5nZXREYXRlKClcblx0XHRmb2N1c2VkSW5kZXggPSBAZm9jdXNlZEluZGV4XG5cblx0XHRAZm9jdXNlZEluZGV4ICs9IGluZGV4XG5cdFx0QGZvY3VzZWREYXRlLnNldERhdGUoZGF0ZStpbmRleClcblxuXHRcdGlmICFAaXRlbXNbQGZvY3VzZWRJbmRleF1cblx0XHRcdGNvbnNvbGUubG9nKFwiSW4gY29tcG9uZW50ICN7QG5hbWV9IHdhcyBlcnJvclwiKVxuXHRcdFx0QGZvY3VzZWREYXRlLnNldERhdGUoZGF0ZSlcblx0XHRcdEBmb2N1c2VkSW5kZXggPSBmb2N1c2VkSW5kZXhcblx0XHRcdHJldHVyblxuXG5cdFx0aWYgQGlzRGF5RW5hYmxlZChAZm9jdXNlZERhdGUpXG5cdFx0XHRpZiBAZm9jdXNlZEluZGV4IDwgMCB8fCBAaXRlbXNbQGZvY3VzZWRJbmRleF0uZm9yZWlnblxuXHRcdFx0XHRpZiBAZm9jdXNlZEluZGV4IDwgMTUgdGhlbiBAYWN0aXZhdGVQcmV2KCkgZWxzZSBAYWN0aXZhdGVOZXh0KClcblx0XHRcdGVsc2Vcblx0XHRcdFx0QHVwZGF0ZUNhbGVuZGFyKClcblx0XHRlbHNlXG5cdFx0XHRAZm9jdXNlZERhdGUuc2V0RGF0ZShkYXRlKVxuXHRcdFx0QGZvY3VzZWRJbmRleCA9IGZvY3VzZWRJbmRleFxuXHRcdHJldHVyblxuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBEYXlQaWNrZXIiLCJCYXNlRGF0ZVBpY2tlciA9IHJlcXVpcmUgJy4vQmFzZURhdGUnXG5cbmNsYXNzIE1vbnRoUGlja2VyIGV4dGVuZHMgQmFzZURhdGVQaWNrZXJcblxuXHR4dHlwZTogXCJtb250aHBpY2tlclwiXG5cdGJhc2VDbHM6ICdtb250aHBpY2tlcidcblxuXG5cdGJlZm9yZUluaXQ6IC0+XG5cdFx0c3VwZXJcblx0XHRAbW92ZUluZGV4ID0geyd1cCc6LTQsICdkb3duJzo0LCAncmlnaHQnOjEsICdsZWZ0JzotMX1cblx0XHRyZXR1cm5cblxuXG5cdGFjdGl2YXRlUHJldjogLT5cblx0XHRAYWN0aXZhdGUoQGFjdGl2ZURhdGUuZ2V0RnVsbFllYXIoKS0xKVxuXHRcdHJldHVyblxuXG5cblx0YWN0aXZhdGVOZXh0OiAtPlxuXHRcdEBhY3RpdmF0ZShAYWN0aXZlRGF0ZS5nZXRGdWxsWWVhcigpKzEpXG5cdFx0cmV0dXJuXG5cblxuXHRyZW5kZXJDYWxlbmRhcjogLT5cblx0XHRkYXRlID0gQGFjdGl2ZURhdGVcblx0XHRwcmV2WWVhciA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKS0xLCAxMiwgMCkgIyBsYXN0IGRheSBpbiBwcmV2aW91cyB5ZWFyXG5cdFx0bmV4dFllYXIgPSBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCkrMSwgMSwgMSkgIyBmaXN0IGRheSBuZXh0IHllYXJcblxuXHRcdEBmb2N1c2VkSW5kZXggPSBudWxsXG5cdFx0QGl0ZW1zID0gW11cblx0XHRmb3IgaSBpbiBbMC4uMTFdXG5cdFx0XHRAaXRlbXMucHVzaCh7XG5cdFx0XHRcdGRhdGU6IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgaSwgMSlcblx0XHRcdFx0aW5kZXg6IGlcblx0XHRcdH0pXG5cblx0XHRib2R5ID0gQHBhbmVsLmdldEVsZW1lbnQoJ3Rib2R5Jylcblx0XHRib2R5LmVtcHR5KClcblx0XHRmb3IgaSBpbiBbMC4uMl1cblx0XHRcdHRyID0gbmV3IEVsZW1lbnQoJ3RyJywge3BhcmVudDpib2R5fSlcblx0XHRcdGZvciBqIGluIFswLi4zXVxuXHRcdFx0XHRpbmRleCA9IGkqNCArIGpcblx0XHRcdFx0aXRlbSA9IEBpdGVtc1tpbmRleF1cblx0XHRcdFx0aXRlbS5jZWxsID0gbmV3IEVsZW1lbnQoJ3RkJywge3BhcmVudDp0ciwgaHRtbDogQGZvcm1hdE1vbnRoKGl0ZW0uZGF0ZSksICdkYXRhLWluZGV4JzogaW5kZXh9KVxuXHRcdFx0XHRpZiAhQGlzRGF5RW5hYmxlZChpdGVtLmRhdGUpXG5cdFx0XHRcdFx0aXRlbS5jZWxsLmFkZENsYXNzKCdkaXNhYmxlZCcpXG5cdFx0XHRcdGlmIEBpc1NlbGVjdGVkKGl0ZW0uZGF0ZSlcblx0XHRcdFx0XHRpdGVtLmNlbGwuYWRkQ2xhc3MoJ3NlbGVjdGVkJylcblx0XHRcdFx0aWYgQGlzRm9jdXNlZChpdGVtLmRhdGUpXG5cdFx0XHRcdFx0aXRlbS5jZWxsLmFkZENsYXNzKCdmb2N1cycpXG5cdFx0XHRcdFx0QGZvY3VzZWRJbmRleCA9IGluZGV4XG5cblx0XHRlbmFibGVkUHJldlllYXIgPSBAaXNEYXlFbmFibGVkKHByZXZZZWFyKVxuXHRcdGVuYWJsZWROZXh0WWVhciA9IEBpc0RheUVuYWJsZWQobmV4dFllYXIpXG5cblx0XHRAcGFuZWwuZ2V0RWxlbWVudCgnLnByZXYnKS50b2dnbGVDbGFzcygnaW52aXNpYmxlJywgIWVuYWJsZWRQcmV2WWVhcilcblx0XHRAcGFuZWwuZ2V0RWxlbWVudCgnLm5leHQnKS50b2dnbGVDbGFzcygnaW52aXNpYmxlJywgIWVuYWJsZWROZXh0WWVhcilcblx0XHRAcGFuZWwuZ2V0RWxlbWVudCgnLnN3aXRjaCcpLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcsICFlbmFibGVkUHJldlllYXIgJiYgIWVuYWJsZWROZXh0WWVhcilcblx0XHRAcGFuZWwuZ2V0RWxlbWVudCgnLnN3aXRjaCcpLnNldCgnaHRtbCcsIGRhdGUuZ2V0RnVsbFllYXIoKSlcblx0XHRyZXR1cm5cblxuXG5cdHVwZGF0ZUNhbGVuZGFyOiAtPlxuXHRcdGZvciBpIGluIFswLi4xMV1cblx0XHRcdGl0ZW0gPSBAaXRlbXNbaV1cblx0XHRcdGl0ZW0uY2VsbFxuXHRcdFx0XHQudG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJywgIUBpc0RheUVuYWJsZWQoaXRlbS5kYXRlKSlcblx0XHRcdFx0LnRvZ2dsZUNsYXNzKCdzZWxlY3RlZCcsIEBpc1NlbGVjdGVkKGl0ZW0uZGF0ZSkpXG5cdFx0XHRcdC50b2dnbGVDbGFzcygnZm9jdXMnLCBAaXNGb2N1c2VkKGl0ZW0uZGF0ZSkpXG5cdFx0cmV0dXJuXG5cblxuXHRpc1NlbGVjdGVkOiAoZGF0ZSkgLT5cblx0XHRyZXR1cm4gQHNlbGVjdGVkRGF0ZSBpc250IG51bGwgJiYgQHNlbGVjdGVkRGF0ZS5nZXRZZWFyKCkgaXMgZGF0ZS5nZXRZZWFyKCkgJiYgQHNlbGVjdGVkRGF0ZS5nZXRNb250aCgpIGlzIGRhdGUuZ2V0TW9udGgoKVxuXG5cblx0aXNGb2N1c2VkOiAoZGF0ZSkgLT5cblx0XHRyZXR1cm4gQGZvY3VzZWREYXRlIGlzbnQgbnVsbCAmJiBAZm9jdXNlZERhdGUuZ2V0WWVhcigpIGlzIGRhdGUuZ2V0WWVhcigpICYmIEBmb2N1c2VkRGF0ZS5nZXRNb250aCgpIGlzIGRhdGUuZ2V0TW9udGgoKVxuXG5cblx0dHJ5TW92ZUZvY3VzOiAoaW5kZXgpIC0+XG5cdFx0bW9udGggPSBAZm9jdXNlZERhdGUuZ2V0TW9udGgoKVxuXHRcdGZvY3VzZWRJbmRleCA9IEBmb2N1c2VkSW5kZXhcblxuXHRcdEBmb2N1c2VkSW5kZXggKz0gaW5kZXhcblx0XHRAZm9jdXNlZERhdGUuc2V0TW9udGgobW9udGgraW5kZXgpXG5cblx0XHRpZiBAaXNEYXlFbmFibGVkKEBmb2N1c2VkRGF0ZSlcblx0XHRcdEB1cGRhdGVDYWxlbmRhcigpXG5cdFx0ZWxzZVxuXHRcdFx0QGZvY3VzZWREYXRlLnNldE1vbnRoKG1vbnRoKVxuXHRcdFx0QGZvY3VzZWREYXRlSW5kZXggPSBmb2N1c2VkSW5kZXhcblx0XHRyZXR1cm5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IE1vbnRoUGlja2VyIiwiUG9wb3ZlciA9IHJlcXVpcmUgJy4uL3RpcC9Qb3BvdmVyJ1xuQ29sb3JQaWNrZXIgPSByZXF1aXJlICcuL0NvbG9yJ1xuRGF0ZVBpY2tlciA9IHJlcXVpcmUgJy4vRGF0ZSdcblxuXG5jbGFzcyBQaWNrZXJNYW5hZ2VyXG5cblxuXHRjcmVhdGVQb3BvdmVyUGlja2VyOiAodHlwZSwgY29uZmlnKSAtPlxuXHRcdGZhY3RvcnkgPSAnY3JlYXRlJyt0eXBlLmNhcGl0YWxpemUoKSsnUGlja2VyJ1xuXHRcdGlmICF0aGlzW2ZhY3RvcnldXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbmRlZmluZWQgZmFjdG9yeSBmdW5jdGlvbiBmb3IgJyN7dHlwZX0nIHBpY2tlclwiKVxuXHRcdHJldHVybiB0aGlzW2ZhY3RvcnldKGNvbmZpZylcblxuXG5cdGNyZWF0ZUNvbG9yUGlja2VyOiAoY29uZmlnKSAtPlxuXHRcdHBvcG92ZXIgPSBuZXcgUG9wb3ZlclxuXHRcdFx0dGFyZ2V0OiBjb25maWcudGFyZ2V0XG5cdFx0XHRwbGFjZW1lbnQ6IGNvbmZpZy5wbGFjZW1lbnRcblx0XHRcdGNsb3NlTW9kZTogY29uZmlnLmNsb3NlTW9kZSB8fCAnY2xvc2UnXG5cdFx0XHR0aXRsZTogbWl3by50cignbWl3by5waWNrZXJzLnNlbGVjdENvbG9yJylcblx0XHRcdHN0eWxlczoge21heFdpZHRoOiA1MDB9XG5cdFx0cG9wb3Zlci5hZGQoJ3BpY2tlcicsIG5ldyBDb2xvclBpY2tlcihjb25maWcpKVxuXHRcdHJldHVybiBwb3BvdmVyXG5cblxuXHRjcmVhdGVEYXRlUGlja2VyOiAoY29uZmlnKSAtPlxuXHRcdHBvcG92ZXIgPSBuZXcgUG9wb3ZlclxuXHRcdFx0dGFyZ2V0OiBjb25maWcudGFyZ2V0XG5cdFx0XHRwbGFjZW1lbnQ6IGNvbmZpZy5wbGFjZW1lbnRcblx0XHRcdGNsb3NlTW9kZTogY29uZmlnLmNsb3NlTW9kZSB8fCAnY2xvc2UnXG5cdFx0XHR0aXRsZTogJydcblx0XHRcdHN0eWxlczoge3dpZHRoOjI2MH1cblx0XHRwaWNrZXIgPSBuZXcgRGF0ZVBpY2tlcihjb25maWcpXG5cdFx0cGlja2VyLm9uICdzd2l0Y2gnLCA9PlxuXHRcdFx0cG9wb3Zlci51cGRhdGVQb3NpdGlvbigpXG5cdFx0XHRyZXR1cm5cblx0XHRwb3BvdmVyLmFkZCgncGlja2VyJywgcGlja2VyKVxuXHRcdHJldHVybiBwb3BvdmVyXG5cblxubW9kdWxlLmV4cG9ydHMgPSBQaWNrZXJNYW5hZ2VyIiwiXG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUwzZDNkeTkyYUc5emRITXZiV2wzYjJwekwyMXBkMjh0ZFdrdmMzSmpMM0JwWTJ0bGNpOVVhVzFsTG1OdlptWmxaU0lzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk5M2QzY3ZkbWh2YzNSekwyMXBkMjlxY3k5dGFYZHZMWFZwTDNOeVl5OXdhV05yWlhJdlZHbHRaUzVqYjJabVpXVWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJkMFJuUXlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpSmRmUT09IiwiQmFzZURhdGVQaWNrZXIgPSByZXF1aXJlICcuL0Jhc2VEYXRlJ1xuXG5jbGFzcyBZZWFyUGlja2VyIGV4dGVuZHMgQmFzZURhdGVQaWNrZXJcblxuXHR4dHlwZTogXCJ5ZWFycGlja2VyXCJcblx0YmFzZUNsczogJ3llYXJwaWNrZXInXG5cblxuXHRiZWZvcmVJbml0OiAtPlxuXHRcdHN1cGVyXG5cdFx0QG1vdmVJbmRleCA9IHsndXAnOi00LCAnZG93bic6NCwgJ3JpZ2h0JzoxLCAnbGVmdCc6LTF9XG5cdFx0cmV0dXJuXG5cblxuXHRhY3RpdmF0ZVByZXY6IC0+XG5cdFx0QGFjdGl2YXRlKEBhY3RpdmVEYXRlLmdldEZ1bGxZZWFyKCktMTApXG5cdFx0cmV0dXJuXG5cblxuXHRhY3RpdmF0ZU5leHQ6IC0+XG5cdFx0QGFjdGl2YXRlKEBhY3RpdmVEYXRlLmdldEZ1bGxZZWFyKCkrMTApXG5cdFx0cmV0dXJuXG5cblxuXHRyZW5kZXJDYWxlbmRhcjogLT5cblx0XHRkYXRlID0gQGFjdGl2ZURhdGVcblx0XHRwcmV2WWVhciA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKS0xLCAwLCAxKVxuXHRcdG5leHRZZWFyID0gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpKzEwLCAwLCAxKVxuXG5cdFx0QGZvY3VzZWRJbmRleCA9IG51bGxcblx0XHRAaXRlbXMgPSBbXVxuXHRcdGZvciBpIGluIFswLi4xMV1cblx0XHRcdEBpdGVtcy5wdXNoKHtcblx0XHRcdFx0ZGF0ZTogbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpK2ktMSwgMCwgMSlcblx0XHRcdFx0aW5kZXg6IGlcblx0XHRcdFx0Zm9yZWlnbjogaT09MCAmJiBpPT0xMVxuXHRcdFx0fSlcblxuXHRcdGJvZHkgPSBAcGFuZWwuZ2V0RWxlbWVudCgndGJvZHknKVxuXHRcdGJvZHkuZW1wdHkoKVxuXHRcdGZvciBpIGluIFswLi4yXVxuXHRcdFx0dHIgPSBuZXcgRWxlbWVudCgndHInLCB7cGFyZW50OmJvZHl9KVxuXHRcdFx0Zm9yIGogaW4gWzAuLjNdXG5cdFx0XHRcdGluZGV4ID0gaSo0ICsgalxuXHRcdFx0XHRpdGVtID0gQGl0ZW1zW2luZGV4XVxuXHRcdFx0XHRpdGVtLmNlbGwgPSBuZXcgRWxlbWVudCgndGQnLCB7cGFyZW50OnRyLCBodG1sOiBAZm9ybWF0WWVhcihpdGVtLmRhdGUpLCAnZGF0YS1pbmRleCc6IGluZGV4fSlcblx0XHRcdFx0aWYgIUBpc0RheUVuYWJsZWQoaXRlbS5kYXRlKVxuXHRcdFx0XHRcdGl0ZW0uY2VsbC5hZGRDbGFzcygnZGlzYWJsZWQnKVxuXHRcdFx0XHRpZiBAaXNTZWxlY3RlZChpdGVtLmRhdGUpXG5cdFx0XHRcdFx0aXRlbS5jZWxsLmFkZENsYXNzKCdzZWxlY3RlZCcpXG5cdFx0XHRcdGlmIEBpc0ZvY3VzZWQoaXRlbS5kYXRlKVxuXHRcdFx0XHRcdGl0ZW0uY2VsbC5hZGRDbGFzcygnZm9jdXMnKVxuXHRcdFx0XHRcdEBmb2N1c2VkSW5kZXggPSBpbmRleFxuXG5cdFx0Zmlyc3RZZWFyID0gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCAwLCAxKVxuXHRcdGxhc3RZZWFyID0gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpKzksIDAsIDEpXG5cdFx0ZW5hYmxlZFByZXZZZWFyID0gQGlzRGF5RW5hYmxlZChwcmV2WWVhcilcblx0XHRlbmFibGVkTmV4dFllYXIgPSBAaXNEYXlFbmFibGVkKG5leHRZZWFyKVxuXG5cdFx0QHBhbmVsLmdldEVsZW1lbnQoJy5wcmV2JykudG9nZ2xlQ2xhc3MoJ2ludmlzaWJsZScsICFlbmFibGVkUHJldlllYXIpXG5cdFx0QHBhbmVsLmdldEVsZW1lbnQoJy5uZXh0JykudG9nZ2xlQ2xhc3MoJ2ludmlzaWJsZScsICFlbmFibGVkTmV4dFllYXIpXG5cdFx0QHBhbmVsLmdldEVsZW1lbnQoJy5zd2l0Y2gnKS50b2dnbGVDbGFzcygnZGlzYWJsZWQnLCAhZW5hYmxlZFByZXZZZWFyICYmICFlbmFibGVkTmV4dFllYXIpXG5cdFx0QHBhbmVsLmdldEVsZW1lbnQoJy5zd2l0Y2gnKS5zZXQoJ2h0bWwnLCBAZm9ybWF0WWVhcihmaXJzdFllYXIpKycgLSAnK0Bmb3JtYXRZZWFyKGxhc3RZZWFyKSlcblx0XHRyZXR1cm5cblxuXG5cdHVwZGF0ZUNhbGVuZGFyOiAtPlxuXHRcdGZvciBpIGluIFswLi4xMV1cblx0XHRcdGl0ZW0gPSBAaXRlbXNbaV1cblx0XHRcdGl0ZW0uY2VsbFxuXHRcdFx0XHQudG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJywgIUBpc0RheUVuYWJsZWQoaXRlbS5kYXRlKSlcblx0XHRcdFx0LnRvZ2dsZUNsYXNzKCdzZWxlY3RlZCcsIEBpc1NlbGVjdGVkKGl0ZW0uZGF0ZSkpXG5cdFx0XHRcdC50b2dnbGVDbGFzcygnZm9jdXMnLCBAaXNGb2N1c2VkKGl0ZW0uZGF0ZSkpXG5cdFx0cmV0dXJuXG5cblxuXHRpc1NlbGVjdGVkOiAoZGF0ZSkgLT5cblx0XHRyZXR1cm4gQHNlbGVjdGVkRGF0ZSBpc250IG51bGwgJiYgQHNlbGVjdGVkRGF0ZS5nZXRZZWFyKCkgaXMgZGF0ZS5nZXRZZWFyKClcblxuXG5cdGlzRm9jdXNlZDogKGRhdGUpIC0+XG5cdFx0cmV0dXJuIEBmb2N1c2VkRGF0ZSBpc250IG51bGwgJiYgQGZvY3VzZWREYXRlLmdldFllYXIoKSBpcyBkYXRlLmdldFllYXIoKVxuXG5cblx0dHJ5TW92ZUZvY3VzOiAoaW5kZXgpIC0+XG5cdFx0eWVhciA9IEBmb2N1c2VkRGF0ZS5nZXRGdWxsWWVhcigpXG5cdFx0Zm9jdXNlZEluZGV4ID0gQGZvY3VzZWRJbmRleFxuXG5cdFx0QGZvY3VzZWRJbmRleCArPSBpbmRleFxuXHRcdEBmb2N1c2VkRGF0ZS5zZXRGdWxsWWVhcih5ZWFyK2luZGV4KVxuXG5cdFx0aWYgQGlzRGF5RW5hYmxlZChAZm9jdXNlZERhdGUpXG5cdFx0XHRpZiBAZm9jdXNlZEluZGV4IDwgMCB8fCBAaXRlbXNbQGZvY3VzZWRJbmRleF0uZm9yZWlnblxuXHRcdFx0XHRpZiBAZm9jdXNlZEluZGV4IDwgNiB0aGVuIEBhY3RpdmF0ZVByZXYoKSBlbHNlIEBhY3RpdmF0ZU5leHQoKVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHRAdXBkYXRlQ2FsZW5kYXIoKVxuXHRcdGVsc2Vcblx0XHRcdEBmb2N1c2VkRGF0ZS5zZXRGdWxsWWVhcih5ZWFyKVxuXHRcdFx0QGZvY3VzZWREYXRlSW5kZXggPSBmb2N1c2VkSW5kZXhcblx0XHRyZXR1cm5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IFllYXJQaWNrZXIiLCJtb2R1bGUuZXhwb3J0cyA9XG5cblx0UGlja2VyTWFuYWdlcjogcmVxdWlyZSAnLi9QaWNrZXJNYW5hZ2VyJ1xuXHRDb2xvcjogcmVxdWlyZSAnLi9Db2xvcidcblx0RGF5OiByZXF1aXJlICcuL0RheSdcblx0TW9udGg6IHJlcXVpcmUgJy4vTW9udGgnXG5cdFllYXI6IHJlcXVpcmUgJy4vWWVhcidcblx0RGF0ZTogcmVxdWlyZSAnLi9EYXRlJ1xuXHRUaW1lOiByZXF1aXJlICcuL1RpbWUnIiwiY2xhc3MgQmFyIGV4dGVuZHMgTWl3by5Db21wb25lbnRcblxuXHR2YWx1ZTogNTBcblx0bWluV2lkdGg6IG51bGxcblx0ZGVzYzogJydcblx0dHlwZTogbnVsbFxuXHRoaWRlVmFsdWU6IGZhbHNlXG5cdHN0cmlwZWQ6IGZhbHNlXG5cdGFjdGl2ZTogZmFsc2Vcblx0YmFzZUNsczogJ3Byb2dyZXNzLWJhcidcblx0cm9sZTogJ3Byb2dyZXNzYmFyJ1xuXG5cdHByb2dyZXNzRWw6IG51bGxcblx0c3RhdHVzRWw6IG51bGxcblx0dmFsdWVFbDogbnVsbFxuXHRkZXNjRWw6IG51bGxcblxuXG5cdHNldFZhbHVlOiAoQHZhbHVlKSAtPlxuXHRcdEBlbWl0KCdjaGFuZ2UnLCB0aGlzLCB2YWx1ZSlcblx0XHRpZiAhQHJlbmRlcmVkIHRoZW4gcmV0dXJuXG5cdFx0QGVsLnNldFN0eWxlKCd3aWR0aCcsIHZhbHVlKyclJylcblx0XHRAZWwuc2V0KCdhcmlhLXZhbHVlbm93JywgdmFsdWUpXG5cdFx0QHZhbHVlRWwuc2V0KCd0ZXh0JywgdmFsdWUrJyUnKVxuXHRcdHJldHVyblxuXG5cblx0c2V0RGVzY3JpcHRpb246IChAZGVzYykgLT5cblx0XHRpZiAhQHJlbmRlcmVkIHRoZW4gcmV0dXJuXG5cdFx0QGRlc2NFbC5zZXQoJ2h0bWwnLCBkZXNjKVxuXHRcdHJldHVyblxuXG5cblx0c2V0VHlwZTogKHR5cGUpIC0+XG5cdFx0QGVsLnJlbW92ZUNsYXNzKCdwcm9ncmVzcy1iYXItJytAdHlwZSkgaWYgQHR5cGVcblx0XHRAZWwuYWRkQ2xhc3MoJ3Byb2dyZXNzLWJhci0nK3R5cGUpIGlmIHR5cGVcblx0XHRAdHlwZSA9IHR5cGVcblx0XHRAZW1pdCgndHlwZScsIHRoaXMsIHR5cGUpXG5cdFx0cmV0dXJuXG5cblxuXHRzZXRBY3RpdmU6IChhY3RpdmUgPSB0cnVlKSAtPlxuXHRcdEBhY3RpdmUgPSBhY3RpdmVcblx0XHRAZW1pdCgnYWN0aXZlJywgdGhpcywgYWN0aXZlKVxuXHRcdGlmICFAcmVuZGVyZWQgdGhlbiByZXR1cm5cblx0XHRAcHJvZ3Jlc3NFbC50b2dnbGVDbGFzcygncHJvZ3Jlc3MtYmFyLWFjdGl2ZScsIGFjdGl2ZSlcblx0XHRyZXR1cm5cblxuXG5cdHNldEhpZGVWYWx1ZTogKEBoaWRlVmFsdWUpIC0+XG5cdFx0aWYgIUByZW5kZXJlZCB0aGVuIHJldHVyblxuXHRcdEB2YWx1ZUVsLnNldFZpc2libGUoIUBoaWRlVmFsdWUpXG5cdFx0cmV0dXJuXG5cblxuXHRnZXRWYWx1ZTogLT5cblx0XHRyZXR1cm4gQHZhbHVlXG5cblxuXHRkb1JlbmRlcjogLT5cblx0XHRAZWwuc2V0ICdodG1sJyxcblx0XHQnPHNwYW4gbWl3by1yZWZlcmVuY2U9XCJsYWJlbEVsXCIgY2xhc3M9XCJwcm9ncmVzcy1iYXItbGFiZWxcIj4nK1xuXHRcdFx0JzxzcGFuIG1pd28tcmVmZXJlbmNlPVwidmFsdWVFbFwiIGNsYXNzPVwicHJvZ3Jlc3MtYmFyLXZhbHVlXCI+JytAdmFsdWUrJyU8L3NwYW4+ICcrXG5cdFx0XHQnPHNwYW4gbWl3by1yZWZlcmVuY2U9XCJkZXNjRWxcIiBjbGFzcz1cInByb2dyZXNzLWJhci1kZXNjXCI+JytAZGVzYysnPC9zcGFuPicrXG5cdFx0Jzwvc3Bhbj4nXG5cdFx0cmV0dXJuXG5cblxuXHRhZnRlclJlbmRlcjogLT5cblx0XHRzdXBlclxuXHRcdEB2YWx1ZUVsLnNldFZpc2libGUoIUBoaWRlVmFsdWUpXG5cdFx0QGVsLmFkZENsYXNzKCdwcm9ncmVzcy1iYXItJytAdHlwZSkgaWYgQHR5cGVcblx0XHRAZWwuYWRkQ2xhc3MoJ3Byb2dyZXNzLWJhci1zdHJpcGVkJykgaWYgQHN0cmlwZWRcblx0XHRAZWwuYWRkQ2xhc3MoJ2FjdGl2ZScpIGlmIEBhY3RpdmVcblx0XHRAZWwuc2V0U3R5bGUoJ21pbi13aWR0aCcsIEBtaW5XaWR0aCsnZW0nKSBpZiBAbWluV2lkdGhcblx0XHRAZWwuc2V0U3R5bGUoJ3dpZHRoJywgQHZhbHVlKyclJylcblx0XHRAZWwuc2V0KCdhcmlhLXZhbHVlbm93JywgQHZhbHVlKVxuXHRcdEBlbC5zZXQoJ2FyaWEtdmFsdWVtaW4nLCAwKVxuXHRcdEBlbC5zZXQoJ2FyaWEtdmFsdWVtYXgnLCAxMDApXG5cdFx0cmV0dXJuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBCYXIiLCJCYXIgPSByZXF1aXJlICcuL0JhcidcblxuY2xhc3MgUHJvZ3Jlc3NCYXIgZXh0ZW5kcyBNaXdvLkNvbnRhaW5lclxuXG5cdGJhcjogbnVsbFxuXHRiYXNlQ2xzOiAncHJvZ3Jlc3MnXG5cblxuXHRjb25zdHJ1Y3RvcjogKGNvbmZpZykgLT5cblx0XHRAYmFyID0gbmV3IEJhcihjb25maWcpXG5cdFx0c3VwZXIoY29uZmlnKVxuXHRcdHJldHVyblxuXG5cblx0ZG9Jbml0OiAtPlxuXHRcdHN1cGVyXG5cdFx0QGFkZCgnYmFyJywgQGJhcilcblx0XHRyZXR1cm5cblxuXG5cdHNldFZhbHVlOiAodmFsdWUpIC0+XG5cdFx0cmV0dXJuIEBiYXIuc2V0VmFsdWUodmFsdWUpXG5cblxuXHRzZXREZXNjcmlwdGlvbjogKGRlc2MpIC0+XG5cdFx0cmV0dXJuIEBiYXIuc2V0RGVzY3JpcHRpb24oZGVzYylcblxuXG5cdHNldFR5cGU6ICh0eXBlKSAtPlxuXHRcdHJldHVybiBAYmFyLnNldFR5cGUodHlwZSlcblxuXG5cdHNldEFjdGl2ZTogKGFjdGl2ZSkgLT5cblx0XHRyZXR1cm4gQGJhci5zZXRBY3RpdmUoYWN0aXZlKVxuXG5cblx0c2V0SGlkZVZhbHVlOiAoaGlkZVZhbHVlKSAtPlxuXHRcdHJldHVybiBAYmFyLnNldEhpZGVWYWx1ZShoaWRlVmFsdWUpXG5cblxuXHRnZXRWYWx1ZTogLT5cblx0XHRyZXR1cm4gQGJhci5nZXRWYWx1ZSgpXG5cblxubW9kdWxlLmV4cG9ydHMgPSBQcm9ncmVzc0JhciIsIkJhciA9IHJlcXVpcmUgJy4vQmFyJ1xuXG5jbGFzcyBTdGFja2VkQmFyIGV4dGVuZHMgTWl3by5Db250YWluZXJcblxuXHRiYXNlQ2xzOiAncHJvZ3Jlc3MnXG5cblx0YWRkQmFyOiAobmFtZSwgY29uZmlnKSAtPlxuXHRcdHJldHVybiBAYWRkKG5hbWUsIG5ldyBCYXIoY29uZmlnKSlcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFN0YWNrZWRCYXIiLCJtb2R1bGUuZXhwb3J0cyA9XG5cblx0QmFyOiByZXF1aXJlICcuL0Jhcidcblx0UHJvZ3Jlc3NCYXI6IHJlcXVpcmUgJy4vUHJvZ3Jlc3NCYXInXG5cdFN0YWNrZWRCYXI6IHJlcXVpcmUgJy4vU3RhY2tlZEJhciciLCJjbGFzcyBCYXNlU2VsZWN0b3IgZXh0ZW5kcyBNaXdvLk9iamVjdFxuXG5cdGlzU2VsZWN0b3I6IHRydWVcblxuXHQjIEBjZmcge2Jvb2xlYW59IGNoZWNrZXJSZXF1aXJlZFxuXHRjaGVja2VyUmVxdWlyZWQ6IGZhbHNlXG5cblx0IyBAcHJvcGVydHkge01pd28uZ3JpZC5HcmlkfVxuXHRncmlkOiBudWxsXG5cblx0IyBAcHJvcGVydHkge01pd28uc2VsZWN0aW9uLk1vZGVsfVxuXHRzZWxlY3Rpb246IG51bGxcblxuXG5cdCMgU2V0IGdyaWRcblx0IyBAcGFyYW0ge01pd28uZ3JpZC5HcmlkfSBncmlkXG5cdHNldEdyaWQ6IChAZ3JpZCkgLT5cblx0XHRAbW9uKGdyaWQsICdyZW5kZXInLCAnZ3JpZFJlbmRlcicpXG5cdFx0QG1vbihncmlkLCAncmVmcmVzaCcsICdncmlkUmVmcmVzaCcpXG5cdFx0cmV0dXJuXG5cblxuXHQjIFNldCBzZWxlY3Rpb24gbW9kZWwgdG8gbWFuYWdlIHNlbGVjdGlvbnNcblx0IyBAcGFyYW0ge01pd28uc2VsZWN0aW9uLk1vZGVsfSBzZWxlY3Rpb25cblx0c2V0U2VsZWN0aW9uTW9kZWw6IChAc2VsZWN0aW9uKSAtPlxuXHRcdEBtb24oc2VsZWN0aW9uLCAnc2VsZWN0JywgJ21vZGVsU2VsZWN0Jylcblx0XHRAbW9uKHNlbGVjdGlvbiwgJ2Rlc2VsZWN0JywgJ21vZGVsRGVzZWxlY3QnKVxuXHRcdEBtb24oc2VsZWN0aW9uLCAnY2hhbmdlJywgJ21vZGVsQ2hhbmdlJylcblx0XHRyZXR1cm5cblxuXG5cdGdyaWRSZWZyZXNoOiAoZ3JpZCkgLT5cblx0XHRyZXR1cm5cblxuXG5cdGdyaWRSZW5kZXI6IChncmlkKSAtPlxuXHRcdGdyaWQuZWwuYWRkQ2xhc3MoJ2dyaWQtc2VsZWN0LScrQHR5cGUpXG5cdFx0cmV0dXJuXG5cblxuXHRtb2RlbFNlbGVjdDogKHNlbGVjdGlvbiwgcmVjb3JkLCByb3dJbmRleCkgLT5cblx0XHRyZXR1cm5cblxuXG5cdG1vZGVsRGVzZWxlY3Q6IChzZWxlY3Rpb24sIHJlY29yZCwgcm93SW5kZXgpIC0+XG5cdFx0cmV0dXJuXG5cblxuXHRtb2RlbENoYW5nZTogKHNlbGVjdGlvbiwgcnMpIC0+XG5cdFx0cmV0dXJuXG5cblxuXHRkb0Rlc3Ryb3k6IC0+XG5cdFx0QGdyaWQgPSBudWxsXG5cdFx0QHNlbGVjdGlvbiA9IG51bGxcblx0XHRzdXBlclxuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBCYXNlU2VsZWN0b3IiLCJSb3dTZWxlY3RvciA9IHJlcXVpcmUgJy4vUm93U2VsZWN0b3InXG5cblxuY2xhc3MgQ2hlY2tTZWxlY3RvciBleHRlbmRzIFJvd1NlbGVjdG9yXG5cblx0dHlwZTogJ2NoZWNrJ1xuXHRzZWxlY3RPblJvd0NsaWNrOiBmYWxzZVxuXHRjaGVja2VyUmVxdWlyZWQ6IHRydWVcblxuXG5cblx0c2V0Q2hlY2tDb2x1bW46IChAY29sdW1uKSAtPlxuXHRcdEBtb24oY29sdW1uLCAncm93Y2hlY2snLCAnb25Sb3dDaGVjaycpXG5cdFx0QG1vbihjb2x1bW4sICdoZWFkZXJjaGVjaycsICdvbkhlYWRlckNoZWNrJylcblx0XHRyZXR1cm5cblxuXG5cdG9uUm93Q2hlY2s6IChjb2x1bW4sIHJvdywgY2hlY2tlZCkgLT5cblx0XHRyZWMgPSByb3cucmV0cmlldmUoJ3JlY29yZCcpXG5cdFx0QHNlbGVjdGlvbi5zZXRTZWxlY3RlZChyZWMsIGNoZWNrZWQpXG5cdFx0cmV0dXJuXG5cblxuXHRvbkhlYWRlckNoZWNrOiAoY29sdW1uLCBjaGVja2VkKSAtPlxuXHRcdEBzZWxlY3Rpb24uc2V0U2VsZWN0ZWRBbGwoY2hlY2tlZClcblx0XHRyZXR1cm5cblxuXG5cdG1vZGVsU2VsZWN0OiAoc2VsZWN0aW9uLCByZWNvcmQpIC0+XG5cdFx0QGNvbHVtbi5zZXRDaGVja2VkUm93KHJlY29yZCwgdHJ1ZSlcblx0XHRyZXR1cm5cblxuXG5cdG1vZGVsRGVzZWxlY3Q6IChzZWxlY3Rpb24sIHJlY29yZCkgLT5cblx0XHRAY29sdW1uLnNldENoZWNrZWRSb3cocmVjb3JkLCBmYWxzZSlcblx0XHRyZXR1cm5cblxuXG5cdG1vZGVsQ2hhbmdlOiAoc2VsZWN0aW9uLCBycykgLT5cblx0XHRzdXBlcihzZWxlY3Rpb24sIHJzKVxuXHRcdHNlbGVjdGVkQWxsID0gc2VsZWN0aW9uLmdldFRvdGFsU2VsZWN0YWJsZUNvdW50KCkgaXMgc2VsZWN0aW9uLmdldENvdW50KClcblx0XHRAY29sdW1uLnNldENoZWNrZWRIZWFkZXIoc2VsZWN0ZWRBbGwgJiYgc2VsZWN0aW9uLmhhc1NlbGVjdGlvbigpKVxuXHRcdHJldHVyblxuXG5cblx0Z3JpZFJlbmRlcjogKGdyaWQpIC0+XG5cdFx0c3VwZXIoZ3JpZClcblx0XHRAc2V0Q2hlY2tDb2x1bW4oZ3JpZC5jaGVja2VyKVxuXHRcdHJldHVyblxuXG5cblx0Z3JpZFJlZnJlc2g6IChncmlkKSAtPlxuXHRcdGlmICFAY29sdW1uXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDaGVjayBzZWxlY3RvciBpcyBub3QgYmluZGVkIHdpdGggY29sdW1uLiBZb3Ugc2hvdWxkIGNhbGwgc2V0Q2hlY2tDb2x1bW4oKS4gTWF5YmUgZ3JpZCBpcyBub3QgcmVuZGVyZWRcIilcblxuXHRcdHNtID0gZ3JpZC5nZXRTZWxlY3Rpb25Nb2RlbCgpXG5cblx0XHRncmlkLmdldFJlY29yZHMoKS5lYWNoIChyZWMpID0+XG5cdFx0XHRpZiAhc20uaXNTZWxlY3RhYmxlKHJlYylcblx0XHRcdFx0QGNvbHVtbi5zZXREaXNhYmxlZFJvdyhyZWMsIHRydWUpXG5cdFx0XHRyZXR1cm5cblxuXHRcdHNtLmdldFNlbGVjdGlvbigpLmVhY2ggKHJlYykgPT5cblx0XHRcdEBtb2RlbFNlbGVjdChzbSwgcmVjKVxuXHRcdFx0cmV0dXJuXG5cdFx0cmV0dXJuXG5cblxuXHRkb0Rlc3Ryb3k6IC0+XG5cdFx0QGNvbHVtbiA9IG51bGxcblx0XHRzdXBlclxuXG5cbm1vZHVsZS5leHBvcnRzID0gQ2hlY2tTZWxlY3RvciIsIkJhc2VTZWxlY3RvciA9IHJlcXVpcmUgJy4vQmFzZVNlbGVjdG9yJ1xuXG5cbmNsYXNzIFJvd1NlbGVjdG9yIGV4dGVuZHMgQmFzZVNlbGVjdG9yXG5cblx0dHlwZTogJ3JvdydcblxuXHRzZWxlY3RPblJvd0NsaWNrOiB0cnVlXG5cblxuXHRncmlkUmVuZGVyOiAoZ3JpZCkgLT5cblx0XHRzdXBlcihncmlkKVxuXHRcdGlmIEBzZWxlY3RPblJvd0NsaWNrXG5cdFx0XHRAbW9uIGdyaWQuYm9keUVsLCBcImNsaWNrOnJlbGF5KHRyKVwiLCAoZXZlbnQsIHRhcmdldCkgPT5cblx0XHRcdFx0QG9uUm93Q2xpY2sodGFyZ2V0LCBldmVudClcblx0XHRcdFx0cmV0dXJuXG5cdFx0cmV0dXJuXG5cblxuXHRvblJvd0NsaWNrOiAodHIsIGV2ZW50KSAtPlxuXHRcdGlmICFldmVudC5jb250cm9sICYmICFldmVudC5tZXRhXG5cdFx0XHRAc2VsZWN0aW9uLmRlc2VsZWN0QWxsKClcblx0XHRpZiAocmVjb3JkID0gdHIucmV0cmlldmUoXCJyZWNvcmRcIikpXG5cdFx0XHRAc2VsZWN0aW9uLnRvZ2dsZShyZWNvcmQpXG5cdFx0cmV0dXJuXG5cblxuXHRnZXRSb3dCeVJlY29yZDogKHJlY29yZCkgLT5cblx0XHRmb3IgdHIgaW4gQGdyaWQuYm9keUVsLmdldEVsZW1lbnRzKCd0cicpXG5cdFx0XHRpZiB0ci5yZXRyaWV2ZSgncmVjb3JkJykgJiYgdHIucmV0cmlldmUoJ3JlY29yZCcpLmlkIGlzIHJlY29yZC5pZFxuXHRcdFx0XHRyZXR1cm4gdHJcblx0XHRyZXR1cm4gbnVsbFxuXG5cblx0bW9kZWxTZWxlY3Q6IChzZWxlY3Rpb24sIHJlY29yZCkgLT5cblx0XHRyb3cgPSBAZ2V0Um93QnlSZWNvcmQocmVjb3JkKVxuXHRcdHJvdy5hZGRDbGFzcyhcImdyaWQtc2VsZWN0ZWRcIikgaWYgcm93XG5cdFx0cmV0dXJuXG5cblxuXHRtb2RlbERlc2VsZWN0OiAoc2VsZWN0aW9uLCByZWNvcmQpIC0+XG5cdFx0cm93ID0gQGdldFJvd0J5UmVjb3JkKHJlY29yZClcblx0XHRyb3cucmVtb3ZlQ2xhc3MoXCJncmlkLXNlbGVjdGVkXCIpIGlmIHJvd1xuXHRcdHJldHVyblxuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBSb3dTZWxlY3RvciIsImNsYXNzIFNlbGVjdGlvbk1vZGVsIGV4dGVuZHMgTWl3by5PYmplY3RcblxuXHQjIEBjZmcge1N0cmluZ30gc2luZ2xlIG9yIG11bHRpXG5cdHR5cGU6IFwic2luZ2xlXCJcblx0IyBAY2ZnIHtCb29sZWFufSBbcHJ1bmVSZW1vdmVkPXRydWVdIFJlbW92ZSByZWNvcmRzIGZyb20gdGhlIHNlbGVjdGlvbiB3aGVuIHRoZXkgYXJlIHJlbW92ZWQgZnJvbSB0aGUgc3RvcmUuXG5cdHBydW5lUmVtb3ZlZDogdHJ1ZVxuXG5cdGxvY2tlZDogZmFsc2Vcblx0c2VsZWN0ZWQ6IFtdXG5cdGxhc3RTZWxlY3RlZDogbnVsbFxuXHRzdG9yZTogbnVsbFxuXHRzZWxlY3Rpb25DaGFuZ2VkOiBmYWxzZVxuXHRlbWl0RXZlbnRzOiB0cnVlXG5cdHNlbGVjdGFibGVJbmRleDogbnVsbFxuXHRzZWxlY3RhYmxlSGFuZGxlcjogbnVsbFxuXG5cblx0Y29uc3RydWN0b3I6IChjb25maWcpIC0+XG5cdFx0c3VwZXIoY29uZmlnKVxuXHRcdEBzZWxlY3RlZCA9IFtdXG5cblxuXHRzZXRTdG9yZTogKEBzdG9yZSkgLT5cblx0XHRAbW9uKHN0b3JlLCAnZGF0YWNoYW5nZWQnLCAnb25TdG9yZURhdGFDaGFuZ2VkJylcblx0XHRAbW9uKHN0b3JlLCAnY2xlYXInLCAnb25TdG9yZUNsZWFyJylcblx0XHRAbW9uKHN0b3JlLCAncmVtb3ZlJywgJ29uU3RvcmVSZW1vdmUnKVxuXHRcdHJldHVyblxuXG5cdGdldFN0b3JlOiAtPlxuXHRcdHJldHVybiBAc3RvcmVcblxuXG5cdG9uU3RvcmVEYXRhQ2hhbmdlZDogLT5cblx0XHRAcmVmcmVzaCgpXG5cdFx0cmV0dXJuXG5cblxuXHRvblN0b3JlQ2xlYXI6IC0+XG5cdFx0aWYgQGdldENvdW50KCkgPiAwXG5cdFx0XHRAY2xlYXJTZWxlY3Rpb25zKClcblx0XHRcdEBzZWxlY3Rpb25DaGFuZ2VkID0gdHJ1ZVxuXHRcdFx0QGNoZWNrU2VsZWN0aW9uQ2hhbmdlZCgpXG5cdFx0cmV0dXJuXG5cblxuXHRvblN0b3JlUmVtb3ZlOiAoc3RvcmUsIHJlYywgaW5kZXgpIC0+XG5cdFx0aWYgQGxhc3RTZWxlY3RlZCBpcyByZWNcblx0XHRcdEBsYXN0U2VsZWN0ZWQgPSBudWxsXG5cdFx0aWYgQGlzU2VsZWN0ZWQocmVjKVxuXHRcdFx0QHNlbGVjdGVkLmVyYXNlKHJlYylcblx0XHRcdEBzZWxlY3Rpb25DaGFuZ2VkID0gdHJ1ZVxuXHRcdFx0QGNoZWNrU2VsZWN0aW9uQ2hhbmdlZCgpXG5cdFx0cmV0dXJuXG5cblxuXHQjIEEgZmFzdCByZXNldCBvZiB0aGUgc2VsZWN0aW9ucyB3aXRob3V0IGZpcmluZyBldmVudHMsIHVwZGF0aW5nIHRoZSB1aSwgZXRjLiBGb3IgcHJpdmF0ZSB1c2FnZSBvbmx5LlxuXHQjIEBwcml2YXRlXG5cdGNsZWFyU2VsZWN0aW9uczogLT5cblx0XHRAc2VsZWN0ZWQuZW1wdHkoKVxuXHRcdEBsYXN0U2VsZWN0ZWQgPSBudWxsXG5cdFx0cmV0dXJuXG5cblxuXHQjIFJldHVybnMgdHJ1ZSBpZiB0aGUgc2VsZWN0aW9ucyBhcmUgbG9ja2VkLlxuXHQjIEByZXR1cm4ge0Jvb2xlYW59XG5cdGlzTG9ja2VkOiAtPlxuXHRcdHJldHVybiBAbG9ja2VkXG5cblxuXHQjIExvY2tzIHRoZSBjdXJyZW50IHNlbGVjdGlvbiBhbmQgZGlzYWJsZXMgYW55IGNoYW5nZXMgZnJvbSBoYXBwZW5pbmcgdG8gdGhlIHNlbGVjdGlvbi5cblx0IyBAcGFyYW0ge0Jvb2xlYW59IGxvY2tlZCAgVHJ1ZSB0byBsb2NrLCBmYWxzZSB0byB1bmxvY2suXG5cdHNldExvY2tlZDogKGxvY2tlZCkgLT5cblx0XHRAbG9ja2VkID0gISFsb2NrZWRcblx0XHRyZXR1cm5cblxuXG5cdCMgUmV0dXJucyB0cnVlIGlmIHRoZSBzcGVjaWZpZWQgcm93IGlzIHNlbGVjdGVkLlxuXHQjIEBwYXJhbSB7TWl3by5kYXRhLk1vZGVsL051bWJlcn0gcmVjb3JkIFRoZSByZWNvcmQgb3IgaW5kZXggb2YgdGhlIHJlY29yZCB0byBjaGVja1xuXHQjIEByZXR1cm4ge0Jvb2xlYW59XG5cdGlzU2VsZWN0ZWQ6IChyZWNvcmQpIC0+XG5cdFx0cmVjb3JkID0gKGlmIFR5cGUuaXNOdW1iZXIocmVjb3JkKSB0aGVuIEBzdG9yZS5nZXRBdChyZWNvcmQpIGVsc2UgcmVjb3JkKVxuXHRcdHJldHVybiBAc2VsZWN0ZWQuaW5kZXhPZihyZWNvcmQpIGlzbnQgLTFcblxuXG5cdCMgUmV0dXJucyB0cnVlIGlmIHRoZSBzcGVjaWZpZWQgcm93IGlzIHNlbGVjdGFibGUuXG5cdCMgQHBhcmFtIHtNaXdvLmRhdGEuTW9kZWwvTnVtYmVyfSByZWNvcmQgVGhlIHJlY29yZCBvciBpbmRleCBvZiB0aGUgcmVjb3JkIHRvIGNoZWNrXG5cdCMgQHJldHVybiB7Qm9vbGVhbn1cblx0aXNTZWxlY3RhYmxlOiAocmVjb3JkKSAtPlxuXHRcdGlmIG5vdCBAc2VsZWN0YWJsZUluZGV4IGFuZCBub3QgQHNlbGVjdGFibGVIYW5kbGVyXG5cdFx0XHRyZXR1cm4gdHJ1ZVxuXHRcdGVsc2Vcblx0XHRcdHJlY29yZCA9IChpZiBUeXBlLmlzTnVtYmVyKHJlY29yZCkgdGhlbiBAc3RvcmUuZ2V0QXQocmVjb3JkKSBlbHNlIHJlY29yZClcblx0XHRcdGlmIEBzZWxlY3RhYmxlSGFuZGxlclxuXHRcdFx0XHRyZXR1cm4gQHNlbGVjdGFibGVIYW5kbGVyKHJlY29yZClcblx0XHRcdGVsc2Vcblx0XHRcdFx0cmV0dXJuICEhcmVjb3JkLmdldChAc2VsZWN0YWJsZUluZGV4KVxuXG5cdGdldFNlbGVjdGlvbjogLT5cblx0XHRyZXR1cm4gQHNlbGVjdGVkXG5cblxuXHRnZXRSZWNvcmRzOiAtPlxuXHRcdHJzID0gW11cblx0XHRycy5wdXNoKHJlYykgIGZvciByZWMgaW4gQHNlbGVjdGVkXG5cdFx0cmV0dXJuIHJzXG5cblxuXHRoYXNTZWxlY3Rpb246IC0+XG5cdFx0cmV0dXJuIEBnZXRDb3VudCgpID4gMFxuXG5cblx0Z2V0Rmlyc3RTZWxlY3RlZDogLT5cblx0XHRyZXR1cm4gKGlmIEBoYXNTZWxlY3Rpb24oKSB0aGVuIEByZWNvcmRzWzBdIGVsc2UgbnVsbClcblxuXG5cdGdldExhc3RTZWxlY3RlZDogLT5cblx0XHRyZXR1cm4gKGlmIEBoYXNTZWxlY3Rpb24oKSB0aGVuIEByZWNvcmRzLmdldExhc3QoKSBlbHNlIG51bGwpXG5cblxuXHRnZXRDb3VudDogLT5cblx0XHRyZXR1cm4gQHNlbGVjdGVkLmxlbmd0aFxuXG5cblx0Z2V0VG90YWxDb3VudDogLT5cblx0XHRyZXR1cm4gQGdldFN0b3JlKCkuZ2V0Q291bnQoKVxuXG5cblx0Z2V0VG90YWxTZWxlY3RhYmxlQ291bnQ6IC0+XG5cdFx0Y291bnQgPSAwXG5cdFx0QGdldFN0b3JlKCkuZWFjaCAocikgPT5cblx0XHRcdGNvdW50KysgIGlmIEBpc1NlbGVjdGFibGUocilcblx0XHRcdHJldHVyblxuXHRcdHJldHVybiBjb3VudFxuXG5cblx0c2VsZWN0QWxsOiAoc2lsZW50KSAtPlxuXHRcdHJlY29yZHMgPSBAc3RvcmUuZ2V0UmVjb3JkcygpXG5cdFx0QGRvU2VsZWN0IHJlY29yZHMsIHNpbGVudFxuXHRcdHJldHVyblxuXG5cdGRlc2VsZWN0QWxsOiAoc2lsZW50KSAtPlxuXHRcdHJlY29yZHMgPSBbXSAjIG5lbW96ZSBieXQgcHJlZGFuYSBwcmlhbW8gc2VsZWtjaWFcblx0XHRAZ2V0U2VsZWN0aW9uKCkuZWFjaCAocmVjb3JkKSAtPlxuXHRcdFx0cmVjb3Jkcy5wdXNoKHJlY29yZClcblx0XHRcdHJldHVyblxuXHRcdEBkb0Rlc2VsZWN0KHJlY29yZHMsIHNpbGVudClcblx0XHRyZXR1cm5cblxuXG5cdHNlbGVjdDogKHJlY29yZHMsIHNpbGVudCkgLT5cblx0XHRAZGVzZWxlY3RBbGwoKSAgaWYgQHR5cGUgaXMgXCJzaW5nbGVcIiBhbmQgQGhhc1NlbGVjdGlvbigpXG5cdFx0QGRvU2VsZWN0KHJlY29yZHMsIHNpbGVudClcblx0XHRyZXR1cm5cblxuXG5cdGRlc2VsZWN0OiAocmVjb3Jkcywgc2lsZW50KSAtPlxuXHRcdEBkb0Rlc2VsZWN0KHJlY29yZHMsIHNpbGVudClcblx0XHRyZXR1cm5cblxuXG5cdHRvZ2dsZTogKHJlY29yZHMsIHNpbGVudCkgLT5cblx0XHR0b1NlbGVjdCA9IFtdXG5cdFx0dG9EZXNlbGVjdCA9IFtdXG5cdFx0Zm9yIHJlY29yZCBpbiBBcnJheS5mcm9tKHJlY29yZHMpXG5cdFx0XHRpZiBAaXNTZWxlY3RlZChyZWNvcmQpIHRoZW4gdG9EZXNlbGVjdC5wdXNoKHJlY29yZCkgZWxzZSB0b1NlbGVjdC5wdXNoKHJlY29yZClcblx0XHRpZiB0b1NlbGVjdC5sZW5ndGggPiAwXG5cdFx0XHRAc2VsZWN0KHRvU2VsZWN0LCBzaWxlbnQpXG5cdFx0aWYgdG9EZXNlbGVjdC5sZW5ndGggPiAwXG5cdFx0XHRAZGVzZWxlY3QodG9EZXNlbGVjdCwgc2lsZW50KVxuXHRcdHJldHVyblxuXG5cblx0c2V0U2VsZWN0ZWQ6IChyZWNvcmRzLCBzZWxlY3QsIHNpbGVudCkgLT5cblx0XHR0aGlzWyhpZiBzZWxlY3QgdGhlbiBcInNlbGVjdFwiIGVsc2UgXCJkZXNlbGVjdFwiKV0ocmVjb3Jkcywgc2lsZW50KVxuXHRcdHJldHVyblxuXG5cblx0c2V0U2VsZWN0ZWRBbGw6IChzZWxlY3QsIHNpbGVudCkgLT5cblx0XHR0aGlzWyhpZiBzZWxlY3QgdGhlbiBcInNlbGVjdEFsbFwiIGVsc2UgXCJkZXNlbGVjdEFsbFwiKV0oc2lsZW50KVxuXHRcdHJldHVyblxuXG5cblx0ZG9TZWxlY3Q6IChyZWNvcmRzLCBzaWxlbnQpIC0+XG5cdFx0aWYgQGxvY2tlZCBvciBub3QgQHN0b3JlXG5cdFx0XHRyZXR1cm5cblx0XHRpZiB0eXBlb2YgcmVjb3JkcyBpcyBcIm51bWJlclwiXG5cdFx0XHRyZWNvcmRzID0gW0BzdG9yZS5nZXRBdChyZWNvcmRzKV1cblxuXHRcdEBzZWxlY3Rpb25DaGFuZ2VkID0gZmFsc2Vcblx0XHRBcnJheS5mcm9tKHJlY29yZHMpLmVhY2ggKHJlY29yZCkgPT5cblx0XHRcdGlmIEBpc1NlbGVjdGFibGUocmVjb3JkKVxuXHRcdFx0XHRpZiAhQGlzU2VsZWN0ZWQocmVjb3JkKVxuXHRcdFx0XHRcdEBzZWxlY3Rpb25DaGFuZ2VkID0gdHJ1ZVxuXHRcdFx0XHRcdEBzZWxlY3RlZC5pbmNsdWRlKHJlY29yZClcblx0XHRcdFx0XHRAZW1pdCgnc2VsZWN0JywgdGhpcywgcmVjb3JkLCBAc3RvcmUuaW5kZXhPZihyZWNvcmQpKSBpZiBAZW1pdEV2ZW50c1xuXHRcdFx0XHRAbGFzdFNlbGVjdGVkID0gcmVjb3JkXG5cdFx0XHRyZXR1cm5cblxuXHRcdGlmICFzaWxlbnRcblx0XHRcdEBjaGVja1NlbGVjdGlvbkNoYW5nZWQoKVxuXHRcdHJldHVyblxuXG5cblx0ZG9EZXNlbGVjdDogKHJlY29yZHMsIHNpbGVudCkgLT5cblx0XHRpZiBAbG9ja2VkIG9yIG5vdCBAc3RvcmVcblx0XHRcdHJldHVyblxuXHRcdGlmIHR5cGVvZiByZWNvcmRzIGlzIFwibnVtYmVyXCJcblx0XHRcdHJlY29yZHMgPSBbQHN0b3JlLmdldEF0KHJlY29yZHMpXVxuXG5cdFx0QHNlbGVjdGlvbkNoYW5nZWQgPSBmYWxzZVxuXHRcdEFycmF5LmZyb20ocmVjb3JkcykuZWFjaCAocmVjb3JkKSA9PlxuXHRcdFx0aWYgQGlzU2VsZWN0YWJsZShyZWNvcmQpXG5cdFx0XHRcdGlmIEBpc1NlbGVjdGVkKHJlY29yZClcblx0XHRcdFx0XHRAc2VsZWN0aW9uQ2hhbmdlZCA9IHRydWVcblx0XHRcdFx0XHRAc2VsZWN0ZWQuZXJhc2UocmVjb3JkKVxuXHRcdFx0XHRcdEBlbWl0KCdkZXNlbGVjdCcsIHRoaXMsIHJlY29yZCwgQHN0b3JlLmluZGV4T2YocmVjb3JkKSkgaWYgQGVtaXRFdmVudHNcblx0XHRcdHJldHVyblxuXG5cdFx0aWYgIXNpbGVudFxuXHRcdFx0QGNoZWNrU2VsZWN0aW9uQ2hhbmdlZCgpXG5cdFx0cmV0dXJuXG5cblxuXHRjaGVja1NlbGVjdGlvbkNoYW5nZWQ6IC0+XG5cdFx0aWYgQGVtaXRFdmVudHMgYW5kIEBzZWxlY3Rpb25DaGFuZ2VkXG5cdFx0XHRAZW1pdCgnY2hhbmdlJywgdGhpcywgQGdldFNlbGVjdGlvbigpKVxuXHRcdHJldHVyblxuXG5cblx0cmVmcmVzaDogLT5cblx0XHRyZWMgPSB1bmRlZmluZWRcblx0XHR0b0JlU2VsZWN0ZWQgPSBbXVxuXHRcdHRvQmVSZUFkZGVkID0gW11cblxuXHRcdCMgTm90IGJlZW4gYm91bmQgeWV0LlxuXHRcdGlmICFAc3RvcmVcblx0XHRcdHJldHVyblxuXG5cdFx0IyBBZGQgY3VycmVudGx5IHJlY29yZHMgdG8gdGhlIHRvQmVTZWxlY3RlZCBsaXN0IGlmIHByZXNlbnQgaW4gdGhlIFN0b3JlXG5cdFx0IyBJZiB0aGV5IGFyZSBub3QgcHJlc2VudCwgYW5kIHBydW5lUmVtb3ZlZCBpcyBmYWxzZSwgd2UgbXVzdCBzdGlsbCByZXRhaW4gdGhlIHJlY29yZFxuXHRcdGZvciBzZWxlY3Rpb24gaW4gQHNlbGVjdGVkXG5cdFx0XHRpZiBAc3RvcmUuaW5kZXhPZihzZWxlY3Rpb24pIGlzbnQgLTFcblx0XHRcdFx0cmVjID0gQHN0b3JlLmdldEJ5SWQoc2VsZWN0aW9uLmdldElkKCkpXG5cdFx0XHRcdHRvQmVTZWxlY3RlZC5wdXNoKHJlYykgIGlmIHJlY1xuXG5cdFx0XHQjIFNlbGVjdGVkIHJlY29yZHMgbm8gbG9uZ2VyIHJlcHJlc2VudGVkIGluIFN0b3JlIG11c3QgYmUgcmV0YWluZWRcblx0XHRcdGVsc2UgaWYgIUBwcnVuZVJlbW92ZWRcblx0XHRcdFx0IyBTZWUgaWYgYSByZWNvcmQgYnkgdGhlIHNhbWUgSUQgZXhpc3RzLiBJZiBzbywgc2VsZWN0IGl0XG5cdFx0XHRcdHJlYyA9IEBzdG9yZS5nZXRCeUlkKHNlbGVjdGlvbi5nZXRJZCgpKVxuXHRcdFx0XHRpZiByZWNcblx0XHRcdFx0XHR0b0JlU2VsZWN0ZWQucHVzaChyZWMpXG5cdFx0XHRcdCMgSWYgaXQgZG9lcyBub3QgZXhpc3QsIHdlIGhhdmUgdG8gcmUtYWRkIGl0IHRvIHRoZSBzZWxlY3Rpb25cblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdHRvQmVSZUFkZGVkLnB1c2goc2VsZWN0aW9uKVxuXG5cdFx0QGVtaXRFdmVudHMgPSBmYWxzZVxuXHRcdEBjbGVhclNlbGVjdGlvbnMoKVxuXG5cdFx0IyBwZXJmb3JtIHRoZSBzZWxlY3Rpb24gYWdhaW5cblx0XHRpZiB0b0JlU2VsZWN0ZWQubGVuZ3RoXG5cdFx0XHRAZG9TZWxlY3QodG9CZVNlbGVjdGVkLCB0cnVlKVxuXG5cdFx0IyBJZiBzb21lIG9mIHRoZSBzZWxlY3Rpb25zIHdlcmUgbm90IHByZXNlbnQgaW4gdGhlIFN0b3JlLCBidXQgcHJ1bmVSZW1vdmVkIGlzIGZhbHNlLCB3ZSBtdXN0IGFkZCB0aGVtIGJhY2tcblx0XHRpZiB0b0JlUmVBZGRlZC5sZW5ndGhcblx0XHRcdEBzZWxlY3Rpb24uYXBwZW5kKHRvQmVSZUFkZGVkKVxuXHRcdFx0IyBObyByZWNvcmRzIHJlc2VsZWN0ZWQuXG5cdFx0XHRpZiAhQGxhc3RTZWxlY3RlZFxuXHRcdFx0XHRAbGFzdFNlbGVjdGVkID0gdG9CZVJlQWRkZWRbdG9CZVJlQWRkZWQubGVuZ3RoIC0gMV1cblxuXHRcdEBlbWl0RXZlbnRzID0gdHJ1ZVxuXHRcdEBjaGVja1NlbGVjdGlvbkNoYW5nZWQoKVxuXHRcdHJldHVyblxuXG5cblx0ZG9EZXN0cm95OiAtPlxuXHRcdEBzdG9yZSA9IG51bGxcblx0XHRzdXBlcigpXG5cdFx0cmV0dXJuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBTZWxlY3Rpb25Nb2RlbCIsImNsYXNzIFNlbGVjdG9yRmFjdG9yeVxuXG5cdGRlZmluZXM6IG51bGxcblxuXG5cdGNvbnN0cnVjdG9yOiAoKSAtPlxuXHRcdEBkZWZpbmVzID0ge31cblxuXG5cdHJlZ2lzdGVyOiAobmFtZSwga2xhc3MpIC0+XG5cdFx0QGRlZmluZXNbbmFtZV0gPSBrbGFzc1xuXHRcdHJldHVyblxuXG5cblx0Y3JlYXRlOiAobmFtZSwgY29uZmlnKSAtPlxuXHRcdGlmICFAZGVmaW5lc1tuYW1lXVxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiU2VsZWN0b3Igd2l0aCBuYW1lICN7bmFtZX0gaXMgbm90IGRlZmluZWRcIilcblx0XHRyZXR1cm4gbmV3IEBkZWZpbmVzW25hbWVdKGNvbmZpZylcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gU2VsZWN0b3JGYWN0b3J5IiwibW9kdWxlLmV4cG9ydHMgPVxuXG5cdFNlbGVjdG9yRmFjdG9yeTogcmVxdWlyZSAnLi9TZWxlY3RvckZhY3RvcnknXG5cdEJhc2VTZWxlY3RvcjogcmVxdWlyZSAnLi9CYXNlU2VsZWN0b3InXG5cdFJvd1NlbGVjdG9yOiByZXF1aXJlICcuL1Jvd1NlbGVjdG9yJ1xuXHRDaGVja1NlbGVjdG9yOiByZXF1aXJlICcuL0NoZWNrU2VsZWN0b3InXG5cdFNlbGVjdGlvbk1vZGVsOiByZXF1aXJlICcuL1NlbGVjdGlvbk1vZGVsJyIsIlBhbmUgPSByZXF1aXJlICcuLi9wYW5lbC9QYW5lJ1xuXG5cbmNsYXNzIFRhYlBhbmVsIGV4dGVuZHMgUGFuZVxuXG5cdHRhYjogbnVsbFxuXHRiYXNlQ2xzOiAndGFiLXBhbmUnXG5cdHZpc2libGU6IGZhbHNlXG5cdHJvbGU6ICd0YWJwYW5lbCdcblxuXG5cdGRvSW5pdDogLT5cblx0XHRzdXBlcigpXG5cdFx0QHRhYiA9IG5ldyBFbGVtZW50KCdsaScsIHtyb2xlOiAncHJlc2VudGF0aW9uJ30pXG5cdFx0cmV0dXJuXG5cblxuXHRkb1JlbmRlcjogLT5cblx0XHRzdXBlcigpXG5cdFx0bGluayA9IG5ldyBFbGVtZW50KCdhJywgeydhcmlhLWNvbnRyb2xzJzogQGlkLCBocmVmOicjJytAbmFtZSwgcm9sZTondGFiJywgaHRtbDpAdGl0bGV9KVxuXHRcdGxpbmsuaW5qZWN0KEB0YWIpXG5cdFx0cmV0dXJuXG5cblxuXHRzZXRUaXRsZTogKEB0aXRsZSkgLT5cblx0XHRAdGFiLnNldCgnaHRtbCcsIHRpdGxlKVxuXHRcdHJldHVyblxuXG5cblx0bWFya0FjdGl2ZTogKGFjdGl2ZSkgLT5cblx0XHRAc2V0VmlzaWJsZShhY3RpdmUpXG5cdFx0QGVsLnRvZ2dsZUNsYXNzKCdhY3RpdmUnLCBhY3RpdmUpXG5cdFx0QHRhYi50b2dnbGVDbGFzcygnYWN0aXZlJywgYWN0aXZlKVxuXHRcdEBlbWl0KCdhY3RpdmUnLCB0aGlzLCBhY3RpdmUpXG5cdFx0cmV0dXJuXG5cblxuXHRzZXRBY3RpdmU6IC0+XG5cdFx0QGdldFBhcmVudCgpLnNldEFjdGl2ZShAbmFtZSlcblx0XHRyZXR1cm5cblxuXG5cdGRvRGVzdHJveTogLT5cblx0XHRAdGFiLmRlc3Ryb3koKVxuXHRcdHN1cGVyKClcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gVGFiUGFuZWwiLCJUYWJQYW5lbCA9IHJlcXVpcmUgJy4vVGFiUGFuZWwnXG5cblxuY2xhc3MgVGFicyBleHRlbmRzIE1pd28uQ29udGFpbmVyXG5cblx0eHR5cGU6ICd0YWJzJ1xuXHRhbGlnbjogJ3ZlcnRpY2FsJ1xuXHRhY3RpdmU6IG51bGxcblx0dGFic0VsOiBudWxsXG5cdHNjcm9sbGFibGU6IGZhbHNlXG5cblxuXHRkb0luaXQ6IC0+XG5cdFx0c3VwZXIoKVxuXHRcdGlmIEBhbGlnbiBpcyAndmVydGljYWwnXG5cdFx0XHRAaHRtbCA9XG5cdFx0XHQnPHVsIG1pd28tcmVmZXJlbmNlPVwidGFic0VsXCIgY2xhc3M9XCJuYXYgbmF2LXRhYnNcIiByb2xlPVwidGFibGlzdFwiPjwvdWw+Jytcblx0XHRcdCc8ZGl2IG1pd28tcmVmZXJlbmNlPVwiY29udGVudEVsXCIgY2xhc3M9XCJ0YWItY29udGVudFwiPjwvZGl2Pidcblx0XHRlbHNlIGlmIEBhbGlnbiBpcyAnaG9yaXpvbnRhbCdcblx0XHRcdEBodG1sID1cblx0XHRcdCc8ZGl2IGNsYXNzPVwicm93XCI+Jytcblx0XHRcdFx0JzxkaXYgY2xhc3M9XCJjb2wtc20tM1wiPicrXG5cdFx0XHRcdFx0Jzx1bCBtaXdvLXJlZmVyZW5jZT1cInRhYnNFbFwiIGNsYXNzPVwibmF2IG5hdi10YWJzXCIgcm9sZT1cInRhYmxpc3RcIj48L3VsPicrXG5cdFx0XHRcdCc8L2Rpdj4nK1xuXHRcdFx0XHQnPGRpdiBjbGFzcz1cImNvbC1zbS05XCI+Jytcblx0XHRcdFx0XHQnPGRpdiBtaXdvLXJlZmVyZW5jZT1cImNvbnRlbnRFbFwiIGNsYXNzPVwidGFiLWNvbnRlbnRcIj48L2Rpdj4nK1xuXHRcdFx0XHQnPC9kaXY+Jytcblx0XHRcdCc8L2Rpdj4nXG5cdFx0cmV0dXJuXG5cblxuXHRzZXRBY3RpdmU6IChuYW1lKSAtPlxuXHRcdGlmICFuYW1lICYmIEBmaXJzdENoaWxkKClcblx0XHRcdG5hbWUgPSBAZmlyc3RDaGlsZCgpLm5hbWVcblxuXHRcdHByZXZpb3VzID0gaWYgVHlwZS5pc1N0cmluZyhAYWN0aXZlKSB0aGVuIG51bGwgZWxzZSBAYWN0aXZlXG5cdFx0bmV4dCA9IGlmIG5hbWUgdGhlbiBAZ2V0KG5hbWUpIGVsc2UgbnVsbFxuXG5cdFx0aWYgcHJldmlvdXMgaXNudCBuZXh0XG5cdFx0XHRwcmV2aW91cy5tYXJrQWN0aXZlKGZhbHNlKSBpZiBwcmV2aW91c1xuXHRcdFx0bmV4dC5tYXJrQWN0aXZlKHRydWUpIGlmIG5leHRcblx0XHRcdEBlbWl0KCdhY3RpdmUnLCB0aGlzLCBuZXh0LCBwcmV2aW91cylcblx0XHRcdEBhY3RpdmUgPSBuZXh0XG5cdFx0cmV0dXJuXG5cblxuXHRnZXRBY3RpdmU6IC0+XG5cdFx0cmV0dXJuIEBhY3RpdmVcblxuXG5cdGFkZFBhbmVsOiAobmFtZSwgY29uZmlnKSAtPlxuXHRcdHJldHVybiBAYWRkKG5hbWUsIG5ldyBUYWJQYW5lbChjb25maWcpKVxuXG5cblx0YWRkZWRDb21wb25lbnQ6IChjb21wb25lbnQpIC0+XG5cdFx0aWYgIWNvbXBvbmVudC5zY3JvbGxhYmxlICYmIEBzY3JvbGxhYmxlXG5cdFx0XHRjb21wb25lbnQuc2V0U2Nyb2xsYWJsZSh0cnVlKVxuXHRcdHJldHVyblxuXG5cblx0ZG9SZW5kZXI6IC0+XG5cdFx0c3VwZXJcblx0XHRAZWwuYWRkQ2xhc3MoJ3RhYnMtJytAYWxpZ24pXG5cdFx0cmV0dXJuXG5cblxuXHRhZnRlclJlbmRlcjogLT5cblx0XHRzdXBlclxuXHRcdEBzZXRBY3RpdmUoQGFjdGl2ZSlcblx0XHRAbW9uKEBlbCwgJ2NsaWNrOnJlbGF5KC5uYXYgYSknLCAnb25UYWJDbGljaycpXG5cdFx0QHRhYnNFbC5zZXQoJ3JvbGUnLCd0YWJsaXN0Jylcblx0XHRyZXR1cm5cblxuXG5cdHJlbmRlckNvbXBvbmVudDogKGNvbXBvbmVudCkgLT5cblx0XHRzdXBlcihjb21wb25lbnQpXG5cdFx0Y29tcG9uZW50LnRhYi5pbmplY3QoQHRhYnNFbClcblx0XHRyZXR1cm5cblxuXG5cdHJlbW92ZWRDb21wb25lbnQ6IChjb21wb25lbnQpIC0+XG5cdFx0QHNldEFjdGl2ZSgpICBpZiBAYWN0aXZlIGlzIGNvbXBvbmVudC5uYW1lXG5cdFx0cmV0dXJuXG5cblxuXHRvblRhYkNsaWNrOiAoZXZlbnQsIHRhcmdldCkgLT5cblx0XHRldmVudC5zdG9wKClcblx0XHRAc2V0QWN0aXZlKHRhcmdldC5nZXQoJ2hyZWYnKS5yZXBsYWNlKCcjJywgJycpKVxuXHRcdHJldHVyblxuXG5cbm1vZHVsZS5leHBvcnRzID0gVGFicyIsIm1vZHVsZS5leHBvcnRzID1cblxuXHRUYWJzOiByZXF1aXJlICcuL1RhYnMnXG5cdFBhbmVsOiByZXF1aXJlICcuL1RhYlBhbmVsJ1xuXHRUYWJQYW5lbDogcmVxdWlyZSAnLi9UYWJQYW5lbCdcbiIsImNsYXNzIEJhc2VUaXAgZXh0ZW5kcyBNaXdvLkNvbnRhaW5lclxuXG5cdHh0eXBlOiAndGlwJ1xuXHRwbGFjZW1lbnQ6ICd0b3AnXG5cdGRpc3RhbmNlOiAwXG5cdHRhcmdldDogbnVsbFxuXHR0eXBlOiAnZGVmYXVsdCdcblx0ZGVsYXk6IG51bGxcblx0dmlzaWJsZTogZmFsc2VcblxuXG5cdGFmdGVySW5pdDogLT5cblx0XHRzdXBlcigpXG5cdFx0QHJlbmRlclRvID0gaWYgQHJlbmRlclRvIHRoZW4gJChAcmVuZGVyVG8pIGVsc2UgbWl3by5ib2R5XG5cdFx0cmV0dXJuXG5cblxuXHRhZnRlclJlbmRlcjogLT5cblx0XHRzdXBlcigpXG5cdFx0QGVsLm9uIFwibW91c2VlbnRlclwiLCA9PlxuXHRcdFx0QGVsLmFkZENsYXNzKFwiaG92ZXJcIilcblx0XHRcdEBlbWl0KCdtb3VzZWVudGVyJywgdGhpcylcblx0XHRcdHJldHVyblxuXG5cdFx0QGVsLm9uIFwibW91c2VsZWF2ZVwiLCA9PlxuXHRcdFx0QGVsLnJlbW92ZUNsYXNzKFwiaG92ZXJcIilcblx0XHRcdEBlbWl0KCdtb3VzZWxlYXZlJywgdGhpcylcblx0XHRcdHJldHVyblxuXHRcdHJldHVyblxuXG5cblx0c2hvdzogLT5cblx0XHRpZiBAdmlzaWJsZSB0aGVuIHJldHVyblxuXHRcdEB2aXNpYmxlID0gdHJ1ZVxuXHRcdEByZW5kZXIoKSBpZiAhQHJlbmRlcmVkXG5cdFx0aWYgQGRlbGF5XG5cdFx0XHRAZG9TaG93LmRlbGF5KEBkZWxheSwgdGhpcylcblx0XHRlbHNlXG5cdFx0XHRAZG9TaG93KClcblx0XHRyZXR1cm4gdGhpc1xuXG5cblx0ZG9TaG93OiAtPlxuXHRcdEBlbC5zaG93KClcblx0XHRAdXBkYXRlUG9zaXRpb24oKVxuXHRcdEBlbWl0KCdzaG93JywgdGhpcylcblx0XHRyZXR1cm5cblxuXG5cdGhpZGU6IC0+XG5cdFx0aWYgIUB2aXNpYmxlIHRoZW4gcmV0dXJuXG5cdFx0QHZpc2libGUgPSBmYWxzZVxuXHRcdEBlbWl0KCdoaWRlJywgdGhpcylcblx0XHRAZWwuaGlkZSgpXG5cdFx0cmV0dXJuIHRoaXNcblxuXG5cdGNsb3NlOiAtPlxuXHRcdGlmICFAdmlzaWJsZSB0aGVuIHJldHVyblxuXHRcdEBoaWRlKClcblx0XHRAZW1pdCgnY2xvc2UnLCB0aGlzKVxuXHRcdEBkZXN0cm95KClcblx0XHRyZXR1cm4gdGhpc1xuXG5cblx0aXNIb3ZlcjogLT5cblx0XHRyZXR1cm4gQGVsLmhhc0NsYXNzKFwiaG92ZXJcIilcblxuXG5cdGlzVmlzaWJsZTogLT5cblx0XHRyZXR1cm4gQGVsLmlzVmlzaWJsZSgpXG5cblxuXHR1cGRhdGVQb3NpdGlvbjogLT5cblx0XHRwb3MgPSBAdGFyZ2V0LmdldFBvc2l0aW9uKClcblx0XHRzaXplVGFyZ2V0ID0gQHRhcmdldC5nZXRTaXplKClcblx0XHRzaXplID0gQGVsLmdldFNpemUoKVxuXHRcdGRpc3RhbmNlID0gQGRpc3RhbmNlXG5cblx0XHRzd2l0Y2ggQHBsYWNlbWVudFxuXHRcdFx0d2hlbiBcInRvcFwiXG5cdFx0XHRcdEBlbC5zZXRQb3NpdGlvblxuXHRcdFx0XHRcdHg6IHBvcy54IC0gc2l6ZS54IC8gMiArIHNpemVUYXJnZXQueCAvIDJcblx0XHRcdFx0XHR5OiBwb3MueSAtIHNpemUueSAtIGRpc3RhbmNlXG5cblx0XHRcdHdoZW4gXCJib3R0b21cIlxuXHRcdFx0XHRAZWwuc2V0UG9zaXRpb25cblx0XHRcdFx0XHR4OiBwb3MueCAtIHNpemUueCAvIDIgKyBzaXplVGFyZ2V0LnggLyAyXG5cdFx0XHRcdFx0eTogcG9zLnkgKyBzaXplVGFyZ2V0LnkgKyBkaXN0YW5jZVxuXG5cdFx0XHR3aGVuIFwibGVmdFwiXG5cdFx0XHRcdEBlbC5zZXRQb3NpdGlvblxuXHRcdFx0XHRcdHg6IHBvcy54IC0gc2l6ZS54IC0gZGlzdGFuY2Vcblx0XHRcdFx0XHR5OiBwb3MueSArIHNpemVUYXJnZXQueSAvIDIgLSBzaXplLnkgLyAyXG5cblx0XHRcdHdoZW4gXCJyaWdodFwiXG5cdFx0XHRcdEBlbC5zZXRQb3NpdGlvblxuXHRcdFx0XHRcdHg6IHBvcy54ICsgc2l6ZVRhcmdldC54ICsgZGlzdGFuY2Vcblx0XHRcdFx0XHR5OiBwb3MueSArIHNpemVUYXJnZXQueSAvIDIgLSBzaXplLnkgLyAyXG5cdFx0cmV0dXJuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBCYXNlVGlwIiwiY2xhc3MgQmFzZVRpcE1hbmFnZXIgZXh0ZW5kcyBNaXdvLk9iamVjdFxuXG5cdHBsYWNlbWVudDogJ3RvcCdcblx0ZGlzdGFuY2U6IDNcblx0ZGVsYXk6IDUwMFxuXG5cdHRpcDogbnVsbFxuXHR0YXJnZXQ6IG51bGxcblxuXG5cdHNob3c6ICh0YXJnZXQsIGNvbmZpZykgLT5cblx0XHRpZiBAdGFyZ2V0IGlzIHRhcmdldCB0aGVuIHJldHVyblxuXHRcdGlmIEB0aXAgaXMgQHRpcFRvSGlkZSB0aGVuIEB0aXBUb0hpZGUgPSBudWxsXG5cdFx0aWYgQHRpcCB0aGVuIEBoaWRlKClcblxuXHRcdHRpcCA9IEBjcmVhdGUodGFyZ2V0LCBjb25maWcpXG5cdFx0aWYgIXRpcCB0aGVuIHJldHVyblxuXG5cdFx0QHRhcmdldCA9IHRhcmdldFxuXHRcdEB0aXAgPSB0aXBcblx0XHRAdGlwLnNob3coKVxuXHRcdEB0aXAub24gJ21vdXNlbGVhdmUnLCA9PiBAaGlkZSgpXG5cblx0XHRpZiB0YXJnZXQuZ2V0KFwidGl0bGVcIilcblx0XHRcdHRhcmdldC5zZXQoXCJkYXRhLXRpdGxlXCIsIHRhcmdldC5nZXQoXCJ0aXRsZVwiKSlcblx0XHRcdHRhcmdldC5zZXQoXCJ0aXRsZVwiLCBudWxsKVxuXG5cdFx0dGFyZ2V0Lm9uKFwibW91c2VsZWF2ZVwiLCBAYm91bmQoJ29uVGFyZ2V0TGVhdmUnKSlcblx0XHR0YXJnZXQub24oXCJtb3VzZWRvd25cIiwgQGJvdW5kKCdvblRhcmdldENsaWNrJykpXG5cdFx0cmV0dXJuXG5cblxuXHR0b2dnbGU6ICh0YXJnZXQpIC0+XG5cdFx0aWYgQHRpcCB0aGVuIEBoaWRlKCkgZWxzZSBAc2hvdyh0YXJnZXQpXG5cdFx0cmV0dXJuXG5cblxuXHRoaWRlOiAtPlxuXHRcdGlmICFAdGlwIHRoZW4gcmV0dXJuXG5cdFx0QHRpcC5kZXN0cm95KClcblx0XHRAdGlwID0gbnVsbFxuXHRcdEB0YXJnZXQudW4oXCJtb3VzZWxlYXZlXCIsIEBib3VuZCgnb25UYXJnZXRMZWF2ZScpKVxuXHRcdEB0YXJnZXQudW4oXCJjbGlja1wiLCBAYm91bmQoJ29uVGFyZ2V0Q2xpY2snKSlcblx0XHRAdGFyZ2V0ID0gbnVsbFxuXHRcdHJldHVyblxuXG5cblx0b25UYXJnZXRMZWF2ZTogLT5cblx0XHRAdGlwVG9IaWRlID0gQHRpcFxuXHRcdEB0YXJnZXQudW4oXCJtb3VzZWxlYXZlXCIsIEBib3VuZCgnb25UYXJnZXRMZWF2ZScpKVxuXHRcdCMgd2FpdCB1bnRpbCB1c2VyIG1vdmUgYnkgY3Vyc29yICh1c2VyIGNhbiBtb3ZlIG9uIHRpcCAtIHRpcCBzaG91bGQgbm90IGJlIGRlc3Ryb3llZClcblx0XHRzZXRUaW1lb3V0KCg9PlxuXHRcdFx0aWYgQHRpcFRvSGlkZSBhbmQgIUB0aXBUb0hpZGUuaXNIb3ZlcigpXG5cdFx0XHRcdCMgaWYgaG92ZXIgb24gdGlwLCB0aGVuIHRpcCBpcyBkZXN0cm95ZWQgd2hlbiBob3ZlciBpcyBsb3NlXG5cdFx0XHRcdEBoaWRlKClcblx0XHRcdHJldHVyblxuXHRcdCksIDIwMClcblx0XHRyZXR1cm5cblxuXG5cdG9uVGFyZ2V0Q2xpY2s6IC0+XG5cdFx0QHRvZ2dsZShAdGFyZ2V0KVxuXHRcdHJldHVyblxuXG5cbm1vZHVsZS5leHBvcnRzID0gQmFzZVRpcE1hbmFnZXIiLCJCYXNlVGlwID0gcmVxdWlyZSAnLi9CYXNlVGlwJ1xuU2NyZWVuTWFzayA9IHJlcXVpcmUgJy4uL3V0aWxzL1NjcmVlbk1hc2snXG5cblxuY2xhc3MgUG9wb3ZlciBleHRlbmRzIEJhc2VUaXBcblxuXHR4dHlwZTogJ3BvcG92ZXInXG5cdHRpdGxlOiAnJ1xuXHRjb250ZW50OiAnJ1xuXHRiYXNlQ2xzOiAncG9wb3Zlcidcblx0c2NyZWVuTWFzazogbnVsbFxuXHRjbG9zZU1vZGU6ICdjbG9zZSdcblx0cm9sZTogJ3Rvb2x0aXAnXG5cblxuXHRhZnRlckluaXQ6IC0+XG5cdFx0c3VwZXIoKVxuXHRcdEBzY3JlZW5NYXNrID0gbmV3IFNjcmVlbk1hc2sgPT5cblx0XHRcdEBzbGVlcCgpXG5cdFx0XHRyZXR1cm5cblx0XHRyZXR1cm5cblxuXG5cdGJlZm9yZVJlbmRlcjogLT5cblx0XHRzdXBlclxuXHRcdEBlbC5hZGRDbGFzcyhcImluICN7QHBsYWNlbWVudH0gcG9wb3Zlci0je0B0eXBlfVwiKVxuXHRcdEBlbC5zZXQgJ2h0bWwnLFxuXHRcdCc8ZGl2IGNsYXNzPVwiYXJyb3dcIj48L2Rpdj4nK1xuXHRcdCc8aDMgbWl3by1yZWZlcmVuY2U9XCJ0aXRsZUVsXCIgY2xhc3M9XCJwb3BvdmVyLXRpdGxlXCIgc3R5bGU9XCJkaXNwbGF5Om5vbmVcIj48L2gzPicrXG5cdFx0JzxkaXYgbWl3by1yZWZlcmVuY2U9XCJjb250ZW50RWxcIiBjbGFzcz1cInBvcG92ZXItY29udGVudFwiPjwvZGl2Pidcblx0XHRyZXR1cm5cblxuXG5cdHNob3c6IC0+XG5cdFx0QHNjcmVlbk1hc2suc2hvdygpXG5cdFx0bWl3by5ib2R5Lm9uICdrZXlkb3duJywgQGJvdW5kKCdvbktleURvd24nKVxuXHRcdHN1cGVyKClcblx0XHRyZXR1cm5cblxuXG5cdGhpZGU6IC0+XG5cdFx0bWl3by5ib2R5LnVuICdrZXlkb3duJywgQGJvdW5kKCdvbktleURvd24nKVxuXHRcdEBzY3JlZW5NYXNrLmhpZGUoKVxuXHRcdHN1cGVyKClcblx0XHRyZXR1cm5cblxuXG5cdHNsZWVwOiAtPlxuXHRcdGlmIEBjbG9zZU1vZGUgaXMgJ2hpZGUnIHRoZW4gQGhpZGUoKSBlbHNlIEBjbG9zZSgpXG5cdFx0cmV0dXJuXG5cblxuXHRhZnRlclJlbmRlcjogLT5cblx0XHRzdXBlclxuXHRcdEBzZXRUaXRsZShAdGl0bGUpIGlmIEB0aXRsZVxuXHRcdEBzZXRDb250ZW50KEBjb250ZW50KSBpZiBAY29udGVudFxuXHRcdHJldHVyblxuXG5cblx0b25LZXlEb3duOiAoZSkgLT5cblx0XHRpZiBlLmtleSBpcyAnZXNjJyB0aGVuIEBzbGVlcCgpXG5cdFx0cmV0dXJuXG5cblxuXHRzZXRUaXRsZTogKEB0aXRsZSkgLT5cblx0XHRpZiBAcmVuZGVyZWRcblx0XHRcdEB0aXRsZUVsLnNldChcImh0bWxcIiwgdGl0bGUpXG5cdFx0XHRAdGl0bGVFbC5zZXRWaXNpYmxlKHRpdGxlKVxuXHRcdFx0QHVwZGF0ZVBvc2l0aW9uKClcblx0XHRyZXR1cm5cblxuXG5cdHNldENvbnRlbnQ6IChAY29udGVudCkgLT5cblx0XHRpZiBAcmVuZGVyZWRcblx0XHRcdEBjb250ZW50RWwuc2V0KFwiaHRtbFwiLCBjb250ZW50KVxuXHRcdFx0QHVwZGF0ZVBvc2l0aW9uKClcblx0XHRyZXR1cm5cblxuXG5cdGFkZGVkQ29tcG9uZW50OiAoY29tcG9uZW50KSAtPlxuXHRcdGlmIEByZW5kZXJlZFxuXHRcdFx0QHVwZGF0ZVBvc2l0aW9uKClcblx0XHRyZXR1cm5cblxuXG5cdHJlbW92ZWRDb21wb25lbnQ6IChjb21wb25lbnQpIC0+XG5cdFx0aWYgQHJlbmRlcmVkXG5cdFx0XHRAdXBkYXRlUG9zaXRpb24oKVxuXHRcdHJldHVyblxuXG5cblx0ZG9EZXN0cm95OiAtPlxuXHRcdEBzY3JlZW5NYXNrLmRlc3Ryb3koKVxuXHRcdHN1cGVyKClcblx0XHRyZXR1cm5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IFBvcG92ZXIiLCJCYXNlVGlwTWFuYWdlciA9IHJlcXVpcmUgJy4vQmFzZVRpcE1hbmFnZXInXG5Qb3BvdmVyID0gcmVxdWlyZSAnLi9Qb3BvdmVyJ1xuXG5cbmNsYXNzIFBvcG92ZXJNYW5hZ2VyIGV4dGVuZHMgQmFzZVRpcE1hbmFnZXJcblxuXHRzZWxlY3RvcjogJ1tkYXRhLXRvZ2dsZT1cInBvcG92ZXJcIl0nXG5cblxuXHRjcmVhdGU6ICh0YXJnZXQsIGNvbmZpZz17fSkgLT5cblx0XHRpZiAhdGFyZ2V0XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJUYXJnZXQgaXMgbm90IGRlZmluZWRcIilcblxuXHRcdHRpdGxlID0gY29uZmlnLnRpdGxlIG9yIHRhcmdldC5nZXQoXCJkYXRhLXRpdGxlXCIpIG9yIHRhcmdldC5nZXQoXCJ0aXRsZVwiKVxuXHRcdGNvbnRlbnQgPSBjb25maWcuY29udGVudCBvciB0YXJnZXQuZ2V0KFwiZGF0YS1jb250ZW50XCIpIG9yICcnXG5cdFx0Y29udGFpbmVyID0gY29uZmlnLmNvbnRhaW5lciBvciB0YXJnZXQuZ2V0KFwiZGF0YS1jb250YWluZXJcIilcblx0XHRwbGFjZW1lbnQgPSBjb25maWcucGxhY2VtZW50IG9yIHRhcmdldC5nZXQoXCJkYXRhLXBsYWNlbWVudFwiKSBvciBAcGxhY2VtZW50XG5cdFx0ZGlzdGFuY2UgPSBjb25maWcuZGlzdGFuY2Ugb3IgdGFyZ2V0LmdldChcImRhdGEtZGlzdGFuY2VcIikgb3IgQGRpc3RhbmNlXG5cdFx0ZGVsYXkgPSBjb25maWcuZGVsYXkgb3IgdGFyZ2V0LmdldChcImRhdGEtZGVsYXlcIikgb3IgQGRlbGF5XG5cdFx0aWYgIXRpdGxlIHRoZW4gcmV0dXJuXG5cblx0XHRwb3BvdmVyID0gbmV3IFBvcG92ZXJcblx0XHRcdHRhcmdldDogdGFyZ2V0XG5cdFx0XHR0aXRsZTogdGl0bGVcblx0XHRcdGNvbnRlbnQ6IGNvbnRlbnRcblx0XHRcdGNvbnRhaW5lcjogY29udGFpbmVyXG5cdFx0XHRwbGFjZW1lbnQ6IHBsYWNlbWVudFxuXHRcdFx0ZGlzdGFuY2U6IGRpc3RhbmNlXG5cblx0XHRyZXR1cm4gcG9wb3ZlclxuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBQb3BvdmVyTWFuYWdlciIsIkJhc2VUaXAgPSByZXF1aXJlICcuL0Jhc2VUaXAnXG5cblxuY2xhc3MgVG9vbHRpcCBleHRlbmRzIEJhc2VUaXBcblxuXHR0ZXh0OiBudWxsXG5cdGJhc2VDbHM6ICd0b29sdGlwJ1xuXHRyb2xlOiAndG9vbHRpcCdcblxuXG5cdHNldFRleHQ6IChAdGV4dCkgLT5cblx0XHRpZiBAcmVuZGVyZWRcblx0XHRcdEBjb250ZW50RWwuc2V0KCdodG1sJywgQHRleHQpXG5cdFx0XHRAdXBkYXRlUG9zaXRpb24oKVxuXHRcdHJldHVybiB0aGlzXG5cblxuXHRiZWZvcmVSZW5kZXI6IC0+XG5cdFx0c3VwZXIoKVxuXHRcdEBlbC5hZGRDbGFzcyhcImluICN7QHBsYWNlbWVudH0gdG9vbHRpcC0je0B0eXBlfVwiKVxuXHRcdEBlbC5zZXQgJ2h0bWwnLCAnPGRpdiBjbGFzcz1cInRvb2x0aXAtYXJyb3dcIj48L2Rpdj48ZGl2IG1pd28tcmVmZXJlbmNlPVwiY29udGVudEVsXCIgY2xhc3M9XCJ0b29sdGlwLWlubmVyXCI+PC9kaXY+J1xuXHRcdHJldHVyblxuXG5cblx0YWZ0ZXJSZW5kZXI6IC0+XG5cdFx0c3VwZXIoKVxuXHRcdEBzZXRUZXh0KEB0ZXh0KSBpZiBAdGV4dFxuXHRcdHJldHVyblxuXG5cbm1vZHVsZS5leHBvcnRzID0gVG9vbHRpcCIsIkJhc2VUaXBNYW5hZ2VyID0gcmVxdWlyZSAnLi9CYXNlVGlwTWFuYWdlcidcblRvb2x0aXAgPSByZXF1aXJlICcuL1Rvb2x0aXAnXG5cblxuY2xhc3MgVG9vbHRpcE1hbmFnZXIgZXh0ZW5kcyBCYXNlVGlwTWFuYWdlclxuXG5cblx0Y3JlYXRlOiAodGFyZ2V0LCBjb25maWcgPSB7fSkgLT5cblx0XHRjb25maWcudGFyZ2V0ID0gdGFyZ2V0XG5cblx0XHRpZiAhY29uZmlnLnRleHRcblx0XHRcdGNvbmZpZy50ZXh0ID0gdGFyZ2V0LmdldChcImRhdGEtdGl0bGVcIikgb3IgdGFyZ2V0LmdldChcInRpdGxlXCIpXG5cblx0XHRpZiAhY29uZmlnLnBsYWNlbWVudFxuXHRcdFx0Y29uZmlnLnBsYWNlbWVudCA9IHRhcmdldC5nZXQoXCJkYXRhLXBsYWNlbWVudFwiKSBvciBAcGxhY2VtZW50XG5cblx0XHRpZiAhY29uZmlnLmRpc3RhbmNlXG5cdFx0XHRjb25maWcuZGlzdGFuY2UgPSB0YXJnZXQuZ2V0KFwiZGF0YS1kaXN0YW5jZVwiKSBvciBAZGlzdGFuY2VcblxuXHRcdGlmICFjb25maWcuaGFzT3duUHJvcGVydHkoJ2RlbGF5Jylcblx0XHRcdGNvbmZpZy5kZWxheSA9IHRhcmdldC5nZXQoXCJkYXRhLWRlbGF5XCIpIG9yIEBkZWxheVxuXG5cdFx0aWYgIWNvbmZpZy50ZXh0ICYmIChzZWxlY3RvciA9IHRhcmdldC5nZXQoJ2RhdGEtdGl0bGUtZWwnKSkgJiYgKGl0ZW0gPSB0YXJnZXQuZ2V0RWxlbWVudChzZWxlY3RvcikpXG5cdFx0XHRjb25maWcudGV4dCA9IGl0ZW0uZ2V0KCdodG1sJylcblxuXHRcdHRvb2x0aXAgPSBuZXcgVG9vbHRpcChjb25maWcpXG5cdFx0cmV0dXJuIHRvb2x0aXBcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gVG9vbHRpcE1hbmFnZXIiLCJtb2R1bGUuZXhwb3J0cyA9XG5cdEJhc2VUaXA6IHJlcXVpcmUgJy4vQmFzZVRpcCdcblx0UG9wb3ZlcjogcmVxdWlyZSAnLi9Qb3BvdmVyJ1xuXHRUb29sdGlwOiByZXF1aXJlICcuL1Rvb2x0aXAnIiwibW9kdWxlLmV4cG9ydHMgPVxuXHRuYXY6XG5cdFx0cHJldjogJ1ByZXZpb3VzJ1xuXHRcdG5leHQ6ICdOZXh0J1xuXHRcdGN1cnJlbnQ6ICdDdXJyZW50J1xuXHRncmlkOlxuXHRcdGV4ZWN1dGU6ICdEbydcblx0XHRjb25maXJtOiAnQ29uZmlybSdcblx0ZGlhbG9nOlxuXHRcdG9rOiAnT2snXG5cdFx0Y2FuY2VsOiAnQ2FuY2VsJ1xuXHR3aW5kb3c6XG5cdFx0Y2xvc2U6ICdDbG9zZSB3aW5kb3cnXG5cdFx0aGlkZTogJ0hpZGUgd2luZG93J1xuXHRwaWNrZXI6XG5cdFx0c2VsZWN0Q29sb3I6ICdTZWxlY3QgY29sb3InXG5cdFx0dG9kYXk6ICdUb2RheSdcblx0XHRjbGVhcjogJ0NsZWFyJ1xuXHRpbnB1dHM6XG5cdFx0ZGF0ZVRvOiAndG8nXG5cdFx0c3dpdGNoT246ICdPTidcblx0XHRzd2l0Y2hPZmY6ICdPRkYnXG5cdHBhZ2luYXRpb246XG5cdFx0cGFnZUluZm86ICdWaXNpYmxlOiB7dmlzaWJsZX0gVG90YWw6IHt0b3RhbH0nXG5cdHJ1bGVzOlxuXHRcdGZpbGxlZDogXCJQbGVhc2UgZW50ZXIgYWxsIHJlcXVpcmVkIHZhbHVlcy5cIlxuXHRcdHByb3RlY3Rpb246IFwiUGxlYXNlIHN1Ym1pdCB0aGlzIGZvcm0gYWdhaW4gKHNlY3VyaXR5IHRva2VuIGhhcyBleHBpcmVkKS5cIlxuXHRcdGVxdWFsOiBcIlBsZWFzZSBlbnRlciB7cGFyYW19LlwiXG5cdFx0bWluTGVuZ3RoOiBcIlBsZWFzZSBlbnRlciBhdCBsZWFzdCB7cGFyYW19IGNoYXJhY3RlcnMuXCJcblx0XHRtYXhMZW5ndGg6IFwiRW50ZXIgbW9yZSB0aGFuIHtwYXJhbX0gY2hhcmFjdGVycy5cIlxuXHRcdGxlbmd0aDogXCJFbnRlciBhIHZhbHVlIGJldHdlZW4ge3BhcmFtMH0gYW5kIHtwYXJhbTF9IGNoYXJhY3RlcnMgbG9uZy5cIlxuXHRcdGVtYWlsOiBcIkVudGVyIGEgdmFsaWQgZW1haWwuXCJcblx0XHRkYXRlOiBcIkVudGVyIGEgdmFsaWQgZGF0ZSBpbiBmb3JtYXQgWVlZWS1NTS1ERFwiXG5cdFx0dXJsOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIFVSTC5cIlxuXHRcdG51bWJlcjogXCJQbGVhc2UgZW50ZXIgYSBudW1lcmljIHZhbHVlLlwiXG5cdFx0aW50ZWdlcjogXCJQbGVhc2UgZW50ZXIgYSBudW1lcmljIHZhbHVlLlwiXG5cdFx0ZmxvYXQ6IFwiUGxlYXNlIGVudGVyIGEgbnVtZXJpYyB2YWx1ZS5cIlxuXHRcdHJhbmdlOiBcIlBsZWFzZSBlbnRlciBhIHZhbHVlIGJldHdlZW4ge3BhcmFtMH0gYW5kIHtwYXJhbTF9LlwiXG5cdFx0bWluOiBcIlBsZWFzZSBlbnRlciBhIHZhbHVlIGdyZWF0ZXIgb3IgZXF1YWwgdG8ge3BhcmFtfS5cIlxuXHRcdG1heDogXCJQbGVhc2UgZW50ZXIgYSB2YWx1ZSBsb3dlciBvciBlcXVhbCB0byB7cGFyYW19LlwiXG5cdFx0Y29sb3I6IFwiQmFkIGNvbG9yIGZvcm1hdC4gVXNlIGZvcm1hdCBlLmcuOiAjZmYwMGZmXCJcblx0XHRtYXhGaWxlU2l6ZTogXCJUaGUgc2l6ZSBvZiB0aGUgdXBsb2FkZWQgZmlsZSBjYW4gYmUgdXAgdG8gJWQgYnl0ZXMuXCJcblx0XHRpbWFnZTogXCJUaGUgdXBsb2FkZWQgZmlsZSBtdXN0IGJlIGEgSlBFRywgR0lGIG9yIFBORy5cIiIsImNsYXNzIENvbG9yXG5cdHI6IDBcblx0ZzogMFxuXHRiOiAwXG5cdGg6IDBcblx0czogMFxuXHR2OiAwXG5cdGhleDogXCJcIlxuXG5cdHNldFJnYjogKHIsIGcsIGIpIC0+XG5cdFx0QHIgPSByICBpZiByIGlzbnQgbnVsbFxuXHRcdEBnID0gZyAgaWYgZyBpc250IG51bGxcblx0XHRAYiA9IGIgIGlmIGIgaXNudCBudWxsXG5cdFx0aHN2ID0gQ29sb3IucmdiVG9Ic3YodGhpcylcblx0XHRAaCA9IGhzdi5oXG5cdFx0QHMgPSBoc3Yuc1xuXHRcdEB2ID0gaHN2LnZcblx0XHRAaGV4ID0gQ29sb3IucmdiVG9IZXgodGhpcylcblx0XHRyZXR1cm5cblxuXHRzZXRIc3Y6IChoLCBzLCB2KSAtPlxuXHRcdEBoID0gaCAgaWYgaCBpc250IG51bGxcblx0XHRAcyA9IHMgIGlmIHMgaXNudCBudWxsXG5cdFx0QHYgPSB2ICBpZiB2IGlzbnQgbnVsbFxuXHRcdHJnYiA9IENvbG9yLmhzdlRvUmdiKHRoaXMpXG5cdFx0QHIgPSByZ2IuclxuXHRcdEBnID0gcmdiLmdcblx0XHRAYiA9IHJnYi5iXG5cdFx0QGhleCA9IENvbG9yLnJnYlRvSGV4KHJnYilcblx0XHRyZXR1cm5cblxuXHRzZXRIZXg6IChoZXgpIC0+XG5cdFx0QGhleCA9IGhleFxuXHRcdHJnYiA9IENvbG9yLmhleFRvUmdiKEBoZXgpXG5cdFx0QHIgPSByZ2IuclxuXHRcdEBnID0gcmdiLmdcblx0XHRAYiA9IHJnYi5iXG5cdFx0aHN2ID0gQ29sb3IucmdiVG9Ic3YocmdiKVxuXHRcdEBoID0gaHN2Lmhcblx0XHRAcyA9IGhzdi5zXG5cdFx0QHYgPSBoc3YudlxuXHRcdHJldHVyblxuXG5cblxuQ29sb3IuZnJvbVJnYiA9IChyLCBnLCBiKSAtPlxuXHRvYmplY3QgPSBuZXcgQ29sb3IoKVxuXHRvYmplY3Quc2V0UmdiIHIsIGcsIGJcblx0cmV0dXJuIG9iamVjdFxuXG5cbkNvbG9yLmZyb21Ic3YgPSAoaCwgcywgdikgLT5cblx0b2JqZWN0ID0gbmV3IENvbG9yKClcblx0b2JqZWN0LnNldEhzdiBoLCBzLCB2XG5cdHJldHVybiBvYmplY3RcblxuXG5Db2xvci5mcm9tSGV4ID0gKGhleCkgLT5cblx0b2JqZWN0ID0gbmV3IENvbG9yKClcblx0b2JqZWN0LnNldEhleCBoZXhcblx0cmV0dXJuIG9iamVjdFxuXG5cbkNvbG9yLnJnYlRvSGV4ID0gKHJnYikgLT5cblx0cmV0dXJuIEBpbnRUb0hleChyZ2IucikgKyBAaW50VG9IZXgocmdiLmcpICsgQGludFRvSGV4KHJnYi5iKVxuXG5cbkNvbG9yLmhleFRvUmdiID0gKGhleCkgLT5cblx0ciA9IFwiMDBcIlxuXHRnID0gXCIwMFwiXG5cdGIgPSBcIjAwXCJcblx0aWYgaGV4Lmxlbmd0aCBpcyA2XG5cdFx0ciA9IGhleC5zdWJzdHJpbmcoMCwgMilcblx0XHRnID0gaGV4LnN1YnN0cmluZygyLCA0KVxuXHRcdGIgPSBoZXguc3Vic3RyaW5nKDQsIDYpXG5cdGVsc2Vcblx0XHRpZiBoZXgubGVuZ3RoID4gNFxuXHRcdFx0ciA9IGhleC5zdWJzdHJpbmcoNCwgaGV4Lmxlbmd0aClcblx0XHRcdGhleCA9IGhleC5zdWJzdHJpbmcoMCwgNClcblx0XHRpZiBoZXgubGVuZ3RoID4gMlxuXHRcdFx0ZyA9IGhleC5zdWJzdHJpbmcoMiwgaGV4Lmxlbmd0aClcblx0XHRcdGhleCA9IGhleC5zdWJzdHJpbmcoMCwgMilcblx0XHRiID0gaGV4LnN1YnN0cmluZygwLCBoZXgubGVuZ3RoKSAgaWYgaGV4Lmxlbmd0aCA+IDBcblx0cmV0dXJuIHtcblx0XHRyOiBAaGV4VG9JbnQocilcblx0XHRnOiBAaGV4VG9JbnQoZylcblx0XHRiOiBAaGV4VG9JbnQoYilcblx0fVxuXG5cbkNvbG9yLmhzdlRvUmdiID0gKGhzdikgLT5cblx0cmdiID1cblx0XHRyOiAwXG5cdFx0ZzogMFxuXHRcdGI6IDBcblxuXHRoID0gaHN2Lmhcblx0cyA9IGhzdi5zXG5cdHYgPSBoc3YudlxuXHRpZiBzIGlzIDBcblx0XHRpZiB2IGlzIDBcblx0XHRcdHJnYi5yID0gcmdiLmcgPSByZ2IuYiA9IDBcblx0XHRlbHNlXG5cdFx0XHRyZ2IuciA9IHJnYi5nID0gcmdiLmIgPSBwYXJzZUludCh2ICogMjU1IC8gMTAwLCAxMClcblx0ZWxzZVxuXHRcdGggPSAwICBpZiBoIGlzIDM2MFxuXHRcdGggLz0gNjBcblxuXHRcdCMgMTAwIHNjYWxlXG5cdFx0cyA9IHMgLyAxMDBcblx0XHR2ID0gdiAvIDEwMFxuXHRcdGkgPSBwYXJzZUludChoLCAxMClcblx0XHRmID0gaCAtIGlcblx0XHRwID0gdiAqICgxIC0gcylcblx0XHRxID0gdiAqICgxIC0gKHMgKiBmKSlcblx0XHR0ID0gdiAqICgxIC0gKHMgKiAoMSAtIGYpKSlcblx0XHRzd2l0Y2ggaVxuXHRcdFx0d2hlbiAwXG5cdFx0XHRcdHJnYi5yID0gdlxuXHRcdFx0XHRyZ2IuZyA9IHRcblx0XHRcdFx0cmdiLmIgPSBwXG5cdFx0XHR3aGVuIDFcblx0XHRcdFx0cmdiLnIgPSBxXG5cdFx0XHRcdHJnYi5nID0gdlxuXHRcdFx0XHRyZ2IuYiA9IHBcblx0XHRcdHdoZW4gMlxuXHRcdFx0XHRyZ2IuciA9IHBcblx0XHRcdFx0cmdiLmcgPSB2XG5cdFx0XHRcdHJnYi5iID0gdFxuXHRcdFx0d2hlbiAzXG5cdFx0XHRcdHJnYi5yID0gcFxuXHRcdFx0XHRyZ2IuZyA9IHFcblx0XHRcdFx0cmdiLmIgPSB2XG5cdFx0XHR3aGVuIDRcblx0XHRcdFx0cmdiLnIgPSB0XG5cdFx0XHRcdHJnYi5nID0gcFxuXHRcdFx0XHRyZ2IuYiA9IHZcblx0XHRcdHdoZW4gNVxuXHRcdFx0XHRyZ2IuciA9IHZcblx0XHRcdFx0cmdiLmcgPSBwXG5cdFx0XHRcdHJnYi5iID0gcVxuXHRcdHJnYi5yID0gcGFyc2VJbnQocmdiLnIgKiAyNTUsIDEwKVxuXHRcdHJnYi5nID0gcGFyc2VJbnQocmdiLmcgKiAyNTUsIDEwKVxuXHRcdHJnYi5iID0gcGFyc2VJbnQocmdiLmIgKiAyNTUsIDEwKVxuXHRyZXR1cm4gcmdiXG5cblxuQ29sb3IucmdiVG9Ic3YgPSAocmdiKSAtPlxuXHRyID0gcmdiLnIgLyAyNTVcblx0ZyA9IHJnYi5nIC8gMjU1XG5cdGIgPSByZ2IuYiAvIDI1NVxuXHRoc3YgPVxuXHRcdGg6IDBcblx0XHRzOiAwXG5cdFx0djogMFxuXG5cdG1pbiA9IDBcblx0bWF4ID0gMFxuXHRpZiByID49IGcgYW5kIHIgPj0gYlxuXHRcdG1heCA9IHJcblx0XHRtaW4gPSAoaWYgKGcgPiBiKSB0aGVuIGIgZWxzZSBnKVxuXHRlbHNlIGlmIGcgPj0gYiBhbmQgZyA+PSByXG5cdFx0bWF4ID0gZ1xuXHRcdG1pbiA9IChpZiAociA+IGIpIHRoZW4gYiBlbHNlIHIpXG5cdGVsc2Vcblx0XHRtYXggPSBiXG5cdFx0bWluID0gKGlmIChnID4gcikgdGhlbiByIGVsc2UgZylcblx0aHN2LnYgPSBtYXhcblx0aHN2LnMgPSAoaWYgKG1heCkgdGhlbiAoKG1heCAtIG1pbikgLyBtYXgpIGVsc2UgMClcblx0dW5sZXNzIGhzdi5zXG5cdFx0aHN2LmggPSAwXG5cdGVsc2Vcblx0XHRkZWx0YSA9IG1heCAtIG1pblxuXHRcdGlmIHIgaXMgbWF4XG5cdFx0XHRoc3YuaCA9IChnIC0gYikgLyBkZWx0YVxuXHRcdGVsc2UgaWYgZyBpcyBtYXhcblx0XHRcdGhzdi5oID0gMiArIChiIC0gcikgLyBkZWx0YVxuXHRcdGVsc2Vcblx0XHRcdGhzdi5oID0gNCArIChyIC0gZykgLyBkZWx0YVxuXHRcdGhzdi5oID0gcGFyc2VJbnQoaHN2LmggKiA2MCwgMTApXG5cdFx0aHN2LmggKz0gMzYwICBpZiBoc3YuaCA8IDBcblx0aHN2LnMgPSBwYXJzZUludChoc3YucyAqIDEwMCwgMTApXG5cdGhzdi52ID0gcGFyc2VJbnQoaHN2LnYgKiAxMDAsIDEwKVxuXHRyZXR1cm4gaHN2XG5cblxuQ29sb3IuaGV4VG9JbnQgPSAoaGV4KSAtPlxuXHRyZXR1cm4gcGFyc2VJbnQoaGV4LCAxNilcblxuXG5Db2xvci5pbnRUb0hleCA9IChkZWMpIC0+XG5cdHJlc3VsdCA9IChwYXJzZUludChkZWMsIDEwKS50b1N0cmluZygxNikpXG5cdHJlc3VsdCA9IChcIjBcIiArIHJlc3VsdCkgIGlmIHJlc3VsdC5sZW5ndGggaXMgMVxuXHRyZXR1cm4gcmVzdWx0LnRvVXBwZXJDYXNlKClcblxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbG9yIiwiY2xhc3MgUGFnaW5hdG9yIGV4dGVuZHMgTWl3by5PYmplY3RcblxuXHRiYXNlOiAxXG5cdGl0ZW1zUGVyUGFnZTogMVxuXHRwYWdlOiBudWxsXG5cdGl0ZW1Db3VudDogbnVsbFxuXG5cblx0Z2V0Rmlyc3RQYWdlOiAtPlxuXHRcdHJldHVybiBAYmFzZVxuXG5cblx0Z2V0TGFzdFBhZ2U6IC0+XG5cdFx0cmV0dXJuIGlmIEBpdGVtQ291bnQgaXMgbnVsbCB0aGVuIG51bGwgZWxzZSBAYmFzZSArIE1hdGgubWF4KDAsIEBnZXRQYWdlQ291bnQoKS0xKVxuXG5cblx0aXNGaXJzdDogLT5cblx0XHRyZXR1cm4gQHBhZ2UgaXMgMSB8fCBAcGFnZSBpcyBudWxsXG5cblxuXHRpc0xhc3Q6IC0+XG5cdFx0cmV0dXJuIGlmIEBpdGVtQ291bnQgaXMgbnVsbCB0aGVuIHRydWUgZWxzZSBAcGFnZSBpcyBAZ2V0TGFzdFBhZ2UoKVxuXG5cblx0Z2V0UGFnZUNvdW50OiAtPlxuXHRcdHJldHVybiBpZiBAaXRlbUNvdW50IGlzIG51bGwgdGhlbiBudWxsIGVsc2UgTWF0aC5jZWlsKEBpdGVtQ291bnQgLyBAaXRlbXNQZXJQYWdlKVxuXG5cblx0c2V0SXRlbXNQZXJQYWdlOiAoaXRlbXNQZXJQYWdlKS0+XG5cdFx0QGl0ZW1zUGVyUGFnZSA9IE1hdGgubWF4KDEsIHBhcnNlSW50KGl0ZW1zUGVyUGFnZSkpXG5cdFx0QGVtaXQoJ2l0ZW1zcGVycGFnZScsIHRoaXMsIEBpdGVtc1BlclBhZ2UpXG5cdFx0cmV0dXJuIHRoaXNcblxuXG5cdHNldEl0ZW1Db3VudDogKGl0ZW1Db3VudCktPlxuXHRcdEBpdGVtQ291bnQgPSBNYXRoLm1heCgwLCBwYXJzZUludChpdGVtQ291bnQpKVxuXHRcdEBlbWl0KCdpdGVtY291bnQnLCB0aGlzLCBAaXRlbUNvdW50KVxuXHRcdHJldHVybiB0aGlzXG5cblxuXHRzZXRQYWdlOiAocGFnZSkgLT5cblx0XHRwYWdlID0gcGFyc2VJbnQocGFnZSlcblx0XHRpZiBwYWdlIGlzbnQgQHBhZ2Vcblx0XHRcdEBwYWdlID0gcGFnZVxuXHRcdFx0QGVtaXQoJ3BhZ2UnLCB0aGlzLCBAcGFnZSlcblx0XHRyZXR1cm4gdGhpc1xuXG5cbm1vZHVsZS5leHBvcnRzID0gUGFnaW5hdG9yIiwiY2xhc3MgU2NyZWVuTWFza1xuXG5cblx0Y29uc3RydWN0b3I6IChoYW5kbGVyKSAtPlxuXHRcdEBlbCA9IG5ldyBFbGVtZW50KCdkaXYnLCB7Y2xzOiAnc2NyZWVuLW1hc2snfSlcblx0XHRAZWwub24gJ2NsaWNrJywgKGV2ZW50KSA9PlxuXHRcdFx0ZXZlbnQuc3RvcCgpXG5cdFx0XHRoYW5kbGVyKClcblx0XHRcdHJldHVyblxuXHRcdHJldHVyblxuXG5cblx0c2hvdzogLT5cblx0XHRAZWwuaW5qZWN0KG1pd28uYm9keSlcblx0XHRyZXR1cm5cblxuXG5cdGhpZGU6IC0+XG5cdFx0QGVsLmRpc3Bvc2UoKVxuXHRcdHJldHVyblxuXG5cblx0ZGVzdHJveTogLT5cblx0XHRAaGlkZSgpXG5cdFx0QGVsLmRlc3Ryb3koKVxuXHRcdHJldHVyblxuXG5cbm1vZHVsZS5leHBvcnRzID0gU2NyZWVuTWFzayIsIm1vZHVsZS5leHBvcnRzID1cblxuXHRTY3JlZW5NYXNrOiByZXF1aXJlICcuL1NjcmVlbk1hc2snXG5cdENvbG9yOiByZXF1aXJlICcuL0NvbG9yJyIsIldpbmRvdyA9IHJlcXVpcmUgJy4vV2luZG93J1xuXG5cbmNsYXNzIERpYWxvZyBleHRlbmRzIFdpbmRvd1xuXG5cdHh0eXBlOiAnZGlhbG9nJ1xuXHRyb2xlOiAnZGlhbG9nJ1xuXG5cblx0YmVmb3JlSW5pdDogKCkgLT5cblx0XHRzdXBlcigpXG5cdFx0QGNsb3NlT25DbGlja091dCA9IHRydWVcblx0XHRAY2xvc2VNb2RlID0gXCJjbG9zZVwiXG5cdFx0QGNvbXBvbmVudENscyA9IFwibWl3by1kaWFsb2dcIlxuXHRcdHJldHVyblxuXG5cblx0YWZ0ZXJSZW5kZXI6IC0+XG5cdFx0c3VwZXIoKVxuXHRcdEBrZXlMaXN0ZW5lci5vbiAnZW50ZXInLCAoKSA9PlxuXHRcdFx0Zm9yIGJ1dHRvbiBpbiBAYnV0dG9uc1xuXHRcdFx0XHRpZiBidXR0b24udHlwZSBpcyAncHJpbWFyeSdcblx0XHRcdFx0XHRidXR0b24uY2xpY2soKVxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRyZXR1cm5cblx0XHRyZXR1cm5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IERpYWxvZyIsIkRpYWxvZyA9IHJlcXVpcmUgJy4vRGlhbG9nJ1xuQnV0dG9uID0gcmVxdWlyZSAnLi4vYnV0dG9ucy9CdXR0b24nXG5cblxuY2xhc3MgRGlhbG9nRmFjdG9yeVxuXG5cblx0Y3JlYXRlRGlhbG9nOiAodGl0bGUsIG1lc3NhZ2UsIGJ1dHRvbnMpIC0+XG5cdFx0ZGlhbG9nID0gbmV3IERpYWxvZygpXG5cdFx0ZGlhbG9nLnJlbmRlcihtaXdvLmJvZHkpXG5cdFx0ZGlhbG9nLnNldFRpdGxlKHRpdGxlKVxuXHRcdGRpYWxvZy5zZXRDb250ZW50KFwiPHAgY2xhc3M9J3RleHQtY2VudGVyJz5cIiArIG1lc3NhZ2UgKyBcIjwvcD5cIilcblx0XHRkaWFsb2cuc2V0QnV0dG9ucyhidXR0b25zKVxuXHRcdGRpYWxvZy5zaG93KClcblx0XHRyZXR1cm4gZGlhbG9nXG5cblxuXHRhbGVydDogKHRpdGxlLCBtZXNzYWdlLCBjYiwgYnRuVGV4dCkgLT5cblx0XHRva0J0biA9IG5ldyBCdXR0b25cblx0XHRcdG5hbWU6ICdvaydcblx0XHRcdHR5cGU6IFwicHJpbWFyeVwiXG5cdFx0XHR0ZXh0OiAoaWYgYnRuVGV4dCB0aGVuIGJ0blRleHQgZWxzZSBtaXdvLnRyKFwibWl3by5kaWFsb2cub2tcIikpXG5cdFx0XHRoYW5kbGVyOiAoKS0+XG5cdFx0XHRcdGlmIGNiIHRoZW4gY2IodHJ1ZSlcblx0XHRcdFx0ZGlhbG9nLmNsb3NlKClcblx0XHRcdFx0cmV0dXJuXG5cblx0XHRkaWFsb2cgPSBAY3JlYXRlRGlhbG9nKHRpdGxlLCBtZXNzYWdlLCBbb2tCdG5dKVxuXHRcdHJldHVybiBkaWFsb2dcblxuXG5cdHByb21wdDogKHRpdGxlLCBtZXNzYWdlLCBjYiwgb2tCdG5UZXh0LCBub0J0blRleHQpIC0+XG5cdFx0b2tCdG4gPSBuZXcgQnV0dG9uXG5cdFx0XHRuYW1lOiAnb2snXG5cdFx0XHR0eXBlOiBcInByaW1hcnlcIlxuXHRcdFx0dGV4dDogKGlmIG9rQnRuVGV4dCB0aGVuIG9rQnRuVGV4dCBlbHNlIG1pd28udHIoXCJtaXdvLmRpYWxvZy5va1wiKSlcblx0XHRcdGhhbmRsZXI6ICgpLT5cblx0XHRcdFx0aWYgY2IgdGhlbiBjYih0cnVlKVxuXHRcdFx0XHRkaWFsb2cuY2xvc2UoKVxuXHRcdFx0XHRyZXR1cm5cblxuXHRcdGNhbmNlbEJ0biA9IG5ldyBCdXR0b25cblx0XHRcdG5hbWU6ICdjYW5jZWwnXG5cdFx0XHR0eXBlOiAnZGVmYXVsdCdcblx0XHRcdHRleHQ6IChpZiBub0J0blRleHQgdGhlbiBub0J0blRleHQgZWxzZSBtaXdvLnRyKFwibWl3by5kaWFsb2cuY2FuY2VsXCIpKVxuXHRcdFx0aGFuZGxlcjogKCktPlxuXHRcdFx0XHRpZiBjYiB0aGVuIGNiKGZhbHNlKVxuXHRcdFx0XHRkaWFsb2cuY2xvc2UoKVxuXHRcdFx0XHRyZXR1cm5cblxuXHRcdGRpYWxvZyA9IEBjcmVhdGVEaWFsb2codGl0bGUsIG1lc3NhZ2UsIFtva0J0bixjYW5jZWxCdG5dKVxuXHRcdHJldHVybiBkaWFsb2dcblxuXG5cdHByb21wdElmOiAodGl0bGUsIG1lc3NhZ2UsIGNiLCBva0J0blRleHQsIG5vQnRuVGV4dCkgLT5cblx0XHRkaWFsb2cgPSBAcHJvbXB0IHRpdGxlLCBtZXNzYWdlLCAoKHN0YXRlKSAtPlxuXHRcdFx0aWYgY2IgYW5kIHN0YXRlIHRoZW4gY2IoKVxuXHRcdFx0cmV0dXJuXG5cdFx0KSwgb2tCdG5UZXh0LCBub0J0blRleHRcblx0XHRyZXR1cm4gZGlhbG9nXG5cblxubW9kdWxlLmV4cG9ydHMgPSBEaWFsb2dGYWN0b3J5IiwiV2luZG93ID0gcmVxdWlyZSAnLi9XaW5kb3cnXG5Gb3JtID0gcmVxdWlyZSAnLi4vZm9ybS9jb250YWluZXIvRm9ybSdcblxuXG5jbGFzcyBGb3JtV2luZG93IGV4dGVuZHMgV2luZG93XG5cblx0IyBAZXZlbnQgc3VibWl0IEZvcm1XaW5kb3csIEZvcm1cblx0IyBAZXZlbnQgc3VjY2VzcyBGb3JtV2luZG93LCBGb3JtXG5cdCMgQGV2ZW50IGZhaWx1cmUgRm9ybVdpbmRvdywgRm9ybVxuXG5cdEBnZXR0ZXIgJ2Zvcm0nLCAoKSAtPiBAZ2V0Rm9ybSgpXG5cblxuXHRkb0luaXQ6IC0+XG5cdFx0c3VwZXJcblx0XHRmb3JtID0gQGFkZCAnZm9ybScsIG5ldyBGb3JtXG5cdFx0Zm9ybS5vbignc3VibWl0JywgKGZvcm0sIGlzVmFsaWQpPT4gQGVtaXQoJ3N1Ym1pdCcsIHRoaXMsIGZvcm0sIGlzVmFsaWQpKVxuXHRcdGZvcm0ub24oJ3N1Y2Nlc3MnLCAoZm9ybSk9PiBAZW1pdCgnc3VjY2VzcycsIHRoaXMsIGZvcm0pKVxuXHRcdGZvcm0ub24oJ2ZhaWx1cmUnLCAoZm9ybSk9PiBAZW1pdCgnZmFpbHVyZScsIHRoaXMsIGZvcm0pKVxuXHRcdHJldHVyblxuXG5cblx0Z2V0Rm9ybTogLT5cblx0XHRyZXR1cm4gQGdldCgnZm9ybScpXG5cblxuXHRzZXRGb2N1czogLT5cblx0XHRzdXBlcigpXG5cdFx0QGdldEZvcm0oKS5nZXRGb2N1c0NvbnRyb2woKS5zZXRGb2N1cygpXG5cdFx0cmV0dXJuXG5cblxuXHRhZGRTdWJtaXRCdXR0b246ICh0ZXh0KSAtPlxuXHRcdHJldHVybiBAYWRkQnV0dG9uICdzdWJtaXQnLFxuXHRcdFx0dGV4dDogdGV4dFxuXHRcdFx0dHlwZTogJ3ByaW1hcnknXG5cdFx0XHRoYW5kbGVyOiAoKSA9PiBAZ2V0Rm9ybSgpLnN1Ym1pdCgpXG5cblxubW9kdWxlLmV4cG9ydHMgPSBGb3JtV2luZG93IiwiQnV0dG9uID0gcmVxdWlyZSAnLi4vYnV0dG9ucy9CdXR0b24nXG5Ub29sQnV0dG9uID0gcmVxdWlyZSAnLi4vYnV0dG9ucy9Ub29sQnV0dG9uJ1xuXG5jbGFzcyBXaW5kb3cgZXh0ZW5kcyBNaXdvLkNvbnRhaW5lclxuXG5cdGlzV2luZG93OiB0cnVlXG5cdHh0eXBlOiAnd2luZG93J1xuXHRiYXNlQ2xzOiAnd2luZG93J1xuXHRjbG9zZU1vZGU6ICdoaWRlJ1xuXHRjbG9zZU9uQ2xpY2tPdXQ6IHRydWVcblx0Y2xvc2VPbkVzYzogdHJ1ZVxuXHRjbG9zZWFibGU6IHRydWVcblx0bWluaW1pemFibGU6IGZhbHNlXG5cdHRpdGxlOiAnJ1xuXHRhdXRvQ2VudGVyOiB0cnVlXG5cdHByZXZlbnRBdXRvUmVuZGVyOiB0cnVlXG5cdHdpZHRoOiA2MDBcblx0dG9wOiAzMFxuXG5cdCMgVHJ1ZSB0byBtYWtlIHRoZSB3aW5kb3cgbW9kYWwgYW5kIG1hc2sgZXZlcnl0aGluZyBiZWhpbmQgaXQgd2hlbiBkaXNwbGF5ZWQsIGZhbHNlXG5cdCMgdG8gZGlzcGxheSBpdCB3aXRob3V0IHJlc3RyaWN0aW5nIGFjY2VzcyB0byBvdGhlciBVSSBlbGVtZW50cy5cblx0IyBAY29uZmlnIHtCb29sZWFufVxuXHRtb2RhbDogdHJ1ZVxuXHR6SW5kZXhNYW5hZ2U6IHRydWVcblx0dmlzaWJsZTogZmFsc2VcblxuXHRidXR0b25zOiBudWxsXG5cdHRpdGxlRWw6IG51bGxcblx0Y29udGVudEVsOiBudWxsXG5cdGZvb3RlckVsOiBudWxsXG5cdHRvb2xzRWw6IG51bGxcblx0a2V5TGlzdGVuZXI6IG51bGxcblx0dG9vbHM6IG51bGxcblxuXG5cdGJlZm9yZUluaXQ6IC0+XG5cdFx0c3VwZXIoKVxuXHRcdEByZW5kZXJUbyA9IG1pd28uYm9keVxuXHRcdEBidXR0b25zID0gbmV3IE1pd28udXRpbHMuQ29sbGVjdGlvbigpXG5cdFx0QHRvb2xzID0gbmV3IE1pd28udXRpbHMuQ29sbGVjdGlvbigpXG5cdFx0cmV0dXJuXG5cblxuXHRhZnRlckluaXQ6IC0+XG5cdFx0c3VwZXIoKVxuXHRcdG1pd28ud2luZG93TWdyLnJlZ2lzdGVyKHRoaXMpXG5cdFx0QGNvbnRlbnRIZWlnaHQgPSBAaGVpZ2h0XG5cdFx0QGhlaWdodCA9IG51bGxcblxuXHRcdEBrZXlMaXN0ZW5lciA9IG5ldyBNaXdvLnV0aWxzLktleUxpc3RlbmVyKEBlbClcblx0XHRAa2V5TGlzdGVuZXIub24gJ2VzYycsICgpID0+XG5cdFx0XHRAY2xvc2UoKSAgaWYgQGNsb3NlT25Fc2Ncblx0XHRcdHJldHVyblxuXHRcdHJldHVyblxuXG5cblx0b3BlbjogLT5cblx0XHRAc2hvdygpXG5cdFx0cmV0dXJuXG5cblxuXHRjbG9zZTogKGRlc3Ryb3kgPSBmYWxzZSwgc2lsZW50KSAtPlxuXHRcdGlmICFkZXN0cm95ICYmIEBjbG9zZU1vZGUgaXMgJ2hpZGUnXG5cdFx0XHRAZG9IaWRlKClcblx0XHRlbHNlXG5cdFx0XHRAcHJldmVudENsb3NlID0gZmFsc2Vcblx0XHRcdEBlbWl0KCdiZWZvcmVjbG9zZScsIHRoaXMpICBpZiAhc2lsZW50XG5cdFx0XHRpZiBAcHJldmVudENsb3NlIHRoZW4gcmV0dXJuXG5cdFx0XHRAZG9DbG9zZSgpXG5cdFx0XHRAZW1pdCgnY2xvc2UnLCB0aGlzKVxuXHRcdFx0QGRlc3Ryb3koKVxuXHRcdHJldHVyblxuXG5cblx0c2V0VGl0bGU6ICh0aXRsZSkgLT5cblx0XHRAdGl0bGUgPSB0aXRsZVxuXHRcdEB0aXRsZUVsLnNldChcImh0bWxcIiwgdGl0bGUpIGlmIEB0aXRsZUVsXG5cdFx0cmV0dXJuXG5cblxuXHRkb1Nob3c6IC0+XG5cdFx0c3VwZXJcblx0XHRAdG9Gcm9udCgpXG5cdFx0cmV0dXJuXG5cblxuXHRkb0hpZGU6IC0+XG5cdFx0c3VwZXJcblx0XHRAdG9CYWNrKClcblx0XHRyZXR1cm5cblxuXG5cdGRvQ2xvc2U6IC0+XG5cdFx0QGhpZGUoKVxuXHRcdHJldHVyblxuXG5cblx0YmVmb3JlUmVuZGVyOiAtPlxuXHRcdHN1cGVyKClcblx0XHRAZWwuYWRkQ2xhc3MoJ21vZGFsLWRpYWxvZycpXG5cdFx0QGVsLnNldCAnaHRtbCcsIFwiXCJcIlxuXHRcdDxkaXYgY2xhc3M9XCJ3aW5kb3ctY29udGVudCBtb2RhbC1jb250ZW50XCI+XG5cdFx0XHQ8ZGl2IG1pd28tcmVmZXJlbmNlPVwiaGVhZGVyRWxcIiBjbGFzcz1cIndpbmRvdy1oZWFkZXIgbW9kYWwtaGVhZGVyXCI+XG5cdFx0XHRcdDxkaXYgbWl3by1yZWZlcmVuY2U9XCJ0b29sc0VsXCIgY2xhc3M9J3dpbmRvdy10b29scyc+PC9kaXY+XG5cdFx0XHRcdDxoNCBtaXdvLXJlZmVyZW5jZT1cInRpdGxlRWxcIiBjbGFzcz0nd2luZG93LXRpdGxlIG1vZGFsLXRpdGxlJz4je0B0aXRsZX08L2g0PlxuXHRcdFx0PC9kaXY+XG5cdFx0XHQ8ZGl2IG1pd28tcmVmZXJlbmNlPVwiY29udGVudEVsXCIgY2xhc3M9XCJ3aW5kb3ctYm9keSBtb2RhbC1ib2R5XCI+PC9kaXY+XG5cdFx0XHQ8ZGl2IG1pd28tcmVmZXJlbmNlPVwiZm9vdGVyRWxcIiBjbGFzcz1cIndpbmRvdy1mb290ZXIgbW9kYWwtZm9vdGVyXCI+PC9kaXY+XG5cdFx0PC9kaXY+XCJcIlwiXG5cdFx0cmV0dXJuXG5cblxuXHRhZnRlclJlbmRlcjogLT5cblx0XHRzdXBlcigpXG5cdFx0aWYgQHdhc1JlbmRlcmVkXG5cdFx0XHRyZXR1cm5cblxuXHRcdEBlbC5zZXQoJ2FyaWEtbGFiZWxsZWRieScsIEBpZCsnTGFiZWwnKVxuXHRcdEB0aXRsZUVsLnNldCgnaWQnLCBAaWQrJ0xhYmVsJylcblx0XHRAY29udGVudEVsLnNldFN0eWxlKCdoZWlnaHQnLCBAY29udGVudEhlaWdodCkgaWYgQGNvbnRlbnRIZWlnaHRcblxuXHRcdGlmIEBjbG9zZWFibGVcblx0XHRcdEBhZGRUb29sICdjbG9zZScsXG5cdFx0XHRcdGljb246ICdyZW1vdmUnXG5cdFx0XHRcdHRleHQ6IG1pd28udHIoJ21pd28ud2luZG93LmNsb3NlJylcblx0XHRcdFx0aGFuZGxlcjogPT4gQGNsb3NlKClcblxuXHRcdGlmIEBtaW5pbWl6YWJsZVxuXHRcdFx0QGFkZFRvb2wgJ2hpZGUnLFxuXHRcdFx0XHRpY29uOiAnbWludXMnXG5cdFx0XHRcdHRleHQ6IG1pd28udHIoJ21pd28ud2luZG93LmhpZGUnKVxuXHRcdFx0XHRoYW5kbGVyOiA9PiBAaGlkZSgpXG5cblx0XHRmb3IgbmFtZSxidXR0b24gb2YgQGJ1dHRvbnMuaXRlbXNcblx0XHRcdGJ1dHRvbi5yZW5kZXIoQGZvb3RlckVsKSBpZiAhYnV0dG9uLnJlbmRlcmVkXG5cblx0XHRpZiAhQG1vZGFsXG5cdFx0XHRtaXdvLmJvZHkub24oJ2NsaWNrJywgQGJvdW5kKCdvbkJvZHlDbGljaycpKVxuXHRcdHJldHVyblxuXG5cblx0b25Cb2R5Q2xpY2s6IChlKSAtPlxuXHRcdGlmIEBpc1Zpc2libGUoKSAmJiBlLnRhcmdldCBpcyBAZWwgdGhlbiByZXR1cm5cblx0XHRpZiBlLnRhcmdldC5nZXRQYXJlbnQoJy53aW5kb3cnKSBpcyBAZWwgdGhlbiByZXR1cm5cblx0XHRAY2xvc2UoKSBpZiBAY2xvc2VPbkNsaWNrT3V0XG5cdFx0cmV0dXJuXG5cblxuXHRvbk92ZXJsYXlDbGljazogLT5cblx0XHRAY2xvc2UoKSBpZiBAY2xvc2VPbkNsaWNrT3V0XG5cdFx0cmV0dXJuXG5cblxuXHRzZXRDb250ZW50OiAoc3RyaW5nKSAtPlxuXHRcdEBjb250ZW50RWwuc2V0KFwiaHRtbFwiLCBzdHJpbmcpXG5cdFx0cmV0dXJuXG5cblxuXG5cdHNldEJ1dHRvbnM6IChidXR0b25zKSAtPlxuXHRcdGZvciBidXR0b24gaW4gQGJ1dHRvbnNcblx0XHRcdGJ1dHRvbi5kZXN0cm95KClcblx0XHRAYnV0dG9ucy5lbXB0eSgpXG5cdFx0Zm9yIGJ1dHRvbiBpbiBidXR0b25zXG5cdFx0XHRAYWRkQnV0dG9uKGJ1dHRvbi5uYW1lLCBidXR0b24pXG5cdFx0cmV0dXJuXG5cblxuXHRhZGRCdXR0b246IChuYW1lLCBidXR0b24pIC0+XG5cdFx0aWYgIVR5cGUuaXNJbnN0YW5jZShidXR0b24pXG5cdFx0XHRidXR0b24gPSBuZXcgQnV0dG9uKGJ1dHRvbilcblx0XHRAYnV0dG9ucy5zZXQobmFtZSwgYnV0dG9uKVxuXHRcdGJ1dHRvbi5vbiAnY2xpY2snLCA9PlxuXHRcdFx0QGVtaXQoJ2FjdGlvbicsIHRoaXMsIG5hbWUpXG5cdFx0XHRyZXR1cm5cblx0XHRpZiBAZm9vdGVyRWxcblx0XHRcdGJ1dHRvbi5yZW5kZXIoQGZvb3RlckVsKVxuXHRcdHJldHVybiBidXR0b25cblxuXG5cdGFkZENsb3NlQnV0dG9uOiAodGV4dCkgLT5cblx0XHRyZXR1cm4gQGFkZEJ1dHRvbiAnY2xvc2UnLFxuXHRcdFx0dGV4dDogdGV4dFxuXHRcdFx0aGFuZGxlcjogKCkgPT4gQGNsb3NlKClcblxuXG5cdGdldEJ1dHRvbjogKG5hbWUpIC0+XG5cdFx0cmV0dXJuIEBidXR0b25zLmdldChuYW1lKVxuXG5cblxuXHRhZGRUb29sOiAobmFtZSwgYnV0dG9uKSAtPlxuXHRcdGJ1dHRvbiA9IG5ldyBUb29sQnV0dG9uKGJ1dHRvbikgaWYgIVR5cGUuaXNJbnN0YW5jZShidXR0b24pXG5cdFx0QHRvb2xzLnNldChuYW1lLCBidXR0b24pXG5cdFx0YnV0dG9uLnJlbmRlcihAdG9vbHNFbClcblx0XHRyZXR1cm4gYnV0dG9uXG5cblxuXHRnZXRUb29sOiAobmFtZSktPlxuXHRcdHJldHVybiBAdG9vbHMuZ2V0KG5hbWUpXG5cblxuXHRkb0Rlc3Ryb3k6IC0+XG5cdFx0bWl3by53aW5kb3dNZ3IudW5yZWdpc3Rlcih0aGlzKVxuXHRcdG1pd28uYm9keS51bignY2xpY2snLCBAYm91bmQoJ29uQm9keUNsaWNrJykpXG5cdFx0QGtleUxpc3RlbmVyLmRlc3Ryb3koKSBpZiBAa2V5TGlzdGVuZXJcblx0XHRAYnV0dG9ucy5kZXN0cm95KClcblx0XHRAdG9vbHMuZGVzdHJveSgpXG5cdFx0c3VwZXIoKVxuXHRcdHJldHVyblxuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBXaW5kb3ciLCJjbGFzcyBXaW5kb3dNYW5hZ2VyXG5cblx0bGlzdDogbnVsbFxuXG5cblx0Y29uc3RydWN0b3I6IC0+XG5cdFx0QGxpc3QgPSBuZXcgTWl3by51dGlscy5Db2xsZWN0aW9uKClcblx0XHRyZXR1cm5cblxuXG5cdHJlZ2lzdGVyOiAoY29tcCkgLT5cblx0XHRjb21wLndpbmRvd01nci51bnJlZ2lzdGVyKGNvbXApICBpZiBjb21wLndpbmRvd01nclxuXHRcdGNvbXAud2luZG93TWdyID0gdGhpc1xuXHRcdEBsaXN0LnNldChjb21wLmlkLCBjb21wKVxuXHRcdHJldHVyblxuXG5cblx0dW5yZWdpc3RlcjogKGNvbXApIC0+XG5cdFx0aWYgQGxpc3QuaGFzKGNvbXAuaWQpXG5cdFx0XHRAbGlzdC5yZW1vdmUoY29tcC5pZClcblx0XHRcdGRlbGV0ZSBjb21wLndpbmRvd01nclxuXHRcdHJldHVyblxuXG5cblx0Z2V0OiAoaWQpIC0+XG5cdFx0cmV0dXJuIEBsaXN0LmdldChpZClcblxuXG5cdGdldEJ5OiAobmFtZSwgdmFsdWUpIC0+XG5cdFx0cmV0dXJuIEBsaXN0LmdldEJ5KG5hbWUsIHZhbHVlKVxuXG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IFdpbmRvd01hbmFnZXIiLCJtb2R1bGUuZXhwb3J0cyA9XG5cblx0V2luZG93OiByZXF1aXJlICcuL1dpbmRvdydcblx0Rm9ybVdpbmRvdzogcmVxdWlyZSAnLi9Gb3JtV2luZG93J1xuXHREaWFsb2c6IHJlcXVpcmUgJy4vRGlhbG9nJyJdfQ==
